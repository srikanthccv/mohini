{
    "$defs": {
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.carbonexporter.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Carbon exporter.",
            "properties": {
                "endpoint": {
                    "description": "Endpoint specifies host and port to send metrics in the Carbon plaintext\nformat. The default value is defined by the DefaultEndpoint constant.",
                    "title": "endpoint",
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout is the maximum duration allowed to connecting and sending the\ndata to the Carbon/Graphite backend.\nThe default value is defined by the DefaultSendTimeout constant.",
                    "title": "timeout",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.fileexporter.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for file exporter.",
            "properties": {
                "compression": {
                    "description": "Compression Codec used to export telemetry data\nSupported compression algorithms:`zstd`",
                    "title": "compression",
                    "type": "string"
                },
                "flush_interval": {
                    "description": "FlushInterval is the duration between flushes.\nSee time.ParseDuration for valid values.",
                    "title": "flush_interval",
                    "type": "integer"
                },
                "format": {
                    "description": "FormatType define the data format of encoded telemetry data\nOptions:\n- json[default]:  OTLP json bytes.\n- proto:  OTLP binary protobuf bytes.",
                    "title": "format",
                    "type": "string"
                },
                "path": {
                    "description": "Path of the file to write to. Path is relative to current directory.",
                    "title": "path",
                    "type": "string"
                },
                "rotation": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.fileexporter.Rotation",
                    "description": "Rotation defines an option about rotation of telemetry files",
                    "title": "rotation"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.fileexporter.Rotation": {
            "additionalProperties": false,
            "description": "Rotation an option to rolling log files",
            "properties": {
                "localtime": {
                    "description": "LocalTime determines if the time used for formatting the timestamps in\nbackup files is the computer's local time.  The default is to use UTC\ntime.",
                    "title": "localtime",
                    "type": "boolean"
                },
                "max_backups": {
                    "description": "MaxBackups is the maximum number of old log files to retain. The default\nis to 100 files.",
                    "title": "max_backups",
                    "type": "integer"
                },
                "max_days": {
                    "description": "MaxDays is the maximum number of days to retain old log files based on the\ntimestamp encoded in their filename.  Note that a day is defined as 24\nhours and may not exactly correspond to calendar days due to daylight\nsavings, leap seconds, etc. The default is not to remove old log files\nbased on age.",
                    "title": "max_days",
                    "type": "integer"
                },
                "max_megabytes": {
                    "description": "MaxMegabytes is the maximum size in megabytes of the file before it gets\nrotated. It defaults to 100 megabytes.",
                    "title": "max_megabytes",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.jaegerexporter.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Jaeger gRPC exporter.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing RPCs.",
                    "title": "auth"
                },
                "balancer_name": {
                    "description": "Sets the balancer in grpclb_policy to discover the servers. Default is pick_first.\nhttps://github.com/grpc/grpc-go/blob/master/examples/features/load_balancing/README.md",
                    "title": "balancer_name",
                    "type": "string"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target to which the exporter is going to send traces or metrics,\nusing the gRPC protocol. The valid syntax is described at\nhttps://github.com/grpc/grpc/blob/master/doc/naming.md.",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "The headers associated with gRPC requests.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "keepalive": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configgrpc.KeepaliveClientConfig",
                    "description": "The keepalive parameters for gRPC client. See grpc.WithKeepaliveParams.\n(https://godoc.org/google.golang.org/grpc#WithKeepaliveParams).",
                    "title": "keepalive"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for gRPC client. See grpc.WithReadBufferSize.\n(https://godoc.org/google.golang.org/grpc#WithReadBufferSize).",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.RetrySettings",
                    "title": "retry_on_failure"
                },
                "sending_queue": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.QueueSettings",
                    "title": "sending_queue"
                },
                "timeout": {
                    "description": "Timeout is the timeout for every attempt to send data to the backend.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "wait_for_ready": {
                    "description": "WaitForReady parameter configures client to wait for ready state before sending data.\n(https://github.com/grpc/grpc/blob/master/doc/wait-for-ready.md)",
                    "title": "wait_for_ready",
                    "type": "boolean"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for gRPC gRPC. See grpc.WithWriteBufferSize.\n(https://godoc.org/google.golang.org/grpc#WithWriteBufferSize).",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.jaegerthrifthttpexporter.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Jaeger Thrift over HTTP exporter.",
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.AWSMSKConfig": {
            "additionalProperties": false,
            "description": "AWSMSKConfig defines the additional SASL authentication measures needed to use AWS_MSK_IAM mechanism",
            "properties": {
                "broker_addr": {
                    "description": "BrokerAddr is the client is connecting to in order to perform the auth required",
                    "title": "broker_addr",
                    "type": "string"
                },
                "region": {
                    "description": "Region is the AWS region the MSK cluster is based in",
                    "title": "region",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.Authentication": {
            "additionalProperties": false,
            "description": "Authentication defines authentication.",
            "properties": {
                "kerberos": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.KerberosConfig",
                    "title": "kerberos"
                },
                "plain_text": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.PlainTextConfig",
                    "title": "plain_text"
                },
                "sasl": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.SASLConfig",
                    "title": "sasl"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "title": "tls"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Kafka exporter.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.Authentication",
                    "description": "Authentication defines used authentication mechanism.",
                    "title": "auth"
                },
                "brokers": {
                    "description": "The list of kafka brokers (default localhost:9092)",
                    "items": {
                        "type": "string"
                    },
                    "title": "brokers",
                    "type": "array"
                },
                "encoding": {
                    "description": "Encoding of messages (default \"otlp_proto\")",
                    "title": "encoding",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.Metadata",
                    "description": "Metadata is the namespace for metadata management properties used by the\nClient, and shared by the Producer/Consumer.",
                    "title": "metadata"
                },
                "producer": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.Producer",
                    "description": "Producer is the namespaces for producer properties used only by the Producer",
                    "title": "producer"
                },
                "protocol_version": {
                    "description": "Kafka protocol version",
                    "title": "protocol_version",
                    "type": "string"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.RetrySettings",
                    "title": "retry_on_failure"
                },
                "sending_queue": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.QueueSettings",
                    "title": "sending_queue"
                },
                "timeout": {
                    "description": "Timeout is the timeout for every attempt to send data to the backend.",
                    "title": "timeout",
                    "type": "integer"
                },
                "topic": {
                    "description": "The name of the kafka topic to export to (default otlp_spans for traces, otlp_metrics for metrics)",
                    "title": "topic",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.KerberosConfig": {
            "additionalProperties": false,
            "description": "KerberosConfig defines kereros configuration.",
            "properties": {
                "config_file": {
                    "title": "config_file",
                    "type": "string"
                },
                "keytab_file": {
                    "title": "keytab_file",
                    "type": "string"
                },
                "password": {
                    "title": "password",
                    "type": "string"
                },
                "realm": {
                    "title": "realm",
                    "type": "string"
                },
                "service_name": {
                    "title": "service_name",
                    "type": "string"
                },
                "use_keytab": {
                    "title": "use_keytab",
                    "type": "boolean"
                },
                "username": {
                    "title": "username",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.Metadata": {
            "additionalProperties": false,
            "description": "Metadata defines configuration for retrieving metadata from the broker.",
            "properties": {
                "full": {
                    "description": "Whether to maintain a full set of metadata for all topics, or just\nthe minimal set that has been necessary so far. The full set is simpler\nand usually more convenient, but can take up a substantial amount of\nmemory if you have many topics and partitions. Defaults to true.",
                    "title": "full",
                    "type": "boolean"
                },
                "retry": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.MetadataRetry",
                    "description": "Retry configuration for metadata.\nThis configuration is useful to avoid race conditions when broker\nis starting at the same time as collector.",
                    "title": "retry"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.MetadataRetry": {
            "additionalProperties": false,
            "description": "MetadataRetry defines retry configuration for Metadata.",
            "properties": {
                "backoff": {
                    "description": "How long to wait for leader election to occur before retrying\n(default 250ms). Similar to the JVM's `retry.backoff.ms`.",
                    "title": "backoff",
                    "type": "integer"
                },
                "max": {
                    "description": "The total number of times to retry a metadata request when the\ncluster is in the middle of a leader election or at startup (default 3).",
                    "title": "max",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.PlainTextConfig": {
            "additionalProperties": false,
            "description": "PlainTextConfig defines plaintext authentication.",
            "properties": {
                "password": {
                    "title": "password",
                    "type": "string"
                },
                "username": {
                    "title": "username",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.Producer": {
            "additionalProperties": false,
            "description": "Producer defines configuration for producer",
            "properties": {
                "compression": {
                    "description": "Compression Codec used to produce messages\nhttps://pkg.go.dev/github.com/Shopify/sarama@v1.30.0#CompressionCodec\nThe options are: 'none', 'gzip', 'snappy', 'lz4', and 'zstd'",
                    "title": "compression",
                    "type": "string"
                },
                "flush_max_messages": {
                    "description": "The maximum number of messages the producer will send in a single\nbroker request. Defaults to 0 for unlimited. Similar to\n`queue.buffering.max.messages` in the JVM producer.",
                    "title": "flush_max_messages",
                    "type": "integer"
                },
                "max_message_bytes": {
                    "description": "Maximum message bytes the producer will accept to produce.",
                    "title": "max_message_bytes",
                    "type": "integer"
                },
                "required_acks": {
                    "description": "RequiredAcks Number of acknowledgements required to assume that a message has been sent.\nhttps://pkg.go.dev/github.com/Shopify/sarama@v1.30.0#RequiredAcks\nThe options are:\n  0 -\u003e NoResponse.  doesn't send any response\n  1 -\u003e WaitForLocal. waits for only the local commit to succeed before responding ( default )\n  -1 -\u003e WaitForAll. waits for all in-sync replicas to commit before responding.",
                    "title": "required_acks",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.SASLConfig": {
            "additionalProperties": false,
            "description": "SASLConfig defines the configuration for the SASL authentication.",
            "properties": {
                "aws_msk": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.AWSMSKConfig",
                    "title": "aws_msk"
                },
                "mechanism": {
                    "description": "SASL Mechanism to be used, possible values are: (PLAIN, AWS_MSK_IAM, SCRAM-SHA-256 or SCRAM-SHA-512).",
                    "title": "mechanism",
                    "type": "string"
                },
                "password": {
                    "description": "Password to be used on authentication",
                    "title": "password",
                    "type": "string"
                },
                "username": {
                    "description": "Username to be used on authentication",
                    "title": "username",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.loadbalancingexporter.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for the exporter.",
            "properties": {
                "protocol": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.loadbalancingexporter.Protocol",
                    "title": "protocol"
                },
                "resolver": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.loadbalancingexporter.ResolverSettings",
                    "title": "resolver"
                },
                "routing_key": {
                    "title": "routing_key",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.loadbalancingexporter.DNSResolver": {
            "additionalProperties": false,
            "description": "DNSResolver defines the configuration for the DNS resolver",
            "properties": {
                "hostname": {
                    "title": "hostname",
                    "type": "string"
                },
                "interval": {
                    "title": "interval",
                    "type": "integer"
                },
                "port": {
                    "title": "port",
                    "type": "string"
                },
                "timeout": {
                    "title": "timeout",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.loadbalancingexporter.Protocol": {
            "additionalProperties": false,
            "description": "Protocol holds the individual protocol-specific settings.",
            "properties": {
                "otlp": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.otlpexporter.Config",
                    "title": "otlp"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.loadbalancingexporter.ResolverSettings": {
            "additionalProperties": false,
            "description": "ResolverSettings defines the configurations for the backend resolver",
            "properties": {
                "dns": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.loadbalancingexporter.DNSResolver",
                    "title": "dns"
                },
                "static": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.loadbalancingexporter.StaticResolver",
                    "title": "static"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.loadbalancingexporter.StaticResolver": {
            "additionalProperties": false,
            "description": "StaticResolver defines the configuration for the resolver providing a fixed list of backends",
            "properties": {
                "hostnames": {
                    "items": {
                        "type": "string"
                    },
                    "title": "hostnames",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.opencensusexporter.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for OpenCensus exporter.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing RPCs.",
                    "title": "auth"
                },
                "balancer_name": {
                    "description": "Sets the balancer in grpclb_policy to discover the servers. Default is pick_first.\nhttps://github.com/grpc/grpc-go/blob/master/examples/features/load_balancing/README.md",
                    "title": "balancer_name",
                    "type": "string"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target to which the exporter is going to send traces or metrics,\nusing the gRPC protocol. The valid syntax is described at\nhttps://github.com/grpc/grpc/blob/master/doc/naming.md.",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "The headers associated with gRPC requests.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "keepalive": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configgrpc.KeepaliveClientConfig",
                    "description": "The keepalive parameters for gRPC client. See grpc.WithKeepaliveParams.\n(https://godoc.org/google.golang.org/grpc#WithKeepaliveParams).",
                    "title": "keepalive"
                },
                "num_workers": {
                    "description": "The number of workers that send the gRPC requests.",
                    "title": "num_workers",
                    "type": "integer"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for gRPC client. See grpc.WithReadBufferSize.\n(https://godoc.org/google.golang.org/grpc#WithReadBufferSize).",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.RetrySettings",
                    "title": "retry_on_failure"
                },
                "sending_queue": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.QueueSettings",
                    "title": "sending_queue"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "wait_for_ready": {
                    "description": "WaitForReady parameter configures client to wait for ready state before sending data.\n(https://github.com/grpc/grpc/blob/master/doc/wait-for-ready.md)",
                    "title": "wait_for_ready",
                    "type": "boolean"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for gRPC gRPC. See grpc.WithWriteBufferSize.\n(https://godoc.org/google.golang.org/grpc#WithWriteBufferSize).",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.parquetexporter.Config": {
            "additionalProperties": false,
            "properties": {
                "path": {
                    "title": "path",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.prometheusexporter.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Prometheus exporter.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth for this receiver",
                    "title": "auth"
                },
                "const_labels": {
                    "$ref": "#/$defs/github.com.prometheus.client_golang.prometheus.Labels",
                    "description": "ConstLabels are values that are applied for every exported metric.",
                    "title": "const_labels"
                },
                "cors": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.confighttp.CORSSettings",
                    "description": "CORS configures the server for HTTP cross-origin resource sharing (CORS).",
                    "title": "cors"
                },
                "enable_open_metrics": {
                    "description": "EnableOpenMetrics enables the use of the OpenMetrics encoding option for the prometheus exporter.",
                    "title": "enable_open_metrics",
                    "type": "boolean"
                },
                "endpoint": {
                    "description": "Endpoint configures the listening address for the server.",
                    "title": "endpoint",
                    "type": "string"
                },
                "include_metadata": {
                    "description": "IncludeMetadata propagates the client metadata from the incoming requests to the downstream consumers\nExperimental: *NOTE* this option is subject to change or removal in the future.",
                    "title": "include_metadata",
                    "type": "boolean"
                },
                "max_request_body_size": {
                    "description": "MaxRequestBodySize sets the maximum request body size in bytes",
                    "title": "max_request_body_size",
                    "type": "integer"
                },
                "metric_expiration": {
                    "description": "MetricExpiration defines how long metrics are kept without updates",
                    "title": "metric_expiration",
                    "type": "integer"
                },
                "namespace": {
                    "description": "Namespace if set, exports metrics under the provided value.",
                    "title": "namespace",
                    "type": "string"
                },
                "resource_to_telemetry_conversion": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.resourcetotelemetry.Settings",
                    "description": "ResourceToTelemetrySettings defines configuration for converting resource attributes to metric labels.",
                    "title": "resource_to_telemetry_conversion"
                },
                "response_headers": {
                    "description": "Additional headers attached to each HTTP response sent to the client.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "response_headers",
                    "type": "object"
                },
                "send_timestamps": {
                    "description": "SendTimestamps will send the underlying scrape timestamp with the export",
                    "title": "send_timestamps",
                    "type": "boolean"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSServerSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.prometheusremotewriteexporter.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Remote Write exporter.",
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "export_created_metric": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.prometheusremotewriteexporter.CreatedMetric",
                    "description": "CreatedMetric allows customizing creation of _created metrics",
                    "title": "export_created_metric"
                },
                "external_labels": {
                    "description": "ExternalLabels defines a map of label keys and values that are allowed to start with reserved prefix \"__\"",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "external_labels",
                    "type": "object"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "namespace": {
                    "description": "prefix attached to each exported metric name\nSee: https://prometheus.io/docs/practices/naming/#metric-names",
                    "title": "namespace",
                    "type": "string"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "remote_write_queue": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.prometheusremotewriteexporter.RemoteWriteQueue",
                    "description": "QueueConfig allows users to fine tune the queues\nthat handle outgoing requests.",
                    "title": "remote_write_queue"
                },
                "resource_to_telemetry_conversion": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.resourcetotelemetry.Settings",
                    "description": "ResourceToTelemetrySettings is the option for converting resource attributes to telemetry attributes.\n\"Enabled\" - A boolean field to enable/disable this option. Default is `false`.\nIf enabled, all the resource attributes will be converted to metric labels by default.",
                    "title": "resource_to_telemetry_conversion"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.RetrySettings",
                    "title": "retry_on_failure"
                },
                "target_info": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.prometheusremotewriteexporter.TargetInfo",
                    "description": "TargetInfo allows customizing the target_info metric",
                    "title": "target_info"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "wal": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.prometheusremotewriteexporter.WALConfig",
                    "title": "wal"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.prometheusremotewriteexporter.CreatedMetric": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Enabled if true the _created metrics could be exported",
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.prometheusremotewriteexporter.RemoteWriteQueue": {
            "additionalProperties": false,
            "description": "RemoteWriteQueue allows to configure the remote write queue.",
            "properties": {
                "enabled": {
                    "description": "Enabled if false the queue is not enabled, the export requests\nare executed synchronously.",
                    "title": "enabled",
                    "type": "boolean"
                },
                "num_consumers": {
                    "description": "NumWorkers configures the number of workers used by\nthe collector to fan out remote write requests.",
                    "title": "num_consumers",
                    "type": "integer"
                },
                "queue_size": {
                    "description": "QueueSize is the maximum number of OTLP metric batches allowed\nin the queue at a given time. Ignored if Enabled is false.",
                    "title": "queue_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.prometheusremotewriteexporter.TargetInfo": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Enabled if false the target_info metric is not generated by the exporter",
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.prometheusremotewriteexporter.WALConfig": {
            "additionalProperties": false,
            "properties": {
                "buffer_size": {
                    "title": "buffer_size",
                    "type": "integer"
                },
                "directory": {
                    "title": "directory",
                    "type": "string"
                },
                "truncate_frequency": {
                    "title": "truncate_frequency",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.Athenz": {
            "additionalProperties": false,
            "properties": {
                "key_id": {
                    "title": "key_id",
                    "type": "string"
                },
                "principal_header": {
                    "title": "principal_header",
                    "type": "string"
                },
                "private_key": {
                    "title": "private_key",
                    "type": "string"
                },
                "provider_domain": {
                    "title": "provider_domain",
                    "type": "string"
                },
                "tenant_domain": {
                    "title": "tenant_domain",
                    "type": "string"
                },
                "tenant_service": {
                    "title": "tenant_service",
                    "type": "string"
                },
                "zts_url": {
                    "title": "zts_url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.Authentication": {
            "additionalProperties": false,
            "properties": {
                "athenz": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.Athenz",
                    "title": "athenz"
                },
                "oauth2": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.OAuth2",
                    "title": "oauth2"
                },
                "tls": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.TLS",
                    "title": "tls"
                },
                "token": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.Token",
                    "title": "token"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Pulsar exporter.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.Authentication",
                    "title": "auth"
                },
                "connection_timeout": {
                    "title": "connection_timeout",
                    "type": "integer"
                },
                "encoding": {
                    "description": "Encoding of messages (default \"otlp_proto\")",
                    "title": "encoding",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Endpoint of pulsar broker (default \"pulsar://localhost:6650\")",
                    "title": "endpoint",
                    "type": "string"
                },
                "map_connections_per_broker": {
                    "title": "map_connections_per_broker",
                    "type": "integer"
                },
                "operation_timeout": {
                    "title": "operation_timeout",
                    "type": "integer"
                },
                "producer": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.Producer",
                    "description": "Producer configuration of the Pulsar producer",
                    "title": "producer"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.RetrySettings",
                    "title": "retry_on_failure"
                },
                "sending_queue": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.QueueSettings",
                    "title": "sending_queue"
                },
                "timeout": {
                    "description": "Timeout is the timeout for every attempt to send data to the backend.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls_allow_insecure_connection": {
                    "description": "Configure whether the Pulsar client accept untrusted TLS certificate from broker (default: false)",
                    "title": "tls_allow_insecure_connection",
                    "type": "boolean"
                },
                "tls_trust_certs_file_path": {
                    "description": "Set the path to the trusted TLS certificate file",
                    "title": "tls_trust_certs_file_path",
                    "type": "string"
                },
                "topic": {
                    "description": "The name of the pulsar topic to export to (default otlp_spans for traces, otlp_metrics for metrics)",
                    "title": "topic",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.OAuth2": {
            "additionalProperties": false,
            "properties": {
                "audience": {
                    "title": "audience",
                    "type": "string"
                },
                "client_id": {
                    "title": "client_id",
                    "type": "string"
                },
                "issuer_url": {
                    "title": "issuer_url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.Producer": {
            "additionalProperties": false,
            "description": "Producer defines configuration for producer",
            "properties": {
                "batch_builder_type": {
                    "title": "batch_builder_type",
                    "type": "string"
                },
                "batching_max_messages": {
                    "title": "batching_max_messages",
                    "type": "integer"
                },
                "batching_max_publish_delay": {
                    "title": "batching_max_publish_delay",
                    "type": "integer"
                },
                "batching_max_size": {
                    "title": "batching_max_size",
                    "type": "integer"
                },
                "compression_level": {
                    "title": "compression_level",
                    "type": "string"
                },
                "compression_type": {
                    "title": "compression_type",
                    "type": "string"
                },
                "disable_batching": {
                    "title": "disable_batching",
                    "type": "boolean"
                },
                "disable_block_if_queue_full": {
                    "title": "disable_block_if_queue_full",
                    "type": "boolean"
                },
                "hashing_scheme": {
                    "title": "hashing_scheme",
                    "type": "string"
                },
                "max_pending_messages": {
                    "title": "max_pending_messages",
                    "type": "integer"
                },
                "max_reconnect_broker": {
                    "title": "max_reconnect_broker",
                    "type": "integer"
                },
                "partitions_auto_discovery_interval": {
                    "title": "partitions_auto_discovery_interval",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.TLS": {
            "additionalProperties": false,
            "properties": {
                "cert_file": {
                    "title": "cert_file",
                    "type": "string"
                },
                "key_file": {
                    "title": "key_file",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.Token": {
            "additionalProperties": false,
            "properties": {
                "token": {
                    "title": "token",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.exporter.zipkinexporter.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration settings for the Zipkin exporter.",
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "default_service_name": {
                    "title": "default_service_name",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "format": {
                    "title": "format",
                    "type": "string"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.RetrySettings",
                    "title": "retry_on_failure"
                },
                "sending_queue": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.QueueSettings",
                    "title": "sending_queue"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.basicauthextension.ClientAuthSettings": {
            "additionalProperties": false,
            "properties": {
                "password": {
                    "description": "Password holds the password to use for client authentication.",
                    "title": "password",
                    "type": "string"
                },
                "username": {
                    "description": "Username holds the username to use for client authentication.",
                    "title": "username",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.basicauthextension.Config": {
            "additionalProperties": false,
            "properties": {
                "client_auth": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.basicauthextension.ClientAuthSettings",
                    "description": "ClientAuth settings",
                    "title": "client_auth"
                },
                "htpasswd": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.basicauthextension.HtpasswdSettings",
                    "description": "Htpasswd settings.",
                    "title": "htpasswd"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.basicauthextension.HtpasswdSettings": {
            "additionalProperties": false,
            "properties": {
                "file": {
                    "description": "Path to the htpasswd file.",
                    "title": "file",
                    "type": "string"
                },
                "inline": {
                    "description": "Inline contents of the htpasswd file.",
                    "title": "inline",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.bearertokenauthextension.Config": {
            "additionalProperties": false,
            "description": "Config specifies how the Per-RPC bearer token based authentication data should be obtained.",
            "properties": {
                "filename": {
                    "description": "Filename points to a file that contains the bearer token to use for every RPC.",
                    "title": "filename",
                    "type": "string"
                },
                "scheme": {
                    "description": "Scheme specifies the auth-scheme for the token. Defaults to \"Bearer\"",
                    "title": "scheme",
                    "type": "string"
                },
                "token": {
                    "description": "BearerToken specifies the bearer token to use for every RPC.",
                    "title": "token",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.healthcheckextension.Config": {
            "additionalProperties": false,
            "description": "Config has the configuration for the extension enabling the health check extension, used to report the health status of the service.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth for this receiver",
                    "title": "auth"
                },
                "check_collector_pipeline": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.healthcheckextension.checkCollectorPipelineSettings",
                    "description": "CheckCollectorPipeline contains the list of settings of collector pipeline health check",
                    "title": "check_collector_pipeline"
                },
                "cors": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.confighttp.CORSSettings",
                    "description": "CORS configures the server for HTTP cross-origin resource sharing (CORS).",
                    "title": "cors"
                },
                "endpoint": {
                    "description": "Endpoint configures the listening address for the server.",
                    "title": "endpoint",
                    "type": "string"
                },
                "include_metadata": {
                    "description": "IncludeMetadata propagates the client metadata from the incoming requests to the downstream consumers\nExperimental: *NOTE* this option is subject to change or removal in the future.",
                    "title": "include_metadata",
                    "type": "boolean"
                },
                "max_request_body_size": {
                    "description": "MaxRequestBodySize sets the maximum request body size in bytes",
                    "title": "max_request_body_size",
                    "type": "integer"
                },
                "path": {
                    "description": "Path represents the path the health check service will serve.\nThe default path is \"/\".",
                    "title": "path",
                    "type": "string"
                },
                "response_body": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.healthcheckextension.ResponseBodySettings",
                    "description": "ResponseBody represents the body of the response returned by the health check service.\nThis overrides the default response that it would return.",
                    "title": "response_body"
                },
                "response_headers": {
                    "description": "Additional headers attached to each HTTP response sent to the client.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "response_headers",
                    "type": "object"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSServerSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.healthcheckextension.ResponseBodySettings": {
            "additionalProperties": false,
            "properties": {
                "healthy": {
                    "description": "Healthy represents the body of the response returned when the collector is healthy.\nThe default value is \"\"",
                    "title": "healthy",
                    "type": "string"
                },
                "unhealthy": {
                    "description": "Unhealthy represents the body of the response returned when the collector is unhealthy.\nThe default value is \"\"",
                    "title": "unhealthy",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.healthcheckextension.checkCollectorPipelineSettings": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                },
                "exporter_failure_threshold": {
                    "title": "exporter_failure_threshold",
                    "type": "integer"
                },
                "interval": {
                    "title": "interval",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.httpforwarder.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for http forwarder extension.",
            "properties": {
                "egress": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.confighttp.HTTPClientSettings",
                    "description": "Egress holds config settings to use for forwarded requests.",
                    "title": "egress"
                },
                "ingress": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.confighttp.HTTPServerSettings",
                    "description": "Ingress holds config settings for HTTP server listening for requests.",
                    "title": "ingress"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.jaegerremotesampling.Config": {
            "additionalProperties": false,
            "description": "Config has the configuration for the extension enabling the health check extension, used to report the health status of the service.",
            "properties": {
                "grpc": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configgrpc.GRPCServerSettings",
                    "title": "grpc"
                },
                "http": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.confighttp.HTTPServerSettings",
                    "title": "http"
                },
                "source": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.jaegerremotesampling.Source",
                    "description": "Source configures the source for the strategies file. One of `remote` or `file` has to be specified.",
                    "title": "source"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.jaegerremotesampling.Source": {
            "additionalProperties": false,
            "properties": {
                "file": {
                    "description": "File specifies a local file as the strategies source",
                    "title": "file",
                    "type": "string"
                },
                "reload_interval": {
                    "description": "ReloadInterval determines the periodicity to refresh the strategies",
                    "title": "reload_interval",
                    "type": "integer"
                },
                "remote": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configgrpc.GRPCClientSettings",
                    "description": "Remote defines the remote location for the file",
                    "title": "remote"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.oauth2clientauthextension.Config": {
            "additionalProperties": false,
            "description": "Config stores the configuration for OAuth2 Client Credentials (2-legged OAuth2 flow) setup.",
            "properties": {
                "client_id": {
                    "description": "ClientID is the application's ID.\nSee https://datatracker.ietf.org/doc/html/rfc6749#section-2.2",
                    "title": "client_id",
                    "type": "string"
                },
                "client_secret": {
                    "description": "ClientSecret is the application's secret.\nSee https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1",
                    "title": "client_secret",
                    "type": "string"
                },
                "endpoint_params": {
                    "$ref": "#/$defs/net.url.Values",
                    "description": "EndpointParams specifies additional parameters for requests to the token endpoint.",
                    "title": "endpoint_params"
                },
                "scopes": {
                    "description": "Scope specifies optional requested permissions.\nSee https://datatracker.ietf.org/doc/html/rfc6749#section-3.3",
                    "items": {
                        "type": "string"
                    },
                    "title": "scopes",
                    "type": "array"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout` for the underneath client to authorization\nserver while fetching and refreshing tokens.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration for the underneath client to authorization server.",
                    "title": "tls"
                },
                "token_url": {
                    "description": "TokenURL is the resource server's token endpoint\nURL. This is a constant specific to each server.\nSee https://datatracker.ietf.org/doc/html/rfc6749#section-3.2",
                    "title": "token_url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.dockerobserver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for docker observer",
            "properties": {
                "api_version": {
                    "description": "Docker client API version. Default is 1.22",
                    "title": "api_version",
                    "type": "number"
                },
                "cache_sync_interval": {
                    "description": "The time to wait before resyncing the list of containers the observer maintains\nthrough the docker event listener example: cache_sync_interval: \"20m\"\nDefault: \"60m\"",
                    "title": "cache_sync_interval",
                    "type": "integer"
                },
                "endpoint": {
                    "description": "The URL of the docker server.  Default is \"unix:///var/run/docker.sock\"",
                    "title": "endpoint",
                    "type": "string"
                },
                "excluded_images": {
                    "description": "A list of filters whose matching images are to be excluded.  Supports literals, globs, and regex.",
                    "items": {
                        "type": "string"
                    },
                    "title": "excluded_images",
                    "type": "array"
                },
                "ignore_non_host_bindings": {
                    "description": "If true, the observer will ignore discovered container endpoints that are not bound\nto host ports.  This is useful if containers exist that are not accessible\nto an instance of the agent running outside of the docker network stack.",
                    "title": "ignore_non_host_bindings",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "The maximum amount of time to wait for docker API responses.  Default is 5s",
                    "title": "timeout",
                    "type": "integer"
                },
                "use_host_bindings": {
                    "description": "If true, the observer will configure receivers for matching container endpoints\nusing the host bound ip and port.  This is useful if containers exist that are not\naccessible to an instance of the agent running outside of the docker network stack.\nIf UseHostnameIfPresent and this config are both enabled, this setting will take precedence.",
                    "title": "use_host_bindings",
                    "type": "boolean"
                },
                "use_hostname_if_present": {
                    "description": "If true, the \"Config.Hostname\" field (if present) of the docker\ncontainer will be used as the discovered host that is used to configure\nreceivers.  If false or if no hostname is configured, the field\n`NetworkSettings.IPAddress` is used instead.",
                    "title": "use_hostname_if_present",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.ecsobserver.Config": {
            "additionalProperties": false,
            "properties": {
                "cluster_name": {
                    "description": "ClusterName is the target ECS cluster name for service discovery.",
                    "title": "cluster_name",
                    "type": "string"
                },
                "cluster_region": {
                    "description": "ClusterRegion is the target ECS cluster's AWS region.",
                    "title": "cluster_region",
                    "type": "string"
                },
                "docker_labels": {
                    "description": "DockerLabels is a list of docker labels for filtering containers within tasks.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.ecsobserver.DockerLabelConfig"
                    },
                    "title": "docker_labels",
                    "type": "array"
                },
                "job_label_name": {
                    "description": "JobLabelName is the override for prometheus job label, using `job` literal will cause error\nin otel prometheus receiver. See https://github.com/open-telemetry/opentelemetry-collector/issues/575",
                    "title": "job_label_name",
                    "type": "string"
                },
                "refresh_interval": {
                    "description": "RefreshInterval determines how frequency at which the observer\nneeds to poll for collecting information about new processes.",
                    "title": "refresh_interval",
                    "type": "integer"
                },
                "result_file": {
                    "description": "ResultFile is the output path of the discovered targets YAML file (optional).\nThis is mainly used in conjunction with the Prometheus receiver.",
                    "title": "result_file",
                    "type": "string"
                },
                "services": {
                    "description": "Services is a list of service name patterns for filtering tasks.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.ecsobserver.ServiceConfig"
                    },
                    "title": "services",
                    "type": "array"
                },
                "task_definitions": {
                    "description": "TaskDefinitions is a list of task definition arn patterns for filtering tasks.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.ecsobserver.TaskDefinitionConfig"
                    },
                    "title": "task_definitions",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.ecsobserver.DockerLabelConfig": {
            "additionalProperties": false,
            "description": "DockerLabelConfig matches all tasks based on their docker label.",
            "properties": {
                "job_name": {
                    "title": "job_name",
                    "type": "string"
                },
                "job_name_label": {
                    "title": "job_name_label",
                    "type": "string"
                },
                "metrics_path": {
                    "title": "metrics_path",
                    "type": "string"
                },
                "metrics_path_label": {
                    "title": "metrics_path_label",
                    "type": "string"
                },
                "metrics_ports": {
                    "items": {
                        "type": "integer"
                    },
                    "title": "metrics_ports",
                    "type": "array"
                },
                "port_label": {
                    "description": "PortLabel is mandatory, empty string means docker label based match is skipped.",
                    "title": "port_label",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.ecsobserver.ServiceConfig": {
            "additionalProperties": false,
            "properties": {
                "container_name_pattern": {
                    "description": "ContainerNamePattern is optional, empty string means all containers in that service would be exported.\nOtherwise both service and container name petterns need to metch.",
                    "title": "container_name_pattern",
                    "type": "string"
                },
                "job_name": {
                    "title": "job_name",
                    "type": "string"
                },
                "metrics_path": {
                    "title": "metrics_path",
                    "type": "string"
                },
                "metrics_ports": {
                    "items": {
                        "type": "integer"
                    },
                    "title": "metrics_ports",
                    "type": "array"
                },
                "name_pattern": {
                    "description": "NamePattern is mandatory.",
                    "title": "name_pattern",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.ecsobserver.TaskDefinitionConfig": {
            "additionalProperties": false,
            "properties": {
                "arn_pattern": {
                    "description": "ArnPattern is mandetory, empty string means arn based match is skipped.",
                    "title": "arn_pattern",
                    "type": "string"
                },
                "container_name_pattern": {
                    "description": "ContainerNamePattern is optional, empty string means all containers in that task definition would be exported.\nOtherwise both service and container name petterns need to metch.",
                    "title": "container_name_pattern",
                    "type": "string"
                },
                "job_name": {
                    "title": "job_name",
                    "type": "string"
                },
                "metrics_path": {
                    "title": "metrics_path",
                    "type": "string"
                },
                "metrics_ports": {
                    "items": {
                        "type": "integer"
                    },
                    "title": "metrics_ports",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.ecstaskobserver.Config": {
            "additionalProperties": false,
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "port_labels": {
                    "description": "PortLabels is a list of container Docker labels from which to obtain the observed Endpoint port.\nThe first label with valid port found will be used.  If no PortLabels provided, default of\nECS_TASK_OBSERVER_PORT will be used.",
                    "items": {
                        "type": "string"
                    },
                    "title": "port_labels",
                    "type": "array"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "refresh_interval": {
                    "description": "RefreshInterval determines the frequency at which the observer\nneeds to poll for collecting new information about task containers.",
                    "title": "refresh_interval",
                    "type": "integer"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.hostobserver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for host observer.",
            "properties": {
                "refresh_interval": {
                    "description": "RefreshInterval determines how frequency at which the observer\nneeds to poll for collecting information about new processes.",
                    "title": "refresh_interval",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.k8sobserver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for k8s attributes processor.",
            "properties": {
                "auth_type": {
                    "description": "How to authenticate to the K8s API server.  This can be one of `none`\n(for no auth), `serviceAccount` (to use the standard service account\ntoken provided to the agent pod), or `kubeConfig` to use credentials\nfrom `~/.kube/config`.",
                    "title": "auth_type",
                    "type": "string"
                },
                "node": {
                    "description": "Node is the node name to limit the discovery of pod, port, and node endpoints.\nProviding no value (the default) results in discovering endpoints for all available nodes.\nFor example, node name can be set using the downward API inside the collector\npod spec as follows:\n\nenv:\n  - name: K8S_NODE_NAME\n    valueFrom:\n      fieldRef:\n        fieldPath: spec.nodeName\n\nThen set this value to ${env:K8S_NODE_NAME} in the configuration.",
                    "title": "node",
                    "type": "string"
                },
                "observe_nodes": {
                    "description": "ObserveNodes determines whether to report observer k8s.node endpoints. If `true` and Node is specified\nit will only discover node endpoints whose `metadata.name` matches the provided node name. If `true` and\nNode isn't specified, it will discover all available node endpoints. `false` by default.",
                    "title": "observe_nodes",
                    "type": "boolean"
                },
                "observe_pods": {
                    "description": "ObservePods determines whether to report observer pod and port endpoints. If `true` and Node is specified\nit will only discover pod and port endpoints whose `spec.nodeName` matches the provided node name. If `true` and\nNode isn't specified, it will discover all available pod and port endpoints. `true` by default.",
                    "title": "observe_pods",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.oidcauthextension.Config": {
            "additionalProperties": false,
            "description": "Config has the configuration for the OIDC Authenticator extension.",
            "properties": {
                "attribute": {
                    "description": "The attribute (header name) to look for auth data. Optional, default value: \"authorization\".",
                    "title": "attribute",
                    "type": "string"
                },
                "audience": {
                    "description": "Audience of the token, used during the verification.\nFor example: \"https://accounts.google.com\" or \"https://login.salesforce.com\".\nRequired.",
                    "title": "audience",
                    "type": "string"
                },
                "groups_claim": {
                    "description": "The claim that holds the subject's group membership information.\nOptional.",
                    "title": "groups_claim",
                    "type": "string"
                },
                "issuer_ca_path": {
                    "description": "The local path for the issuer CA's TLS server cert.\nOptional.",
                    "title": "issuer_ca_path",
                    "type": "string"
                },
                "issuer_url": {
                    "description": "IssuerURL is the base URL for the OIDC provider.\nRequired.",
                    "title": "issuer_url",
                    "type": "string"
                },
                "username_claim": {
                    "description": "The claim to use as the username, in case the token's 'sub' isn't the suitable source.\nOptional.",
                    "title": "username_claim",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.extension.pprofextension.Config": {
            "additionalProperties": false,
            "description": "Config has the configuration for the extension enabling the golang net/http/pprof (Performance Profiler) extension.",
            "properties": {
                "block_profile_fraction": {
                    "description": "Fraction of blocking events that are profiled. A value \u003c= 0 disables\nprofiling. See https://golang.org/pkg/runtime/#SetBlockProfileRate for details.",
                    "title": "block_profile_fraction",
                    "type": "integer"
                },
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nThe address has the form \"host:port\". The host must be a literal IP address, or a host name that can be\nresolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "mutex_profile_fraction": {
                    "description": "Fraction of mutex contention events that are profiled. A value \u003c= 0\ndisables profiling. See https://golang.org/pkg/runtime/#SetMutexProfileFraction\nfor details.",
                    "title": "mutex_profile_fraction",
                    "type": "integer"
                },
                "save_to_file": {
                    "description": "Optional file name to save the CPU profile to. The profiling starts when the\nCollector starts and is saved to the file when the Collector is terminated.",
                    "title": "save_to_file",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.internal.aws.proxy.Config": {
            "additionalProperties": false,
            "description": "Config is the configuration for the local TCP proxy server.",
            "properties": {
                "aws_endpoint": {
                    "description": "AWSEndpoint is the X-Ray service endpoint which the local\nTCP server forwards requests to.",
                    "title": "aws_endpoint",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nThe address has the form \"host:port\". The host must be a literal IP address, or a host name that can be\nresolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "local_mode": {
                    "description": "LocalMode determines whether the EC2 instance metadata endpoint\nwill be called or not. Set to `true` to skip EC2 instance\nmetadata check.",
                    "title": "local_mode",
                    "type": "boolean"
                },
                "proxy_address": {
                    "description": "ProxyAddress defines the proxy address that the local TCP server\nforwards HTTP requests to AWS X-Ray backend through.",
                    "title": "proxy_address",
                    "type": "string"
                },
                "region": {
                    "description": "Region is the AWS region the local TCP server forwards requests to.",
                    "title": "region",
                    "type": "string"
                },
                "role_arn": {
                    "description": "RoleARN is the IAM role used by the local TCP server when\ncommunicating with the AWS X-Ray service.",
                    "title": "role_arn",
                    "type": "string"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration when forwarding\ncalls to the AWS X-Ray backend.",
                    "title": "tls"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.internal.coreinternal.attraction.ActionKeyValue": {
            "additionalProperties": false,
            "description": "ActionKeyValue specifies the attribute key to act upon.",
            "properties": {
                "action": {
                    "description": "Action specifies the type of action to perform.\nThe set of values are {INSERT, UPDATE, UPSERT, DELETE, HASH}.\nBoth lower case and upper case are supported.\nINSERT -  Inserts the key/value to attributes when the key does not exist.\n          No action is applied to attributes where the key already exists.\n          Either Value, FromAttribute or FromContext must be set.\nUPDATE -  Updates an existing key with a value. No action is applied\n          to attributes where the key does not exist.\n          Either Value, FromAttribute or FromContext must be set.\nUPSERT -  Performs insert or update action depending on the attributes\n          containing the key. The key/value is inserted to attributes\n          that did not originally have the key. The key/value is updated\n          for attributes where the key already existed.\n          Either Value, FromAttribute or FromContext must be set.\nDELETE  - Deletes the attribute. If the key doesn't exist,\n          no action is performed.\nHASH    - Calculates the SHA-1 hash of an existing value and overwrites the\n          value with its SHA-1 hash result. If the feature gate\n          `coreinternal.attraction.hash.sha256` is enabled, it uses SHA2-256\n          instead.\nEXTRACT - Extracts values using a regular expression rule from the input\n          'key' to target keys specified in the 'rule'. If a target key\n          already exists, it will be overridden.\nCONVERT  - converts the type of an existing attribute, if convertable\nThis is a required field.",
                    "title": "action",
                    "type": "string"
                },
                "converted_type": {
                    "description": "ConvertedType specifies the target type of an attribute to be converted\nIf the key doesn't exist, no action is performed.\nIf the value cannot be converted, the original value will be left as-is",
                    "title": "converted_type",
                    "type": "string"
                },
                "from_attribute": {
                    "description": "FromAttribute specifies the attribute to use to populate\nthe value. If the attribute doesn't exist, no action is performed.",
                    "title": "from_attribute",
                    "type": "string"
                },
                "from_context": {
                    "description": "FromContext specifies the context value to use to populate\nthe value. The values would be searched in client.Info.Metadata.\nIf the key doesn't exist, no action is performed.\nIf the key has multiple values the values will be joined with `;` separator.",
                    "title": "from_context",
                    "type": "string"
                },
                "key": {
                    "description": "Key specifies the attribute to act upon.\nThis is a required field.",
                    "title": "key",
                    "type": "string"
                },
                "pattern": {
                    "description": "A regex pattern  must be specified for the action EXTRACT.\nIt uses the attribute specified by `key' to extract values from\nThe target keys are inferred based on the names of the matcher groups\nprovided and the names will be inferred based on the values of the\nmatcher group.\nNote: All subexpressions must have a name.\nNote: The value type of the source key must be a string. If it isn't,\nno extraction will occur.",
                    "title": "pattern",
                    "type": "string"
                },
                "value": {
                    "description": "Value specifies the value to populate for the key.\nThe type of the value is inferred from the configuration.",
                    "title": "value"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.internal.coreinternal.consumerretry.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for retrying batches in case of receiving a retryable error from a downstream consumer.",
            "properties": {
                "enabled": {
                    "description": "Enabled indicates whether to not retry sending logs in case of receiving a retryable error from a downstream\nconsumer. Default is false.",
                    "title": "enabled",
                    "type": "boolean"
                },
                "initial_interval": {
                    "description": "InitialInterval the time to wait after the first failure before retrying. Default value is 1 second.",
                    "title": "initial_interval",
                    "type": "integer"
                },
                "max_elapsed_time": {
                    "description": "MaxElapsedTime is the maximum amount of time (including retries) spent trying to send a logs batch to\na downstream consumer. Once this value is reached, the data is discarded. It never stops if MaxElapsedTime == 0.\nDefault value is 5 minutes.",
                    "title": "max_elapsed_time",
                    "type": "integer"
                },
                "max_interval": {
                    "description": "MaxInterval is the upper bound on backoff interval. Once this value is reached the delay between\nconsecutive retries will always be `MaxInterval`. Default value is 30 seconds.",
                    "title": "max_interval",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.Attribute": {
            "additionalProperties": false,
            "description": "Attribute specifies the attribute key and optional value to match against.",
            "properties": {
                "key": {
                    "description": "Key specifies the attribute key.",
                    "title": "key",
                    "type": "string"
                },
                "value": {
                    "description": "Values specifies the value to match against.\nIf it is not set, any value will match.",
                    "title": "value"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.InstrumentationLibrary": {
            "additionalProperties": false,
            "description": "InstrumentationLibrary specifies the instrumentation library and optional version to match against.",
            "properties": {
                "name": {
                    "title": "name",
                    "type": "string"
                },
                "version": {
                    "description": "version match\n expected actual  match\n nil      \u003cblank\u003e yes\n nil      1       yes\n \u003cblank\u003e  \u003cblank\u003e yes\n \u003cblank\u003e  1       no\n 1        \u003cblank\u003e no\n 1        1       yes",
                    "title": "version",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.LogSeverityNumberMatchProperties": {
            "additionalProperties": false,
            "description": "LogSeverityNumberMatchProperties defines how to match based on a log record's SeverityNumber field.",
            "properties": {
                "match_undefined": {
                    "description": "MatchUndefined controls whether logs with \"undefined\" severity matches.\nIf this is true, entries with undefined severity will match.",
                    "title": "match_undefined",
                    "type": "boolean"
                },
                "min": {
                    "description": "Min is the lowest severity that may be matched.\ne.g. if this is plog.SeverityNumberInfo, INFO, WARN, ERROR, and FATAL logs will match.",
                    "title": "min",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.MatchConfig": {
            "additionalProperties": false,
            "description": "MatchConfig has two optional MatchProperties one to define what is processed by the processor, captured under the 'include' and the second, exclude, to define what is excluded from the processor.",
            "properties": {
                "exclude": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.MatchProperties",
                    "description": "Exclude specifies when this processor will not be applied to the input data\nwhich match the specified properties.\nNote: The `exclude` properties are checked after the `include` properties,\nif they exist, are checked.\nIf `include` isn't specified, the `exclude` properties are checked against\nall input data.\nThis is an optional field. If neither `include` and `exclude` are set, all input data\nis processed. If `exclude` is set and `include` isn't set, then all the\ninput data that does not match the properties in this structure are processed.",
                    "title": "exclude"
                },
                "include": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.MatchProperties",
                    "description": "Include specifies the set of input data properties that must be present in order\nfor this processor to apply to it.\nNote: If `exclude` is specified, the input data is compared against those\nproperties after the `include` properties.\nThis is an optional field. If neither `include` and `exclude` are set, all input data\nare processed. If `include` is set and `exclude` isn't set, then all\ninput data matching the properties in this structure are processed.",
                    "title": "include"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.MatchProperties": {
            "additionalProperties": false,
            "description": "MatchProperties specifies the set of properties in a spans/log/metric to match against and if the input data should be included or excluded from the processor.",
            "properties": {
                "attributes": {
                    "description": "Attributes specifies the list of attributes to match against.\nAll of these attributes must match exactly for a match to occur.\nOnly match_type=strict is allowed if \"attributes\" are specified.\nThis is an optional field.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.Attribute"
                    },
                    "title": "attributes",
                    "type": "array"
                },
                "libraries": {
                    "description": "Libraries specify the list of items to match the implementation library against.\nA match occurs if the span's implementation library matches at least one item in this list.\nThis is an optional field.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.InstrumentationLibrary"
                    },
                    "title": "libraries",
                    "type": "array"
                },
                "log_bodies": {
                    "description": "LogBodies is a list of strings that the LogRecord's body field must match\nagainst.",
                    "items": {
                        "type": "string"
                    },
                    "title": "log_bodies",
                    "type": "array"
                },
                "log_severity_number": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.LogSeverityNumberMatchProperties",
                    "description": "LogSeverityNumber defines how to match against a log record's SeverityNumber, if defined.",
                    "title": "log_severity_number"
                },
                "log_severity_texts": {
                    "description": "LogSeverityTexts is a list of strings that the LogRecord's severity text field must match\nagainst.",
                    "items": {
                        "type": "string"
                    },
                    "title": "log_severity_texts",
                    "type": "array"
                },
                "match_type": {
                    "title": "match_type",
                    "type": "string"
                },
                "metric_names": {
                    "description": "MetricNames is a list of strings to match metric name against.\nA match occurs if metric name matches at least one item in the list.\nThis field is optional.",
                    "items": {
                        "type": "string"
                    },
                    "title": "metric_names",
                    "type": "array"
                },
                "regexp": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterset.regexp.Config",
                    "title": "regexp"
                },
                "resources": {
                    "description": "Resources specify the list of items to match the resources against.\nA match occurs if the data's resources match at least one item in this list.\nThis is an optional field.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.Attribute"
                    },
                    "title": "resources",
                    "type": "array"
                },
                "services": {
                    "description": "Services specify the list of items to match service name against.\nA match occurs if the span's service name matches at least one item in this list.\nThis is an optional field.",
                    "items": {
                        "type": "string"
                    },
                    "title": "services",
                    "type": "array"
                },
                "span_kinds": {
                    "description": "SpanKinds specify the list of items to match the span kind against.\nA match occurs if the span's span kind matches at least one item in this list.\nThis is an optional field",
                    "items": {
                        "type": "string"
                    },
                    "title": "span_kinds",
                    "type": "array"
                },
                "span_names": {
                    "description": "SpanNames specify the list of items to match span name against.\nA match occurs if the span name matches at least one item in this list.\nThis is an optional field.",
                    "items": {
                        "type": "string"
                    },
                    "title": "span_names",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.MetricMatchProperties": {
            "additionalProperties": false,
            "description": "MetricMatchProperties specifies the set of properties in a metric to match against and the type of string pattern matching to use.",
            "properties": {
                "expressions": {
                    "description": "Expressions specifies the list of expr expressions to match metrics against.\nA match occurs if any datapoint in a metric matches at least one expression in this list.",
                    "items": {
                        "type": "string"
                    },
                    "title": "expressions",
                    "type": "array"
                },
                "match_type": {
                    "description": "MatchType specifies the type of matching desired",
                    "title": "match_type",
                    "type": "string"
                },
                "metric_names": {
                    "description": "MetricNames specifies the list of string patterns to match metric names against.\nA match occurs if the metric name matches at least one string pattern in this list.",
                    "items": {
                        "type": "string"
                    },
                    "title": "metric_names",
                    "type": "array"
                },
                "regexp": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterset.regexp.Config",
                    "description": "RegexpConfig specifies options for the MetricRegexp match type",
                    "title": "regexp"
                },
                "resource_attributes": {
                    "description": "ResourceAttributes defines a list of possible resource attributes to match metrics against.\nA match occurs if any resource attribute matches all expressions in this given list.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.Attribute"
                    },
                    "title": "resource_attributes",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterset.regexp.Config": {
            "additionalProperties": false,
            "description": "Config represents the options for a NewFilterSet.",
            "properties": {
                "cacheenabled": {
                    "description": "CacheEnabled determines whether match results are LRU cached to make subsequent matches faster.\nCache size is unlimited unless CacheMaxNumEntries is also specified.",
                    "title": "cacheenabled",
                    "type": "boolean"
                },
                "cachemaxnumentries": {
                    "description": "CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results.\nCacheMaxNumEntries is ignored if CacheEnabled is false.",
                    "title": "cachemaxnumentries",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.internal.k8sconfig.APIConfig": {
            "additionalProperties": false,
            "description": "APIConfig contains options relevant to connecting to the K8s API",
            "properties": {
                "auth_type": {
                    "description": "How to authenticate to the K8s API server.  This can be one of `none`\n(for no auth), `serviceAccount` (to use the standard service account\ntoken provided to the agent pod), or `kubeConfig` to use credentials\nfrom `~/.kube/config`.",
                    "title": "auth_type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.pkg.resourcetotelemetry.Settings": {
            "additionalProperties": false,
            "description": "Settings defines configuration for converting resource attributes to telemetry attributes.",
            "properties": {
                "enabled": {
                    "description": "Enabled indicates whether to convert resource attributes to telemetry attributes. Default is `false`.",
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.fileconsumer.HeaderConfig": {
            "additionalProperties": false,
            "properties": {
                "metadata_operators": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.Config"
                    },
                    "title": "metadata_operators",
                    "type": "array"
                },
                "pattern": {
                    "title": "pattern",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.fileconsumer.OrderingCriteria": {
            "additionalProperties": false,
            "properties": {
                "regex": {
                    "title": "regex",
                    "type": "string"
                },
                "sort_by": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.fileconsumer.SortRuleImpl"
                    },
                    "title": "sort_by",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.fileconsumer.SortRuleImpl": {
            "additionalProperties": false,
            "properties": {},
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.Config": {
            "additionalProperties": false,
            "description": "Config is the configuration of an operator",
            "properties": {
                "Builder": {
                    "title": "Builder"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.helper.MultilineConfig": {
            "additionalProperties": false,
            "description": "MultilineConfig is the configuration of a multiline helper",
            "properties": {
                "line_end_pattern": {
                    "title": "line_end_pattern",
                    "type": "string"
                },
                "line_start_pattern": {
                    "title": "line_start_pattern",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.input.tcp.BaseConfig": {
            "additionalProperties": false,
            "description": "BaseConfig is the detailed configuration of a tcp input operator.",
            "properties": {
                "MultiLineBuilder": {
                    "title": "MultiLineBuilder"
                },
                "add_attributes": {
                    "title": "add_attributes",
                    "type": "boolean"
                },
                "encoding": {
                    "title": "encoding",
                    "type": "string"
                },
                "listen_address": {
                    "title": "listen_address",
                    "type": "string"
                },
                "max_log_size": {
                    "title": "max_log_size",
                    "type": "integer"
                },
                "multiline": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.helper.MultilineConfig",
                    "title": "multiline"
                },
                "preserve_leading_whitespaces": {
                    "title": "preserve_leading_whitespaces",
                    "type": "boolean"
                },
                "preserve_trailing_whitespaces": {
                    "title": "preserve_trailing_whitespaces",
                    "type": "boolean"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSServerSetting",
                    "title": "tls"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.input.udp.BaseConfig": {
            "additionalProperties": false,
            "description": "BaseConfig is the details configuration of a udp input operator.",
            "properties": {
                "add_attributes": {
                    "title": "add_attributes",
                    "type": "boolean"
                },
                "encoding": {
                    "title": "encoding",
                    "type": "string"
                },
                "listen_address": {
                    "title": "listen_address",
                    "type": "string"
                },
                "multiline": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.helper.MultilineConfig",
                    "title": "multiline"
                },
                "preserve_leading_whitespaces": {
                    "title": "preserve_leading_whitespaces",
                    "type": "boolean"
                },
                "preserve_trailing_whitespaces": {
                    "title": "preserve_trailing_whitespaces",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.attributesprocessor.Config": {
            "additionalProperties": false,
            "description": "Config specifies the set of attributes to be inserted, updated, upserted and deleted and the properties to include/exclude a span from being processed.",
            "properties": {
                "actions": {
                    "description": "Actions specifies the list of attributes to act on.\nThe set of actions are {INSERT, UPDATE, UPSERT, DELETE, HASH, EXTRACT, CONVERT}.\nThis is a required field.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.coreinternal.attraction.ActionKeyValue"
                    },
                    "title": "actions",
                    "type": "array"
                },
                "exclude": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.MatchProperties",
                    "description": "Exclude specifies when this processor will not be applied to the input data\nwhich match the specified properties.\nNote: The `exclude` properties are checked after the `include` properties,\nif they exist, are checked.\nIf `include` isn't specified, the `exclude` properties are checked against\nall input data.\nThis is an optional field. If neither `include` and `exclude` are set, all input data\nis processed. If `exclude` is set and `include` isn't set, then all the\ninput data that does not match the properties in this structure are processed.",
                    "title": "exclude"
                },
                "include": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.MatchProperties",
                    "description": "Include specifies the set of input data properties that must be present in order\nfor this processor to apply to it.\nNote: If `exclude` is specified, the input data is compared against those\nproperties after the `include` properties.\nThis is an optional field. If neither `include` and `exclude` are set, all input data\nare processed. If `include` is set and `exclude` isn't set, then all\ninput data matching the properties in this structure are processed.",
                    "title": "include"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.cumulativetodeltaprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines the configuration for the processor.",
            "properties": {
                "exclude": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.cumulativetodeltaprocessor.MatchMetrics",
                    "title": "exclude"
                },
                "include": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.cumulativetodeltaprocessor.MatchMetrics",
                    "description": "Include specifies a filter on the metrics that should be converted.\nExclude specifies a filter on the metrics that should not be converted.\nIf neither `include` nor `exclude` are set, all metrics will be converted.\nCannot be used with deprecated Metrics config option.",
                    "title": "include"
                },
                "initial_value": {
                    "description": "InitialValue determines how to handle the first datapoint for a given metric. Valid values:\n\n  - auto: (default) send the first point iff the startime is set AND the starttime happens after the component started AND the starttime is different from the timestamp\n  - keep: always send the first point\n  - drop: don't send the first point, but store it for subsequent delta calculations",
                    "title": "initial_value",
                    "type": "integer"
                },
                "max_staleness": {
                    "description": "MaxStaleness is the total time a state entry will live past the time it was last seen. Set to 0 to retain state indefinitely.",
                    "title": "max_staleness",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.cumulativetodeltaprocessor.MatchMetrics": {
            "additionalProperties": false,
            "properties": {
                "match_type": {
                    "title": "match_type",
                    "type": "string"
                },
                "metrics": {
                    "items": {
                        "type": "string"
                    },
                    "title": "metrics",
                    "type": "array"
                },
                "regexp": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterset.regexp.Config",
                    "title": "regexp"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.deltatorateprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines the configuration for the processor.",
            "properties": {
                "metrics": {
                    "description": "List of delta sum metrics to convert to rates",
                    "items": {
                        "type": "string"
                    },
                    "title": "metrics",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Resource processor.",
            "properties": {
                "error_mode": {
                    "description": "ErrorMode determines how the processor reacts to errors that occur while processing an OTTL condition.\nValid values are `ignore` and `propagate`.\n`ignore` means the processor ignores errors returned by conditions and continues on to the next condition. This is the recommended mode.\n`propagate` means the processor returns the error up the pipeline.  This will result in the payload being dropped from the collector.\nThe default value is `propagate`.",
                    "title": "error_mode",
                    "type": "string"
                },
                "logs": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.LogFilters",
                    "title": "logs"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.MetricFilters",
                    "title": "metrics"
                },
                "spans": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.MatchConfig",
                    "title": "spans"
                },
                "traces": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.TraceFilters",
                    "title": "traces"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.LogFilters": {
            "additionalProperties": false,
            "description": "LogFilters filters by Log properties.",
            "properties": {
                "exclude": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.LogMatchProperties",
                    "description": "Exclude match properties describe logs that should be excluded from the Collector Service pipeline,\nall other logs should be included.\nIf both Include and Exclude are specified, Include filtering occurs first.",
                    "title": "exclude"
                },
                "include": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.LogMatchProperties",
                    "description": "Include match properties describe logs that should be included in the Collector Service pipeline,\nall other logs should be dropped from further processing.\nIf both Include and Exclude are specified, Include filtering occurs first.",
                    "title": "include"
                },
                "log_record": {
                    "description": "LogConditions is a list of OTTL conditions for an ottllog context.\nIf any condition resolves to true, the log event will be dropped.\nSupports `and`, `or`, and `()`",
                    "items": {
                        "type": "string"
                    },
                    "title": "log_record",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.LogMatchProperties": {
            "additionalProperties": false,
            "description": "LogMatchProperties specifies the set of properties in a log to match against and the type of string pattern matching to use.",
            "properties": {
                "bodies": {
                    "description": "LogBodies is a list of strings that the LogRecord's body field must match\nagainst.",
                    "items": {
                        "type": "string"
                    },
                    "title": "bodies",
                    "type": "array"
                },
                "match_type": {
                    "description": "LogMatchType specifies the type of matching desired",
                    "title": "match_type",
                    "type": "string"
                },
                "record_attributes": {
                    "description": "RecordAttributes defines a list of possible record attributes to match logs against.\nA match occurs if any record attribute matches at least one expression in this given list.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.Attribute"
                    },
                    "title": "record_attributes",
                    "type": "array"
                },
                "resource_attributes": {
                    "description": "ResourceAttributes defines a list of possible resource attributes to match logs against.\nA match occurs if any resource attribute matches all expressions in this given list.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.Attribute"
                    },
                    "title": "resource_attributes",
                    "type": "array"
                },
                "severity_number": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.LogSeverityNumberMatchProperties",
                    "description": "SeverityNumberProperties defines how to match against a log record's SeverityNumber, if defined.",
                    "title": "severity_number"
                },
                "severity_texts": {
                    "description": "SeverityTexts is a list of strings that the LogRecord's severity text field must match\nagainst.",
                    "items": {
                        "type": "string"
                    },
                    "title": "severity_texts",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.LogSeverityNumberMatchProperties": {
            "additionalProperties": false,
            "properties": {
                "match_undefined": {
                    "description": "MatchUndefined lets logs records with \"unknown\" severity match.\nIf MinSeverity is not set, this field is ignored, as fields are not matched based on severity.",
                    "title": "match_undefined",
                    "type": "boolean"
                },
                "min": {
                    "description": "Min is the minimum severity needed for the log record to match.\nThis corresponds to the short names specified here:\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/logs/data-model.md#displaying-severity\nthis field is case-insensitive (\"INFO\" == \"info\")",
                    "title": "min",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.MetricFilters": {
            "additionalProperties": false,
            "description": "MetricFilters filters by Metric properties.",
            "properties": {
                "datapoint": {
                    "description": "DataPointConditions is a list of OTTL conditions for an ottldatapoint context.\nIf any condition resolves to true, the datapoint will be dropped.\nSupports `and`, `or`, and `()`",
                    "items": {
                        "type": "string"
                    },
                    "title": "datapoint",
                    "type": "array"
                },
                "exclude": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.MetricMatchProperties",
                    "description": "Exclude match properties describe metrics that should be excluded from the Collector Service pipeline,\nall other metrics should be included.\nIf both Include and Exclude are specified, Include filtering occurs first.",
                    "title": "exclude"
                },
                "include": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.MetricMatchProperties",
                    "description": "Include match properties describe metrics that should be included in the Collector Service pipeline,\nall other metrics should be dropped from further processing.\nIf both Include and Exclude are specified, Include filtering occurs first.",
                    "title": "include"
                },
                "metric": {
                    "description": "MetricConditions is a list of OTTL conditions for an ottlmetric context.\nIf any condition resolves to true, the metric will be dropped.\nSupports `and`, `or`, and `()`",
                    "items": {
                        "type": "string"
                    },
                    "title": "metric",
                    "type": "array"
                },
                "regexp": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterset.regexp.Config",
                    "description": "RegexpConfig specifies options for the Regexp match type",
                    "title": "regexp"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.TraceFilters": {
            "additionalProperties": false,
            "description": "TraceFilters filters by OTTL conditions",
            "properties": {
                "span": {
                    "description": "SpanConditions is a list of OTTL conditions for an ottlspan context.\nIf any condition resolves to true, the span will be dropped.\nSupports `and`, `or`, and `()`",
                    "items": {
                        "type": "string"
                    },
                    "title": "span",
                    "type": "array"
                },
                "spanevent": {
                    "description": "SpanEventConditions is a list of OTTL conditions for an ottlspanevent context.\nIf any condition resolves to true, the span event will be dropped.\nSupports `and`, `or`, and `()`",
                    "items": {
                        "type": "string"
                    },
                    "title": "spanevent",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.groupbyattrsprocessor.Config": {
            "additionalProperties": false,
            "description": "Config is the configuration for the processor.",
            "properties": {
                "keys": {
                    "description": "GroupByKeys describes the attribute names that are going to be used for grouping.\nEmpty value is allowed, since processor in such case can compact data",
                    "items": {
                        "type": "string"
                    },
                    "title": "keys",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.groupbytraceprocessor.Config": {
            "additionalProperties": false,
            "description": "Config is the configuration for the processor.",
            "properties": {
                "discard_orphans": {
                    "description": "DiscardOrphans instructs the processor to discard traces without the root span.\nThis typically indicates that the trace is incomplete.\nDefault: false.\nNot yet implemented, and an error will be returned when this option is used.",
                    "title": "discard_orphans",
                    "type": "boolean"
                },
                "num_traces": {
                    "description": "NumTraces is the max number of traces to keep in memory waiting for the duration.\nDefault: 1_000_000.",
                    "title": "num_traces",
                    "type": "integer"
                },
                "num_workers": {
                    "description": "NumWorkers is a number of workers processing event queue.\nDefault: 1.",
                    "title": "num_workers",
                    "type": "integer"
                },
                "store_on_disk": {
                    "description": "StoreOnDisk tells the processor to keep only the trace ID in memory, serializing the trace spans to disk.\nUseful when the duration to wait for traces to complete is high.\nDefault: false.\nNot yet implemented, and an error will be returned when this option is used.",
                    "title": "store_on_disk",
                    "type": "boolean"
                },
                "wait_duration": {
                    "description": "WaitDuration tells the processor to wait for the specified duration for the trace to be complete.\nDefault: 1s.",
                    "title": "wait_duration",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for k8s attributes processor.",
            "properties": {
                "auth_type": {
                    "description": "How to authenticate to the K8s API server.  This can be one of `none`\n(for no auth), `serviceAccount` (to use the standard service account\ntoken provided to the agent pod), or `kubeConfig` to use credentials\nfrom `~/.kube/config`.",
                    "title": "auth_type",
                    "type": "string"
                },
                "exclude": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.ExcludeConfig",
                    "description": "Exclude section allows to define names of pod that should be\nignored while tagging.",
                    "title": "exclude"
                },
                "extract": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.ExtractConfig",
                    "description": "Extract section allows specifying extraction rules to extract\ndata from k8s pod specs",
                    "title": "extract"
                },
                "filter": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.FilterConfig",
                    "description": "Filter section allows specifying filters to filter\npods by labels, fields, namespaces, nodes, etc.",
                    "title": "filter"
                },
                "passthrough": {
                    "description": "Passthrough mode only annotates resources with the pod IP and\ndoes not try to extract any other metadata. It does not need\naccess to the K8S cluster API. Agent/Collector must receive spans\ndirectly from services to be able to correctly detect the pod IPs.",
                    "title": "passthrough",
                    "type": "boolean"
                },
                "pod_association": {
                    "description": "Association section allows to define rules for tagging spans, metrics,\nand logs with Pod metadata.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.PodAssociationConfig"
                    },
                    "title": "pod_association",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.ExcludeConfig": {
            "additionalProperties": false,
            "description": "ExcludeConfig represent a list of Pods to exclude",
            "properties": {
                "pods": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.ExcludePodConfig"
                    },
                    "title": "pods",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.ExcludePodConfig": {
            "additionalProperties": false,
            "description": "ExcludePodConfig represent a Pod name to ignore",
            "properties": {
                "name": {
                    "title": "name",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.ExtractConfig": {
            "additionalProperties": false,
            "description": "ExtractConfig section allows specifying extraction rules to extract data from k8s pod specs.",
            "properties": {
                "annotations": {
                    "description": "Annotations allows extracting data from pod annotations and record it\nas resource attributes.\nIt is a list of FieldExtractConfig type. See FieldExtractConfig\ndocumentation for more details.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.FieldExtractConfig"
                    },
                    "title": "annotations",
                    "type": "array"
                },
                "labels": {
                    "description": "Labels allows extracting data from pod labels and record it\nas resource attributes.\nIt is a list of FieldExtractConfig type. See FieldExtractConfig\ndocumentation for more details.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.FieldExtractConfig"
                    },
                    "title": "labels",
                    "type": "array"
                },
                "metadata": {
                    "description": "Metadata allows to extract pod/namespace metadata from a list of metadata fields.\nThe field accepts a list of strings.\n\nMetadata fields supported right now are,\n  k8s.pod.name, k8s.pod.uid, k8s.deployment.name,\n  k8s.node.name, k8s.namespace.name, k8s.pod.start_time,\n  k8s.replicaset.name, k8s.replicaset.uid,\n  k8s.daemonset.name, k8s.daemonset.uid,\n  k8s.job.name, k8s.job.uid, k8s.cronjob.name,\n  k8s.statefulset.name, k8s.statefulset.uid,\n  k8s.container.name, container.image.name,\n  container.image.tag, container.id\n\nSpecifying anything other than these values will result in an error.\nBy default, the following fields are extracted and added to spans, metrics and logs as attributes:\n - k8s.pod.name\n - k8s.pod.uid\n - k8s.pod.start_time\n - k8s.namespace.name\n - k8s.node.name\n - k8s.deployment.name (if the pod is controlled by a deployment)\n - k8s.container.name (requires an additional attribute to be set: container.id)\n - container.image.name (requires one of the following additional attributes to be set: container.id or k8s.container.name)\n - container.image.tag (requires one of the following additional attributes to be set: container.id or k8s.container.name)",
                    "items": {
                        "type": "string"
                    },
                    "title": "metadata",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.FieldExtractConfig": {
            "additionalProperties": false,
            "description": "FieldExtractConfig allows specifying an extraction rule to extract a resource attribute from pod (or namespace) annotations (or labels).",
            "properties": {
                "from": {
                    "description": "From represents the source of the labels/annotations.\nAllowed values are \"pod\" and \"namespace\". The default is pod.",
                    "title": "from",
                    "type": "string"
                },
                "key": {
                    "description": "Key represents the annotation (or label) name. This must exactly match an annotation (or label) name.",
                    "title": "key",
                    "type": "string"
                },
                "key_regex": {
                    "description": "KeyRegex is a regular expression used to extract a Key that matches the regex.\nOut of Key or KeyRegex, only one option is expected to be configured at a time.",
                    "title": "key_regex",
                    "type": "string"
                },
                "regex": {
                    "description": "Regex is an optional field used to extract a sub-string from a complex field value.\nThe supplied regular expression must contain one named parameter with the string \"value\"\nas the name. For example, if your pod spec contains the following annotation,\n\nkubernetes.io/change-cause: 2019-08-28T18:34:33Z APP_NAME=my-app GIT_SHA=58a1e39 CI_BUILD=4120\n\nand you'd like to extract the GIT_SHA and the CI_BUILD values as tags, then you must\nspecify the following two extraction rules:\n\nextract:\n  annotations:\n    - tag_name: git.sha\n      key: kubernetes.io/change-cause\n      regex: GIT_SHA=(?P\u003cvalue\u003e\\w+)\n    - tag_name: ci.build\n      key: kubernetes.io/change-cause\n      regex: JENKINS=(?P\u003cvalue\u003e[\\w]+)\n\nthis will add the `git.sha` and `ci.build` resource attributes.",
                    "title": "regex",
                    "type": "string"
                },
                "tag_name": {
                    "description": "TagName represents the name of the resource attribute that will be added to logs, metrics or spans.\nWhen not specified, a default tag name will be used of the format:\n  - k8s.pod.annotations.\u003cannotation key\u003e\n  - k8s.pod.labels.\u003clabel key\u003e\nFor example, if tag_name is not specified and the key is git_sha,\nthen the attribute name will be `k8s.pod.annotations.git_sha`.\nWhen key_regex is present, tag_name supports back reference to both named capturing and positioned capturing.\nFor example, if your pod spec contains the following labels,\n\napp.kubernetes.io/component: mysql\napp.kubernetes.io/version: 5.7.21\n\nand you'd like to add tags for all labels with prefix app.kubernetes.io/ and also trim the prefix,\nthen you can specify the following extraction rules:\n\nextract:\n  labels:\n    - tag_name: $$1\n      key_regex: kubernetes.io/(.*)\n\nthis will add the `component` and `version` tags to the spans or metrics.",
                    "title": "tag_name",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.FieldFilterConfig": {
            "additionalProperties": false,
            "description": "FieldFilterConfig allows specifying exactly one filter by a field.",
            "properties": {
                "key": {
                    "description": "Key represents the key or name of the field or labels that a filter\ncan apply on.",
                    "title": "key",
                    "type": "string"
                },
                "op": {
                    "description": "Op represents the filter operation to apply on the given\nKey: Value pair. The following operations are supported\n  equals, not-equals, exists, does-not-exist.",
                    "title": "op",
                    "type": "string"
                },
                "value": {
                    "description": "Value represents the value associated with the key that a filter\noperation specified by the `Op` field applies on.",
                    "title": "value",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.FilterConfig": {
            "additionalProperties": false,
            "description": "FilterConfig section allows specifying filters to filter pods by labels, fields, namespaces, nodes, etc.",
            "properties": {
                "fields": {
                    "description": "Fields allows to filter pods by generic k8s fields.\nOnly the following operations are supported:\n   - equals\n   - not-equals\n\nCheck FieldFilterConfig for more details.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.FieldFilterConfig"
                    },
                    "title": "fields",
                    "type": "array"
                },
                "labels": {
                    "description": "Labels allows to filter pods by generic k8s pod labels.\nOnly the following operations are supported:\n   - equals\n   - not-equals\n   - exists\n   - not-exists\n\nCheck FieldFilterConfig for more details.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.FieldFilterConfig"
                    },
                    "title": "labels",
                    "type": "array"
                },
                "namespace": {
                    "description": "Namespace filters all pods by the provided namespace. All other pods are ignored.",
                    "title": "namespace",
                    "type": "string"
                },
                "node": {
                    "description": "Node represents a k8s node or host. If specified, any pods not running\non the specified node will be ignored by the tagger.",
                    "title": "node",
                    "type": "string"
                },
                "node_from_env_var": {
                    "description": "NodeFromEnv can be used to extract the node name from an environment\nvariable. The value must be the name of the environment variable.\nThis is useful when the node a Otel agent will run on cannot be\npredicted. In such cases, the Kubernetes downward API can be used to\nadd the node name to each pod as an environment variable. K8s tagger\ncan then read this value and filter pods by it.\n\nFor example, node name can be passed to each agent with the downward API as follows\n\nenv:\n  - name: K8S_NODE_NAME\n    valueFrom:\n      fieldRef:\n        fieldPath: spec.nodeName\n\nThen the NodeFromEnv field can be set to `K8S_NODE_NAME` to filter all pods by the node that\nthe agent is running on.\n\nMore on downward API here: https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/",
                    "title": "node_from_env_var",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.PodAssociationConfig": {
            "additionalProperties": false,
            "description": "PodAssociationConfig contain single rule how to associate Pod metadata with logs, spans and metrics",
            "properties": {
                "sources": {
                    "description": "List of pod association sources which should be taken\nto identify pod",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.PodAssociationSourceConfig"
                    },
                    "title": "sources",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.PodAssociationSourceConfig": {
            "additionalProperties": false,
            "properties": {
                "from": {
                    "description": "From represents the source of the association.\nAllowed values are \"connection\" and \"resource_attribute\".",
                    "title": "from",
                    "type": "string"
                },
                "name": {
                    "description": "Name represents extracted key name.\ne.g. ip, pod_uid, k8s.pod.ip",
                    "title": "name",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.logstransformprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Resource processor.",
            "properties": {
                "operators": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.Config"
                    },
                    "title": "operators",
                    "type": "array"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.coreinternal.consumerretry.Config",
                    "title": "retry_on_failure"
                },
                "storage": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID",
                    "title": "storage"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.metricsgenerationprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines the configuration for the processor.",
            "properties": {
                "rules": {
                    "description": "Set of rules for generating new metrics",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.metricsgenerationprocessor.Rule"
                    },
                    "title": "rules",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.metricsgenerationprocessor.Rule": {
            "additionalProperties": false,
            "properties": {
                "metric1": {
                    "description": "First operand metric to use in the calculation. This is a required field.",
                    "title": "metric1",
                    "type": "string"
                },
                "metric2": {
                    "description": "Second operand metric to use in the calculation. A required field if the type is calculate.",
                    "title": "metric2",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the new metric being generated. This is a required field.",
                    "title": "name",
                    "type": "string"
                },
                "operation": {
                    "description": "The arithmetic operation to apply for the calculation. This is a required field.",
                    "title": "operation",
                    "type": "string"
                },
                "scale_by": {
                    "description": "A constant number by which the first operand will be scaled. A required field if the type is scale.",
                    "title": "scale_by",
                    "type": "number"
                },
                "type": {
                    "description": "The rule type following which the new metric will be generated. This is a required field.",
                    "title": "type",
                    "type": "string"
                },
                "unit": {
                    "description": "Unit for the new metric being generated.",
                    "title": "unit",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.metricstransformprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Resource processor.",
            "properties": {
                "transforms": {
                    "description": "Transform specifies a list of transforms on metrics with each transform focusing on one metric.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.metricstransformprocessor.Transform"
                    },
                    "title": "transforms",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.metricstransformprocessor.Operation": {
            "additionalProperties": false,
            "description": "Operation defines the specific operation performed on the selected metrics.",
            "properties": {
                "action": {
                    "description": "Action specifies the action performed for this operation.\nREQUIRED",
                    "title": "action",
                    "type": "string"
                },
                "aggregated_values": {
                    "description": "AggregatedValues is a list of label values to aggregate away.",
                    "items": {
                        "type": "string"
                    },
                    "title": "aggregated_values",
                    "type": "array"
                },
                "aggregation_type": {
                    "description": "AggregationType specifies how to aggregate.",
                    "title": "aggregation_type",
                    "type": "string"
                },
                "experimental_scale": {
                    "description": "Scale is a scalar to multiply the values with.",
                    "title": "experimental_scale",
                    "type": "number"
                },
                "label": {
                    "description": "Label identifies the exact label to operate on.",
                    "title": "label",
                    "type": "string"
                },
                "label_set": {
                    "description": "LabelSet is a list of labels to keep. All other labels are aggregated based on the AggregationType.",
                    "items": {
                        "type": "string"
                    },
                    "title": "label_set",
                    "type": "array"
                },
                "label_value": {
                    "description": "LabelValue identifies the exact label value to operate on",
                    "title": "label_value",
                    "type": "string"
                },
                "new_label": {
                    "description": "NewLabel determines the name to rename the identified label to.",
                    "title": "new_label",
                    "type": "string"
                },
                "new_value": {
                    "description": "NewValue is used to set a new label value either when the operation is `AggregatedValues` or `AddLabel`.",
                    "title": "new_value",
                    "type": "string"
                },
                "value_actions": {
                    "description": "ValueActions is a list of renaming actions for label values.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.metricstransformprocessor.ValueAction"
                    },
                    "title": "value_actions",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.metricstransformprocessor.Transform": {
            "additionalProperties": false,
            "description": "Transform defines the transformation applied to the specific metric",
            "properties": {
                "action": {
                    "description": "Action specifies the action performed on the matched metric. Action specifies\nif the operations (specified below) are performed on metrics in place (update),\non an inserted clone (insert), or on a new combined metric that includes all\ndata points from the set of matching metrics (combine).\nREQUIRED",
                    "title": "action",
                    "type": "string"
                },
                "aggregation_type": {
                    "description": "AggregationType specifies how to aggregate.\nREQUIRED only if Action is COMBINE.",
                    "title": "aggregation_type",
                    "type": "string"
                },
                "experimental_match_labels": {
                    "description": "MatchLabels specifies the label set against which the metric filter will work.\nThis field is optional.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "experimental_match_labels",
                    "type": "object"
                },
                "group_resource_labels": {
                    "description": "GroupResourceLabels specifes resource labels that will be appended to this group's new ResourceMetrics message\nREQUIRED only if Action is GROUP",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "group_resource_labels",
                    "type": "object"
                },
                "include": {
                    "description": "Include specifies the metric(s) to operate on.",
                    "title": "include",
                    "type": "string"
                },
                "match_type": {
                    "description": "MatchType determines how the Include string is matched: \u003cstrict|regexp\u003e.",
                    "title": "match_type",
                    "type": "string"
                },
                "new_name": {
                    "description": "NewName specifies the name of the new metric when inserting or updating.\nREQUIRED only if Action is INSERT.",
                    "title": "new_name",
                    "type": "string"
                },
                "operations": {
                    "description": "Operations contains a list of operations that will be performed on the resulting metric(s).",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.metricstransformprocessor.Operation"
                    },
                    "title": "operations",
                    "type": "array"
                },
                "submatch_case": {
                    "description": "SubmatchCase specifies what case to use for label values created from regexp submatches.",
                    "title": "submatch_case",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.metricstransformprocessor.ValueAction": {
            "additionalProperties": false,
            "description": "ValueAction renames label values.",
            "properties": {
                "new_value": {
                    "description": "NewValue specifies the label value to rename to.",
                    "title": "new_value",
                    "type": "string"
                },
                "value": {
                    "description": "Value specifies the current label value.",
                    "title": "value",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.probabilisticsamplerprocessor.Config": {
            "additionalProperties": false,
            "description": "Config has the configuration guiding the sampler processor.",
            "properties": {
                "attribute_source": {
                    "title": "attribute_source",
                    "type": "string"
                },
                "from_attribute": {
                    "description": "FromAttribute (logs only) The optional name of a log record attribute used for sampling purposes, such as a\nunique log record ID. The value of the attribute is only used if the trace ID is absent or if `attribute_source` is set to `record`.",
                    "title": "from_attribute",
                    "type": "string"
                },
                "hash_seed": {
                    "description": "HashSeed allows one to configure the hashing seed. This is important in scenarios where multiple layers of collectors\nhave different sampling rates: if they use the same seed all passing one layer may pass the other even if they have\ndifferent sampling rates, configuring different seeds avoids that.",
                    "title": "hash_seed",
                    "type": "integer"
                },
                "sampling_percentage": {
                    "description": "SamplingPercentage is the percentage rate at which traces or logs are going to be sampled. Defaults to zero, i.e.: no sample.\nValues greater or equal 100 are treated as \"sample all traces/logs\".",
                    "title": "sampling_percentage",
                    "type": "number"
                },
                "sampling_priority": {
                    "description": "SamplingPriority (logs only) allows to use a log record attribute designed by the `sampling_priority` key\nto be used as the sampling priority of the log record.",
                    "title": "sampling_priority",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.redactionprocessor.Config": {
            "additionalProperties": false,
            "properties": {
                "allow_all_keys": {
                    "description": "AllowAllKeys is a flag to allow all span attribute keys. Setting this\nto true disables the AllowedKeys list. The list of BlockedValues is\napplied regardless. If you just want to block values, set this to true.",
                    "title": "allow_all_keys",
                    "type": "boolean"
                },
                "allowed_keys": {
                    "description": "AllowedKeys is a list of allowed span attribute keys. Span attributes\nnot on the list are removed. The list fails closed if it's empty. To\nallow all keys, you should explicitly set AllowAllKeys",
                    "items": {
                        "type": "string"
                    },
                    "title": "allowed_keys",
                    "type": "array"
                },
                "blocked_values": {
                    "description": "BlockedValues is a list of regular expressions for blocking values of\nallowed span attributes. Values that match are masked",
                    "items": {
                        "type": "string"
                    },
                    "title": "blocked_values",
                    "type": "array"
                },
                "ignored_keys": {
                    "description": "IgnoredKeys is a list of span attribute keys that are not redacted.\nSpan attributes in this list are allowed to pass through the filter\nwithout being changed or removed.",
                    "items": {
                        "type": "string"
                    },
                    "title": "ignored_keys",
                    "type": "array"
                },
                "summary": {
                    "description": "Summary controls the verbosity level of the diagnostic attributes that\nthe processor adds to the spans when it redacts or masks other\nattributes. In some contexts a list of redacted attributes leaks\ninformation, while it is valuable when integrating and testing a new\nconfiguration. Possible values are `debug`, `info`, and `silent`.",
                    "title": "summary",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Resource processor.",
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "aks": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.aks.Config",
                    "description": "Aks contains user-specified configurations for the aks detector",
                    "title": "aks"
                },
                "attributes": {
                    "description": "Attributes is an allowlist of attributes to add.\nIf a supplied attribute is not a valid attribute of a supplied detector it will be ignored.\nDeprecated: Please use detector's resource_attributes config instead",
                    "items": {
                        "type": "string"
                    },
                    "title": "attributes",
                    "type": "array"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "azure": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.Config",
                    "description": "Azure contains user-specified configurations for the azure detector",
                    "title": "azure"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "consul": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.Config",
                    "description": "ConsulConfig contains user-specified configurations for the Consul detector",
                    "title": "consul"
                },
                "detectors": {
                    "description": "Detectors is an ordered list of named detectors that should be\nrun to attempt to detect resource information.",
                    "items": {
                        "type": "string"
                    },
                    "title": "detectors",
                    "type": "array"
                },
                "docker": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.docker.Config",
                    "description": "DockerConfig contains user-specified configurations for the docker detector",
                    "title": "docker"
                },
                "ec2": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.Config",
                    "description": "EC2Config contains user-specified configurations for the EC2 detector",
                    "title": "ec2"
                },
                "ecs": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.Config",
                    "description": "ECSConfig contains user-specified configurations for the ECS detector",
                    "title": "ecs"
                },
                "eks": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.eks.Config",
                    "description": "EKSConfig contains user-specified configurations for the EKS detector",
                    "title": "eks"
                },
                "elasticbeanstalk": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.elasticbeanstalk.Config",
                    "description": "Elasticbeanstalk contains user-specified configurations for the elasticbeanstalk detector",
                    "title": "elasticbeanstalk"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "gcp": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.Config",
                    "description": "GcpConfig contains user-specified configurations for the gcp detector",
                    "title": "gcp"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "heroku": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.Config",
                    "description": "HerokuConfig contains user-specified configurations for the heroku detector",
                    "title": "heroku"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "lambda": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.Config",
                    "description": "Lambda contains user-specified configurations for the lambda detector",
                    "title": "lambda"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "openshift": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.openshift.Config",
                    "description": "OpenShift contains user-specified configurations for the Openshift detector",
                    "title": "openshift"
                },
                "override": {
                    "description": "Override indicates whether any existing resource attributes\nshould be overridden or preserved. Defaults to true.",
                    "title": "override",
                    "type": "boolean"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "system": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.system.Config",
                    "description": "SystemConfig contains user-specified configurations for the System detector",
                    "title": "system"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.Config": {
            "additionalProperties": false,
            "description": "Config defines user-specified configurations unique to the EC2 detector",
            "properties": {
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "tags": {
                    "description": "Tags is a list of regex's to match ec2 instance tag keys that users want\nto add as resource attributes to processed data",
                    "items": {
                        "type": "string"
                    },
                    "title": "tags",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/ec2 resource attributes.",
            "properties": {
                "cloud.account.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.account.id"
                },
                "cloud.availability_zone": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.availability_zone"
                },
                "cloud.platform": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.platform"
                },
                "cloud.provider": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.provider"
                },
                "cloud.region": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.region"
                },
                "host.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.internal.metadata.ResourceAttributeConfig",
                    "title": "host.id"
                },
                "host.image.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.internal.metadata.ResourceAttributeConfig",
                    "title": "host.image.id"
                },
                "host.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.internal.metadata.ResourceAttributeConfig",
                    "title": "host.name"
                },
                "host.type": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ec2.internal.metadata.ResourceAttributeConfig",
                    "title": "host.type"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.Config": {
            "additionalProperties": false,
            "properties": {
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/ecs resource attributes.",
            "properties": {
                "aws.ecs.cluster.arn": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "aws.ecs.cluster.arn"
                },
                "aws.ecs.launchtype": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "aws.ecs.launchtype"
                },
                "aws.ecs.task.arn": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "aws.ecs.task.arn"
                },
                "aws.ecs.task.family": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "aws.ecs.task.family"
                },
                "aws.ecs.task.revision": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "aws.ecs.task.revision"
                },
                "aws.log.group.arns": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "aws.log.group.arns"
                },
                "aws.log.group.names": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "aws.log.group.names"
                },
                "aws.log.stream.arns": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "aws.log.stream.arns"
                },
                "aws.log.stream.names": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "aws.log.stream.names"
                },
                "cloud.account.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.account.id"
                },
                "cloud.availability_zone": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.availability_zone"
                },
                "cloud.platform": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.platform"
                },
                "cloud.provider": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.provider"
                },
                "cloud.region": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.ecs.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.region"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.eks.Config": {
            "additionalProperties": false,
            "properties": {
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.eks.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.eks.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.eks.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/eks resource attributes.",
            "properties": {
                "cloud.platform": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.eks.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.platform"
                },
                "cloud.provider": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.eks.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.provider"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.elasticbeanstalk.Config": {
            "additionalProperties": false,
            "properties": {
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.elasticbeanstalk.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.elasticbeanstalk.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.elasticbeanstalk.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/elastic_beanstalk resource attributes.",
            "properties": {
                "cloud.platform": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.elasticbeanstalk.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.platform"
                },
                "cloud.provider": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.elasticbeanstalk.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.provider"
                },
                "deployment.environment": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.elasticbeanstalk.internal.metadata.ResourceAttributeConfig",
                    "title": "deployment.environment"
                },
                "service.instance.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.elasticbeanstalk.internal.metadata.ResourceAttributeConfig",
                    "title": "service.instance.id"
                },
                "service.version": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.elasticbeanstalk.internal.metadata.ResourceAttributeConfig",
                    "title": "service.version"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.Config": {
            "additionalProperties": false,
            "properties": {
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/lambda resource attributes.",
            "properties": {
                "aws.log.group.names": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.internal.metadata.ResourceAttributeConfig",
                    "title": "aws.log.group.names"
                },
                "aws.log.stream.names": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.internal.metadata.ResourceAttributeConfig",
                    "title": "aws.log.stream.names"
                },
                "cloud.platform": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.platform"
                },
                "cloud.provider": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.provider"
                },
                "cloud.region": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.region"
                },
                "faas.instance": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.internal.metadata.ResourceAttributeConfig",
                    "title": "faas.instance"
                },
                "faas.max_memory": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.internal.metadata.ResourceAttributeConfig",
                    "title": "faas.max_memory"
                },
                "faas.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.internal.metadata.ResourceAttributeConfig",
                    "title": "faas.name"
                },
                "faas.version": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.aws.lambda.internal.metadata.ResourceAttributeConfig",
                    "title": "faas.version"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.Config": {
            "additionalProperties": false,
            "properties": {
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.aks.Config": {
            "additionalProperties": false,
            "properties": {
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.aks.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.aks.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.aks.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/aks resource attributes.",
            "properties": {
                "cloud.platform": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.aks.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.platform"
                },
                "cloud.provider": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.aks.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.provider"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/azure resource attributes.",
            "properties": {
                "azure.resourcegroup.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributeConfig",
                    "title": "azure.resourcegroup.name"
                },
                "azure.vm.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributeConfig",
                    "title": "azure.vm.name"
                },
                "azure.vm.scaleset.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributeConfig",
                    "title": "azure.vm.scaleset.name"
                },
                "azure.vm.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributeConfig",
                    "title": "azure.vm.size"
                },
                "cloud.account.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.account.id"
                },
                "cloud.platform": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.platform"
                },
                "cloud.provider": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.provider"
                },
                "cloud.region": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.region"
                },
                "host.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributeConfig",
                    "title": "host.id"
                },
                "host.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.azure.internal.metadata.ResourceAttributeConfig",
                    "title": "host.name"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.Config": {
            "additionalProperties": false,
            "description": "The struct requires no user-specified fields by default as consul agent's default configuration will be provided to the API client.",
            "properties": {
                "address": {
                    "description": "Address is the address of the Consul server",
                    "title": "address",
                    "type": "string"
                },
                "datacenter": {
                    "description": "Datacenter to use. If not provided, the default agent datacenter is used.",
                    "title": "datacenter",
                    "type": "string"
                },
                "meta": {
                    "description": "Allowlist of [Consul\nMetadata](https://www.consul.io/docs/agent/options#node_meta) keys to use as\nresource attributes.",
                    "patternProperties": {
                        ".*": true
                    },
                    "title": "meta",
                    "type": "object"
                },
                "namespace": {
                    "description": "Namespace is the name of the namespace to send along for the request\nwhen no other Namespace is present in the QueryOptions",
                    "title": "namespace",
                    "type": "string"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributesConfig",
                    "description": "ResourceAttributes configuration for Consul detector",
                    "title": "resource_attributes"
                },
                "token": {
                    "description": "Token is used to provide a per-request ACL token\nwhich overrides the agent's default (empty) token.\nToken or Tokenfile are only required if [Consul's ACL\nSystem](https://www.consul.io/docs/security/acl/acl-system) is enabled.",
                    "title": "token",
                    "type": "string"
                },
                "token_file": {
                    "description": "TokenFile is a file containing the current token to use for this client.\nIf provided it is read once at startup and never again.\nToken or Tokenfile are only required if [Consul's ACL\nSystem](https://www.consul.io/docs/security/acl/acl-system) is enabled.",
                    "title": "token_file",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/consul resource attributes.",
            "properties": {
                "azure.resourcegroup.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributeConfig",
                    "title": "azure.resourcegroup.name"
                },
                "azure.vm.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributeConfig",
                    "title": "azure.vm.name"
                },
                "azure.vm.scaleset.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributeConfig",
                    "title": "azure.vm.scaleset.name"
                },
                "azure.vm.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributeConfig",
                    "title": "azure.vm.size"
                },
                "cloud.account.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.account.id"
                },
                "cloud.platform": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.platform"
                },
                "cloud.provider": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.provider"
                },
                "cloud.region": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.region"
                },
                "host.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributeConfig",
                    "title": "host.id"
                },
                "host.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.consul.internal.metadata.ResourceAttributeConfig",
                    "title": "host.name"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.docker.Config": {
            "additionalProperties": false,
            "properties": {
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.docker.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.docker.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.docker.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/docker resource attributes.",
            "properties": {
                "host.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.docker.internal.metadata.ResourceAttributeConfig",
                    "title": "host.name"
                },
                "os.type": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.docker.internal.metadata.ResourceAttributeConfig",
                    "title": "os.type"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.Config": {
            "additionalProperties": false,
            "properties": {
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/gcp resource attributes.",
            "properties": {
                "cloud.account.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.account.id"
                },
                "cloud.availability_zone": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.availability_zone"
                },
                "cloud.platform": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.platform"
                },
                "cloud.provider": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.provider"
                },
                "cloud.region": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.region"
                },
                "faas.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig",
                    "title": "faas.id"
                },
                "faas.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig",
                    "title": "faas.name"
                },
                "faas.version": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig",
                    "title": "faas.version"
                },
                "host.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig",
                    "title": "host.id"
                },
                "host.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig",
                    "title": "host.name"
                },
                "host.type": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig",
                    "title": "host.type"
                },
                "k8s.cluster.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.gcp.internal.metadata.ResourceAttributeConfig",
                    "title": "k8s.cluster.name"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.Config": {
            "additionalProperties": false,
            "properties": {
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/heroku resource attributes.",
            "properties": {
                "cloud.provider": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.provider"
                },
                "heroku.app.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.internal.metadata.ResourceAttributeConfig",
                    "title": "heroku.app.id"
                },
                "heroku.app.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.internal.metadata.ResourceAttributeConfig",
                    "title": "heroku.app.name"
                },
                "heroku.dyno.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.internal.metadata.ResourceAttributeConfig",
                    "title": "heroku.dyno.id"
                },
                "heroku.release.commit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.internal.metadata.ResourceAttributeConfig",
                    "title": "heroku.release.commit"
                },
                "heroku.release.creation_timestamp": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.internal.metadata.ResourceAttributeConfig",
                    "title": "heroku.release.creation_timestamp"
                },
                "heroku.release.version": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.internal.metadata.ResourceAttributeConfig",
                    "title": "heroku.release.version"
                },
                "service.instance.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.heroku.internal.metadata.ResourceAttributeConfig",
                    "title": "service.instance.id"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.openshift.Config": {
            "additionalProperties": false,
            "description": "Config can contain user-specified inputs to overwrite default values.",
            "properties": {
                "address": {
                    "description": "Address is the address of the openshift api server",
                    "title": "address",
                    "type": "string"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.openshift.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSettings contains TLS configurations that are specific to client\nconnection used to communicate with the Openshift API.",
                    "title": "tls"
                },
                "token": {
                    "description": "Token is used to identify against the openshift api server",
                    "title": "token",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.openshift.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.openshift.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/openshift resource attributes.",
            "properties": {
                "cloud.platform": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.openshift.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.platform"
                },
                "cloud.provider": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.openshift.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.provider"
                },
                "cloud.region": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.openshift.internal.metadata.ResourceAttributeConfig",
                    "title": "cloud.region"
                },
                "k8s.cluster.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.openshift.internal.metadata.ResourceAttributeConfig",
                    "title": "k8s.cluster.name"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.system.Config": {
            "additionalProperties": false,
            "description": "Config defines user-specified configurations unique to the system detector",
            "properties": {
                "hostname_sources": {
                    "description": "The HostnameSources is a priority list of sources from which hostname will be fetched.\nIn case of the error in fetching hostname from source,\nthe next source from the list will be considered.(**default**: `[\"dns\", \"os\"]`)",
                    "items": {
                        "type": "string"
                    },
                    "title": "hostname_sources",
                    "type": "array"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.system.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.system.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.system.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for resourcedetectionprocessor/system resource attributes.",
            "properties": {
                "host.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.system.internal.metadata.ResourceAttributeConfig",
                    "title": "host.id"
                },
                "host.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.system.internal.metadata.ResourceAttributeConfig",
                    "title": "host.name"
                },
                "os.type": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.internal.system.internal.metadata.ResourceAttributeConfig",
                    "title": "os.type"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourceprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Resource processor.",
            "properties": {
                "attributes": {
                    "description": "AttributesActions specifies the list of actions to be applied on resource attributes.\nThe set of actions are {INSERT, UPDATE, UPSERT, DELETE, HASH, EXTRACT}.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.coreinternal.attraction.ActionKeyValue"
                    },
                    "title": "attributes",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.routingprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for the Routing processor.",
            "properties": {
                "attribute_source": {
                    "description": "AttributeSource defines where the attribute defined in `from_attribute` is searched for.\nThe allowed values are:\n- \"context\" - the attribute must exist in the incoming context\n- \"resource\" - the attribute must exist in resource attributes\nThe default value is \"context\".\nOptional.",
                    "title": "attribute_source",
                    "type": "string"
                },
                "default_exporters": {
                    "description": "DefaultExporters contains the list of exporters to use when a more specific record can't be found in the routing table.\nOptional.",
                    "items": {
                        "type": "string"
                    },
                    "title": "default_exporters",
                    "type": "array"
                },
                "drop_resource_routing_attribute": {
                    "description": "DropRoutingResourceAttribute controls whether to remove the resource attribute used for routing.\nThis is only relevant if AttributeSource is set to resource.\nOptional.",
                    "title": "drop_resource_routing_attribute",
                    "type": "boolean"
                },
                "error_mode": {
                    "description": "ErrorMode determines how the processor reacts to errors that occur while processing an OTTL condition.\nValid values are `ignore` and `propagate`.\n`ignore` means the processor ignores errors returned by conditions and continues on to the next condition. This is the recommended mode.\nIf `ignored` is used and a statement's condition has an error then the payload will be routed to the default exporter.\n`propagate` means the processor returns the error up the pipeline.  This will result in the payload being dropped from the collector.\nThe default value is `propagate`.",
                    "title": "error_mode",
                    "type": "string"
                },
                "from_attribute": {
                    "description": "FromAttribute contains the attribute name to look up the route value. This attribute should be part of the context propagated\ndown from the previous receivers and/or processors. If all the receivers and processors are propagating the entire context correctly,\nthis could be the HTTP/gRPC header from the original request/RPC. Typically, aggregation processors (batch, groupbytrace)\nwill create a new context, so, those should be avoided when using this processor.Although the HTTP spec allows headers to be repeated,\nthis processor will only use the first value.\nRequired.",
                    "title": "from_attribute",
                    "type": "string"
                },
                "table": {
                    "description": "Table contains the routing table for this processor.\nRequired.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.routingprocessor.RoutingTableItem"
                    },
                    "title": "table",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.routingprocessor.RoutingTableItem": {
            "additionalProperties": false,
            "description": "RoutingTableItem specifies how data should be routed to the different exporters",
            "properties": {
                "exporters": {
                    "description": "Exporters contains the list of exporters to use when the value from the FromAttribute field matches this table item.\nWhen no exporters are specified, the ones specified under DefaultExporters are used, if any.\nThe routing processor will fail upon the first failure from these exporters.\nOptional.",
                    "items": {
                        "type": "string"
                    },
                    "title": "exporters",
                    "type": "array"
                },
                "statement": {
                    "description": "Statement is a OTTL statement used for making a routing decision.\nRequired when 'Value' isn't provided.",
                    "title": "statement",
                    "type": "string"
                },
                "value": {
                    "description": "Value represents a possible value for the field specified under FromAttribute.\nRequired when Statement isn't provided.",
                    "title": "value",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.schemaprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines the user provided values for the Schema Processor",
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "prefetch": {
                    "description": "PreCache is a list of schema URLs that are downloaded\nand cached at the start of the collector runtime\nin order to avoid fetching data that later on could\nblock processing of signals. (Optional field)",
                    "items": {
                        "type": "string"
                    },
                    "title": "prefetch",
                    "type": "array"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "targets": {
                    "description": "Targets define what schema families should be\ntranslated to, allowing older and newer formats\nto conform to the target schema identifier.",
                    "items": {
                        "type": "string"
                    },
                    "title": "targets",
                    "type": "array"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.servicegraphprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines the configuration options for servicegraphprocessor.",
            "properties": {
                "cache_loop": {
                    "description": "CacheLoop is the time to cleans the cache periodically.",
                    "title": "cache_loop",
                    "type": "integer"
                },
                "dimensions": {
                    "description": "Dimensions defines the list of additional dimensions on top of the provided:\n- client\n- server\n- failed\n- connection_type\nThe dimensions will be fetched from the span's attributes. Examples of some conventionally used attributes:\nhttps://github.com/open-telemetry/opentelemetry-collector/blob/main/model/semconv/opentelemetry.go.",
                    "items": {
                        "type": "string"
                    },
                    "title": "dimensions",
                    "type": "array"
                },
                "latency_histogram_buckets": {
                    "description": "LatencyHistogramBuckets is the list of durations representing latency histogram buckets.\nSee defaultLatencyHistogramBucketsMs in processor.go for the default value.",
                    "items": {
                        "type": "integer"
                    },
                    "title": "latency_histogram_buckets",
                    "type": "array"
                },
                "metrics_exporter": {
                    "description": "MetricsExporter is the name of the metrics exporter to use to ship metrics.",
                    "title": "metrics_exporter",
                    "type": "string"
                },
                "store": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.servicegraphprocessor.StoreConfig",
                    "description": "Store contains the config for the in-memory store used to find requests between services by pairing spans.",
                    "title": "store"
                },
                "store_expiration_loop": {
                    "description": "CacheLoop is the time to expire old entries from the store periodically.",
                    "title": "store_expiration_loop",
                    "type": "integer"
                },
                "virtual_node_peer_attributes": {
                    "description": "VirtualNodePeerAttributes the list of attributes need to match, the higher the front, the higher the priority.",
                    "items": {
                        "type": "string"
                    },
                    "title": "virtual_node_peer_attributes",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.servicegraphprocessor.StoreConfig": {
            "additionalProperties": false,
            "properties": {
                "max_items": {
                    "description": "MaxItems is the maximum number of items to keep in the store.",
                    "title": "max_items",
                    "type": "integer"
                },
                "ttl": {
                    "description": "TTL is the time to live for items in the store.",
                    "title": "ttl",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.spanmetricsprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines the configuration options for spanmetricsprocessor.",
            "properties": {
                "aggregation_temporality": {
                    "title": "aggregation_temporality",
                    "type": "string"
                },
                "dimensions": {
                    "description": "Dimensions defines the list of additional dimensions on top of the provided:\n- service.name\n- operation\n- span.kind\n- status.code\nThe dimensions will be fetched from the span's attributes. Examples of some conventionally used attributes:\nhttps://github.com/open-telemetry/opentelemetry-collector/blob/main/model/semconv/opentelemetry.go.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.spanmetricsprocessor.Dimension"
                    },
                    "title": "dimensions",
                    "type": "array"
                },
                "dimensions_cache_size": {
                    "description": "DimensionsCacheSize defines the size of cache for storing Dimensions, which helps to avoid cache memory growing\nindefinitely over the lifetime of the collector.\nOptional. See defaultDimensionsCacheSize in processor.go for the default value.",
                    "title": "dimensions_cache_size",
                    "type": "integer"
                },
                "latency_histogram_buckets": {
                    "description": "LatencyHistogramBuckets is the list of durations representing latency histogram buckets.\nSee defaultLatencyHistogramBucketsMs in processor.go for the default value.",
                    "items": {
                        "type": "integer"
                    },
                    "title": "latency_histogram_buckets",
                    "type": "array"
                },
                "metrics_exporter": {
                    "description": "MetricsExporter is the name of the metrics exporter to use to ship metrics.",
                    "title": "metrics_exporter",
                    "type": "string"
                },
                "metrics_flush_interval": {
                    "description": "MetricsEmitInterval is the time period between when metrics are flushed or emitted to the configured MetricsExporter.",
                    "title": "metrics_flush_interval",
                    "type": "integer"
                },
                "namespace": {
                    "description": "Namespace is the namespace to use for the metrics.",
                    "title": "namespace",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.spanmetricsprocessor.Dimension": {
            "additionalProperties": false,
            "description": "Dimension defines the dimension name and optional default value if the Dimension is missing from a span attribute.",
            "properties": {
                "default": {
                    "title": "default",
                    "type": "string"
                },
                "name": {
                    "title": "name",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.spanprocessor.Config": {
            "additionalProperties": false,
            "description": "Config is the configuration for the span processor.",
            "properties": {
                "exclude": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.MatchProperties",
                    "description": "Exclude specifies when this processor will not be applied to the input data\nwhich match the specified properties.\nNote: The `exclude` properties are checked after the `include` properties,\nif they exist, are checked.\nIf `include` isn't specified, the `exclude` properties are checked against\nall input data.\nThis is an optional field. If neither `include` and `exclude` are set, all input data\nis processed. If `exclude` is set and `include` isn't set, then all the\ninput data that does not match the properties in this structure are processed.",
                    "title": "exclude"
                },
                "include": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.filter.filterconfig.MatchProperties",
                    "description": "Include specifies the set of input data properties that must be present in order\nfor this processor to apply to it.\nNote: If `exclude` is specified, the input data is compared against those\nproperties after the `include` properties.\nThis is an optional field. If neither `include` and `exclude` are set, all input data\nare processed. If `include` is set and `exclude` isn't set, then all\ninput data matching the properties in this structure are processed.",
                    "title": "include"
                },
                "name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.spanprocessor.Name",
                    "description": "Rename specifies the components required to re-name a span.\nThe `from_attributes` field needs to be set for this processor to be properly\nconfigured.\nNote: The field name is `Rename` to avoid collision with the Name() method\nfrom config.NamedEntity",
                    "title": "name"
                },
                "status": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.spanprocessor.Status",
                    "description": "SetStatus specifies status which should be set for this span.",
                    "title": "status"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.spanprocessor.Name": {
            "additionalProperties": false,
            "description": "Name specifies the attributes to use to re-name a span.",
            "properties": {
                "from_attributes": {
                    "description": "FromAttributes represents the attribute keys to pull the values from to\ngenerate the new span name. All attribute keys are required in the span\nto re-name a span. If any attribute is missing from the span, no re-name\nwill occur.\nNote: The new span name is constructed in order of the `from_attributes`\nspecified in the configuration. This field is required and cannot be empty.",
                    "items": {
                        "type": "string"
                    },
                    "title": "from_attributes",
                    "type": "array"
                },
                "separator": {
                    "description": "Separator is the string used to separate attributes values in the new\nspan name. If no value is set, no separator is used between attribute\nvalues. Used with FromAttributes only.",
                    "title": "separator",
                    "type": "string"
                },
                "to_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.spanprocessor.ToAttributes",
                    "description": "ToAttributes specifies a configuration to extract attributes from span name.",
                    "title": "to_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.spanprocessor.Status": {
            "additionalProperties": false,
            "properties": {
                "code": {
                    "description": "Code is one of three values \"Ok\" or \"Error\" or \"Unset\". Please check:\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status",
                    "title": "code",
                    "type": "string"
                },
                "description": {
                    "description": "Description is an optional field documenting Error statuses.",
                    "title": "description",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.spanprocessor.ToAttributes": {
            "additionalProperties": false,
            "description": "ToAttributes specifies a configuration to extract attributes from span name.",
            "properties": {
                "break_after_match": {
                    "description": "BreakAfterMatch specifies if processing of rules should stop after the first\nmatch. If it is false rule processing will continue to be performed over the\nmodified span name.",
                    "title": "break_after_match",
                    "type": "boolean"
                },
                "rules": {
                    "description": "Rules is a list of rules to extract attribute values from span name. The values\nin the span name are replaced by extracted attribute names. Each rule in the list\nis a regex pattern string. Span name is checked against the regex. If it matches\nthen all named subexpressions of the regex are extracted as attributes\nand are added to the span. Each subexpression name becomes an attribute name and\nsubexpression matched portion becomes the attribute value. The matched portion\nin the span name is replaced by extracted attribute name. If the attributes\nalready exist in the span then they will be overwritten. The process is repeated\nfor all rules in the order they are specified. Each subsequent rule works on the\nspan name that is the output after processing the previous rule.",
                    "items": {
                        "type": "string"
                    },
                    "title": "rules",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.AndCfg": {
            "additionalProperties": false,
            "properties": {
                "and_sub_policy": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.AndSubPolicyCfg"
                    },
                    "title": "and_sub_policy",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.AndSubPolicyCfg": {
            "additionalProperties": false,
            "description": "AndSubPolicyCfg holds the common configuration to all policies under and policy.",
            "properties": {
                "boolean_attribute": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.BooleanAttributeCfg",
                    "title": "boolean_attribute"
                },
                "latency": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.LatencyCfg",
                    "title": "latency"
                },
                "name": {
                    "title": "name",
                    "type": "string"
                },
                "numeric_attribute": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.NumericAttributeCfg",
                    "title": "numeric_attribute"
                },
                "ottl_condition": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.OTTLConditionCfg",
                    "title": "ottl_condition"
                },
                "probabilistic": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.ProbabilisticCfg",
                    "title": "probabilistic"
                },
                "rate_limiting": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.RateLimitingCfg",
                    "title": "rate_limiting"
                },
                "span_count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.SpanCountCfg",
                    "title": "span_count"
                },
                "status_code": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.StatusCodeCfg",
                    "title": "status_code"
                },
                "string_attribute": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.StringAttributeCfg",
                    "title": "string_attribute"
                },
                "trace_state": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.TraceStateCfg",
                    "title": "trace_state"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.BooleanAttributeCfg": {
            "additionalProperties": false,
            "description": "BooleanAttributeCfg holds the configurable settings to create a boolean attribute filter sampling policy evaluator.",
            "properties": {
                "key": {
                    "description": "Tag that the filter is going to be matching against.",
                    "title": "key",
                    "type": "string"
                },
                "value": {
                    "description": "Value indicate the bool value, either true or false to use when matching against attribute values.\nBooleanAttribute Policy will apply exact value match on Value",
                    "title": "value",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.CompositeCfg": {
            "additionalProperties": false,
            "description": "CompositeCfg holds the configurable settings to create a composite sampling policy evaluator.",
            "properties": {
                "composite_sub_policy": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.CompositeSubPolicyCfg"
                    },
                    "title": "composite_sub_policy",
                    "type": "array"
                },
                "max_total_spans_per_second": {
                    "title": "max_total_spans_per_second",
                    "type": "integer"
                },
                "policy_order": {
                    "items": {
                        "type": "string"
                    },
                    "title": "policy_order",
                    "type": "array"
                },
                "rate_allocation": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.RateAllocationCfg"
                    },
                    "title": "rate_allocation",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.CompositeSubPolicyCfg": {
            "additionalProperties": false,
            "description": "CompositeSubPolicyCfg holds the common configuration to all policies under composite policy.",
            "properties": {
                "and": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.AndCfg",
                    "description": "Configs for and policy evaluator.",
                    "title": "and"
                },
                "boolean_attribute": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.BooleanAttributeCfg",
                    "title": "boolean_attribute"
                },
                "latency": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.LatencyCfg",
                    "title": "latency"
                },
                "name": {
                    "title": "name",
                    "type": "string"
                },
                "numeric_attribute": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.NumericAttributeCfg",
                    "title": "numeric_attribute"
                },
                "ottl_condition": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.OTTLConditionCfg",
                    "title": "ottl_condition"
                },
                "probabilistic": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.ProbabilisticCfg",
                    "title": "probabilistic"
                },
                "rate_limiting": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.RateLimitingCfg",
                    "title": "rate_limiting"
                },
                "span_count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.SpanCountCfg",
                    "title": "span_count"
                },
                "status_code": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.StatusCodeCfg",
                    "title": "status_code"
                },
                "string_attribute": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.StringAttributeCfg",
                    "title": "string_attribute"
                },
                "trace_state": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.TraceStateCfg",
                    "title": "trace_state"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.Config": {
            "additionalProperties": false,
            "description": "Config holds the configuration for tail-based sampling.",
            "properties": {
                "decision_wait": {
                    "description": "DecisionWait is the desired wait time from the arrival of the first span of\ntrace until the decision about sampling it or not is evaluated.",
                    "title": "decision_wait",
                    "type": "integer"
                },
                "expected_new_traces_per_sec": {
                    "description": "ExpectedNewTracesPerSec sets the expected number of new traces sending to the tail sampling processor\nper second. This helps with allocating data structures with closer to actual usage size.",
                    "title": "expected_new_traces_per_sec",
                    "type": "integer"
                },
                "num_traces": {
                    "description": "NumTraces is the number of traces kept on memory. Typically most of the data\nof a trace is released after a sampling decision is taken.",
                    "title": "num_traces",
                    "type": "integer"
                },
                "policies": {
                    "description": "PolicyCfgs sets the tail-based sampling policy which makes a sampling decision\nfor a given trace when requested.",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.PolicyCfg"
                    },
                    "title": "policies",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.LatencyCfg": {
            "additionalProperties": false,
            "description": "LatencyCfg holds the configurable settings to create a latency filter sampling policy evaluator",
            "properties": {
                "threshold_ms": {
                    "description": "ThresholdMs in milliseconds.",
                    "title": "threshold_ms",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.NumericAttributeCfg": {
            "additionalProperties": false,
            "description": "NumericAttributeCfg holds the configurable settings to create a numeric attribute filter sampling policy evaluator.",
            "properties": {
                "key": {
                    "description": "Tag that the filter is going to be matching against.",
                    "title": "key",
                    "type": "string"
                },
                "max_value": {
                    "description": "MaxValue is the maximum value of the attribute to be considered a match.",
                    "title": "max_value",
                    "type": "integer"
                },
                "min_value": {
                    "description": "MinValue is the minimum value of the attribute to be considered a match.",
                    "title": "min_value",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.OTTLConditionCfg": {
            "additionalProperties": false,
            "description": "OTTLConditionCfg holds the configurable setting to create a OTTL condition filter sampling policy evaluator.",
            "properties": {
                "error_mode": {
                    "title": "error_mode",
                    "type": "string"
                },
                "span": {
                    "items": {
                        "type": "string"
                    },
                    "title": "span",
                    "type": "array"
                },
                "spanevent": {
                    "items": {
                        "type": "string"
                    },
                    "title": "spanevent",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.PolicyCfg": {
            "additionalProperties": false,
            "description": "PolicyCfg holds the common configuration to all policies.",
            "properties": {
                "and": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.AndCfg",
                    "description": "Configs for defining and policy",
                    "title": "and"
                },
                "boolean_attribute": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.BooleanAttributeCfg",
                    "title": "boolean_attribute"
                },
                "composite": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.CompositeCfg",
                    "description": "Configs for defining composite policy",
                    "title": "composite"
                },
                "latency": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.LatencyCfg",
                    "title": "latency"
                },
                "name": {
                    "title": "name",
                    "type": "string"
                },
                "numeric_attribute": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.NumericAttributeCfg",
                    "title": "numeric_attribute"
                },
                "ottl_condition": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.OTTLConditionCfg",
                    "title": "ottl_condition"
                },
                "probabilistic": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.ProbabilisticCfg",
                    "title": "probabilistic"
                },
                "rate_limiting": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.RateLimitingCfg",
                    "title": "rate_limiting"
                },
                "span_count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.SpanCountCfg",
                    "title": "span_count"
                },
                "status_code": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.StatusCodeCfg",
                    "title": "status_code"
                },
                "string_attribute": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.StringAttributeCfg",
                    "title": "string_attribute"
                },
                "trace_state": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.TraceStateCfg",
                    "title": "trace_state"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.ProbabilisticCfg": {
            "additionalProperties": false,
            "description": "ProbabilisticCfg holds the configurable settings to create a probabilistic sampling policy evaluator.",
            "properties": {
                "hash_salt": {
                    "description": "HashSalt allows one to configure the hashing salts. This is important in scenarios where multiple layers of collectors\nhave different sampling rates: if they use the same salt all passing one layer may pass the other even if they have\ndifferent sampling rates, configuring different salts avoids that.",
                    "title": "hash_salt",
                    "type": "string"
                },
                "sampling_percentage": {
                    "description": "SamplingPercentage is the percentage rate at which traces are going to be sampled. Defaults to zero, i.e.: no sample.\nValues greater or equal 100 are treated as \"sample all traces\".",
                    "title": "sampling_percentage",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.RateAllocationCfg": {
            "additionalProperties": false,
            "description": "RateAllocationCfg used within composite policy",
            "properties": {
                "percent": {
                    "title": "percent",
                    "type": "integer"
                },
                "policy": {
                    "title": "policy",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.RateLimitingCfg": {
            "additionalProperties": false,
            "description": "RateLimitingCfg holds the configurable settings to create a rate limiting sampling policy evaluator.",
            "properties": {
                "spans_per_second": {
                    "description": "SpansPerSecond sets the limit on the maximum nuber of spans that can be processed each second.",
                    "title": "spans_per_second",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.SpanCountCfg": {
            "additionalProperties": false,
            "description": "SpanCountCfg holds the configurable settings to create a Span Count filter sampling policy evaluator",
            "properties": {
                "max_spans": {
                    "title": "max_spans",
                    "type": "integer"
                },
                "min_spans": {
                    "description": "Minimum number of spans in a Trace",
                    "title": "min_spans",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.StatusCodeCfg": {
            "additionalProperties": false,
            "description": "StatusCodeCfg holds the configurable settings to create a status code filter sampling policy evaluator.",
            "properties": {
                "status_codes": {
                    "items": {
                        "type": "string"
                    },
                    "title": "status_codes",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.StringAttributeCfg": {
            "additionalProperties": false,
            "description": "StringAttributeCfg holds the configurable settings to create a string attribute filter sampling policy evaluator.",
            "properties": {
                "cache_max_size": {
                    "description": "CacheMaxSize is the maximum number of attribute entries of LRU Cache that stores the matched result\nfrom the regular expressions defined in Values.\nCacheMaxSize will not be used if EnabledRegexMatching is set to false.",
                    "title": "cache_max_size",
                    "type": "integer"
                },
                "enabled_regex_matching": {
                    "description": "EnabledRegexMatching determines whether match attribute values by regexp string.",
                    "title": "enabled_regex_matching",
                    "type": "boolean"
                },
                "invert_match": {
                    "description": "InvertMatch indicates that values or regular expressions must not match against attribute values.\nIf InvertMatch is true and Values is equal to 'acme', all other values will be sampled except 'acme'.\nAlso, if the specified Key does not match on any resource or span attributes, data will be sampled.",
                    "title": "invert_match",
                    "type": "boolean"
                },
                "key": {
                    "description": "Tag that the filter is going to be matching against.",
                    "title": "key",
                    "type": "string"
                },
                "values": {
                    "description": "Values indicate the set of values or regular expressions to use when matching against attribute values.\nStringAttribute Policy will apply exact value match on Values unless EnabledRegexMatching is true.",
                    "items": {
                        "type": "string"
                    },
                    "title": "values",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.TraceStateCfg": {
            "additionalProperties": false,
            "properties": {
                "key": {
                    "description": "Tag that the filter is going to be matching against.",
                    "title": "key",
                    "type": "string"
                },
                "values": {
                    "description": "Values indicate the set of values to use when matching against trace_state values.",
                    "items": {
                        "type": "string"
                    },
                    "title": "values",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.transformprocessor.Config": {
            "additionalProperties": false,
            "description": "Config defines the configuration for the processor.",
            "properties": {
                "error_mode": {
                    "description": "ErrorMode determines how the processor reacts to errors that occur while processing a statement.\nValid values are `ignore` and `propagate`.\n`ignore` means the processor ignores errors returned by statements and continues on to the next statement. This is the recommended mode.\n`propagate` means the processor returns the error up the pipeline.  This will result in the payload being dropped from the collector.\nThe default value is `propagate`.",
                    "title": "error_mode",
                    "type": "string"
                },
                "log_statements": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.transformprocessor.internal.common.ContextStatements"
                    },
                    "title": "log_statements",
                    "type": "array"
                },
                "metric_statements": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.transformprocessor.internal.common.ContextStatements"
                    },
                    "title": "metric_statements",
                    "type": "array"
                },
                "trace_statements": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.transformprocessor.internal.common.ContextStatements"
                    },
                    "title": "trace_statements",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.processor.transformprocessor.internal.common.ContextStatements": {
            "additionalProperties": false,
            "properties": {
                "context": {
                    "title": "context",
                    "type": "string"
                },
                "statements": {
                    "items": {
                        "type": "string"
                    },
                    "title": "statements",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for apache metrics.",
            "properties": {
                "apache.cpu.load": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig",
                    "title": "apache.cpu.load"
                },
                "apache.cpu.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig",
                    "title": "apache.cpu.time"
                },
                "apache.current_connections": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig",
                    "title": "apache.current_connections"
                },
                "apache.load.1": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig",
                    "title": "apache.load.1"
                },
                "apache.load.15": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig",
                    "title": "apache.load.15"
                },
                "apache.load.5": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig",
                    "title": "apache.load.5"
                },
                "apache.request.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig",
                    "title": "apache.request.time"
                },
                "apache.requests": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig",
                    "title": "apache.requests"
                },
                "apache.scoreboard": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig",
                    "title": "apache.scoreboard"
                },
                "apache.traffic": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig",
                    "title": "apache.traffic"
                },
                "apache.uptime": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig",
                    "title": "apache.uptime"
                },
                "apache.workers": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.MetricConfig",
                    "title": "apache.workers"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for apache resource attributes.",
            "properties": {
                "apache.server.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "apache.server.name"
                },
                "apache.server.port": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "apache.server.port"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscloudwatchreceiver.AutodiscoverConfig": {
            "additionalProperties": false,
            "description": "AutodiscoverConfig is the configuration for the autodiscovery functionality of log groups",
            "properties": {
                "limit": {
                    "title": "limit",
                    "type": "integer"
                },
                "prefix": {
                    "title": "prefix",
                    "type": "string"
                },
                "streams": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscloudwatchreceiver.StreamConfig",
                    "title": "streams"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscloudwatchreceiver.Config": {
            "additionalProperties": false,
            "description": "Config is the overall config structure for the awscloudwatchreceiver",
            "properties": {
                "imds_endpoint": {
                    "title": "imds_endpoint",
                    "type": "string"
                },
                "logs": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscloudwatchreceiver.LogsConfig",
                    "title": "logs"
                },
                "profile": {
                    "title": "profile",
                    "type": "string"
                },
                "region": {
                    "title": "region",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscloudwatchreceiver.GroupConfig": {
            "additionalProperties": false,
            "description": "GroupConfig is the configuration for log group collection",
            "properties": {
                "autodiscover": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscloudwatchreceiver.AutodiscoverConfig",
                    "title": "autodiscover"
                },
                "named": {
                    "patternProperties": {
                        ".*": {
                            "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscloudwatchreceiver.StreamConfig"
                        }
                    },
                    "title": "named",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscloudwatchreceiver.LogsConfig": {
            "additionalProperties": false,
            "description": "LogsConfig is the configuration for the logs portion of this receiver",
            "properties": {
                "groups": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscloudwatchreceiver.GroupConfig",
                    "title": "groups"
                },
                "max_events_per_request": {
                    "title": "max_events_per_request",
                    "type": "integer"
                },
                "poll_interval": {
                    "title": "poll_interval",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscloudwatchreceiver.StreamConfig": {
            "additionalProperties": false,
            "description": "StreamConfig represents the configuration for the log stream filtering",
            "properties": {
                "names": {
                    "items": {
                        "type": "string"
                    },
                    "title": "names",
                    "type": "array"
                },
                "prefixes": {
                    "items": {
                        "type": "string"
                    },
                    "title": "prefixes",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscontainerinsightreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for aws ecs container metrics receiver.",
            "properties": {
                "add_full_pod_name_metric_label": {
                    "description": "The \"FullPodName\" attribute is the pod name including suffix\nIf false FullPodName label is not added\nThe default value is false",
                    "title": "add_full_pod_name_metric_label",
                    "type": "boolean"
                },
                "add_service_as_attribute": {
                    "description": "Whether to add the associated service name as attribute. The default is true",
                    "title": "add_service_as_attribute",
                    "type": "boolean"
                },
                "collection_interval": {
                    "description": "CollectionInterval is the interval at which metrics should be collected. The default is 60 second.",
                    "title": "collection_interval",
                    "type": "integer"
                },
                "container_orchestrator": {
                    "description": "ContainerOrchestrator is the type of container orchestration service, e.g. eks or ecs. The default is eks.",
                    "title": "container_orchestrator",
                    "type": "string"
                },
                "prefer_full_pod_name": {
                    "description": "The \"PodName\" attribute is set based on the name of the relevant controllers like Daemonset, Job, ReplicaSet, ReplicationController, ...\nIf it can not be set that way and PrefFullPodName is true, the \"PodName\" attribute is set to the pod's own name.\nThe default value is false",
                    "title": "prefer_full_pod_name",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awsecscontainermetricsreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for aws ecs container metrics receiver.",
            "properties": {
                "collection_interval": {
                    "description": "CollectionInterval is the interval at which metrics should be collected",
                    "title": "collection_interval",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awsxrayreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines the configurations for an AWS X-Ray receiver.",
            "properties": {
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nFor TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address,\nor a host name that can be resolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "proxy_server": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.aws.proxy.Config",
                    "description": "ProxyServer defines configurations related to the local TCP proxy server.",
                    "title": "proxy_server"
                },
                "transport": {
                    "description": "Transport to use. Known protocols are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only),\n\"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\".",
                    "title": "transport",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.carbonreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for the Carbon receiver.",
            "properties": {
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nFor TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address,\nor a host name that can be resolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "parser": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.carbonreceiver.protocol.Config",
                    "description": "Parser specifies a parser and the respective configuration to be used\nby the receiver.",
                    "title": "parser"
                },
                "tcp_idle_timeout": {
                    "description": "TCPIdleTimeout is the timout for idle TCP connections, it is ignored\nif transport being used is UDP.",
                    "title": "tcp_idle_timeout",
                    "type": "integer"
                },
                "transport": {
                    "description": "Transport to use. Known protocols are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only),\n\"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\".",
                    "title": "transport",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.carbonreceiver.protocol.Config": {
            "additionalProperties": false,
            "description": "Config is the general configuration for the parser to be used.",
            "properties": {
                "config": {
                    "description": "Config placeholder for the configuration object of the selected parser.",
                    "title": "config"
                },
                "type": {
                    "description": "Type of the parser to be used with the arriving data.",
                    "title": "type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.collectdreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Collectd receiver.",
            "properties": {
                "attributes_prefix": {
                    "title": "attributes_prefix",
                    "type": "string"
                },
                "encoding": {
                    "title": "encoding",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nThe address has the form \"host:port\". The host must be a literal IP address, or a host name that can be\nresolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "timeout": {
                    "title": "timeout",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines the configuration for the various elements of the receiver agent.",
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "password": {
                    "title": "password",
                    "type": "string"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "username": {
                    "title": "username",
                    "type": "string"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for couchdb metrics.",
            "properties": {
                "couchdb.average_request_time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.MetricConfig",
                    "title": "couchdb.average_request_time"
                },
                "couchdb.database.open": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.MetricConfig",
                    "title": "couchdb.database.open"
                },
                "couchdb.database.operations": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.MetricConfig",
                    "title": "couchdb.database.operations"
                },
                "couchdb.file_descriptor.open": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.MetricConfig",
                    "title": "couchdb.file_descriptor.open"
                },
                "couchdb.httpd.bulk_requests": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.MetricConfig",
                    "title": "couchdb.httpd.bulk_requests"
                },
                "couchdb.httpd.requests": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.MetricConfig",
                    "title": "couchdb.httpd.requests"
                },
                "couchdb.httpd.responses": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.MetricConfig",
                    "title": "couchdb.httpd.responses"
                },
                "couchdb.httpd.views": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.MetricConfig",
                    "title": "couchdb.httpd.views"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for couchdb resource attributes.",
            "properties": {
                "couchdb.node.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "couchdb.node.name"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "api_version": {
                    "description": "Docker client API version. Default is 1.22",
                    "title": "api_version",
                    "type": "number"
                },
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "container_labels_to_metric_labels": {
                    "description": "A mapping of container label names to MetricDescriptor label keys.\nThe corresponding container label value will become the DataPoint label value\nfor the mapped name.  E.g. `io.kubernetes.container.name: container_spec_name`\nwould result in a MetricDescriptor label called `container_spec_name` whose\nMetric DataPoints have the value of the `io.kubernetes.container.name` container label.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "container_labels_to_metric_labels",
                    "type": "object"
                },
                "endpoint": {
                    "description": "The URL of the docker server.  Default is \"unix:///var/run/docker.sock\"",
                    "title": "endpoint",
                    "type": "string"
                },
                "env_vars_to_metric_labels": {
                    "description": "A mapping of container environment variable names to MetricDescriptor label\nkeys.  The corresponding env var values become the DataPoint label value.\nE.g. `APP_VERSION: version` would result MetricDescriptors having a label\nkey called `version` whose DataPoint label values are the value of the\n`APP_VERSION` environment variable configured for that particular container, if\npresent.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "env_vars_to_metric_labels",
                    "type": "object"
                },
                "excluded_images": {
                    "description": "A list of filters whose matching images are to be excluded.  Supports literals, globs, and regex.",
                    "items": {
                        "type": "string"
                    },
                    "title": "excluded_images",
                    "type": "array"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "timeout": {
                    "description": "The maximum amount of time to wait for docker API responses.  Default is 5s",
                    "title": "timeout",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for docker_stats metrics.",
            "properties": {
                "container.blockio.io_merged_recursive": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.blockio.io_merged_recursive"
                },
                "container.blockio.io_queued_recursive": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.blockio.io_queued_recursive"
                },
                "container.blockio.io_service_bytes_recursive": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.blockio.io_service_bytes_recursive"
                },
                "container.blockio.io_service_time_recursive": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.blockio.io_service_time_recursive"
                },
                "container.blockio.io_serviced_recursive": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.blockio.io_serviced_recursive"
                },
                "container.blockio.io_time_recursive": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.blockio.io_time_recursive"
                },
                "container.blockio.io_wait_time_recursive": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.blockio.io_wait_time_recursive"
                },
                "container.blockio.sectors_recursive": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.blockio.sectors_recursive"
                },
                "container.cpu.percent": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.cpu.percent"
                },
                "container.cpu.throttling_data.periods": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.cpu.throttling_data.periods"
                },
                "container.cpu.throttling_data.throttled_periods": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.cpu.throttling_data.throttled_periods"
                },
                "container.cpu.throttling_data.throttled_time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.cpu.throttling_data.throttled_time"
                },
                "container.cpu.usage.kernelmode": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.cpu.usage.kernelmode"
                },
                "container.cpu.usage.percpu": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.cpu.usage.percpu"
                },
                "container.cpu.usage.system": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.cpu.usage.system"
                },
                "container.cpu.usage.total": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.cpu.usage.total"
                },
                "container.cpu.usage.usermode": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.cpu.usage.usermode"
                },
                "container.cpu.utilization": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.cpu.utilization"
                },
                "container.memory.active_anon": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.active_anon"
                },
                "container.memory.active_file": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.active_file"
                },
                "container.memory.anon": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.anon"
                },
                "container.memory.cache": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.cache"
                },
                "container.memory.dirty": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.dirty"
                },
                "container.memory.file": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.file"
                },
                "container.memory.hierarchical_memory_limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.hierarchical_memory_limit"
                },
                "container.memory.hierarchical_memsw_limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.hierarchical_memsw_limit"
                },
                "container.memory.inactive_anon": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.inactive_anon"
                },
                "container.memory.inactive_file": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.inactive_file"
                },
                "container.memory.mapped_file": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.mapped_file"
                },
                "container.memory.percent": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.percent"
                },
                "container.memory.pgfault": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.pgfault"
                },
                "container.memory.pgmajfault": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.pgmajfault"
                },
                "container.memory.pgpgin": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.pgpgin"
                },
                "container.memory.pgpgout": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.pgpgout"
                },
                "container.memory.rss": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.rss"
                },
                "container.memory.rss_huge": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.rss_huge"
                },
                "container.memory.total_active_anon": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_active_anon"
                },
                "container.memory.total_active_file": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_active_file"
                },
                "container.memory.total_cache": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_cache"
                },
                "container.memory.total_dirty": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_dirty"
                },
                "container.memory.total_inactive_anon": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_inactive_anon"
                },
                "container.memory.total_inactive_file": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_inactive_file"
                },
                "container.memory.total_mapped_file": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_mapped_file"
                },
                "container.memory.total_pgfault": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_pgfault"
                },
                "container.memory.total_pgmajfault": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_pgmajfault"
                },
                "container.memory.total_pgpgin": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_pgpgin"
                },
                "container.memory.total_pgpgout": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_pgpgout"
                },
                "container.memory.total_rss": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_rss"
                },
                "container.memory.total_rss_huge": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_rss_huge"
                },
                "container.memory.total_unevictable": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_unevictable"
                },
                "container.memory.total_writeback": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.total_writeback"
                },
                "container.memory.unevictable": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.unevictable"
                },
                "container.memory.usage.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.usage.limit"
                },
                "container.memory.usage.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.usage.max"
                },
                "container.memory.usage.total": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.usage.total"
                },
                "container.memory.writeback": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.writeback"
                },
                "container.network.io.usage.rx_bytes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.network.io.usage.rx_bytes"
                },
                "container.network.io.usage.rx_dropped": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.network.io.usage.rx_dropped"
                },
                "container.network.io.usage.rx_errors": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.network.io.usage.rx_errors"
                },
                "container.network.io.usage.rx_packets": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.network.io.usage.rx_packets"
                },
                "container.network.io.usage.tx_bytes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.network.io.usage.tx_bytes"
                },
                "container.network.io.usage.tx_dropped": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.network.io.usage.tx_dropped"
                },
                "container.network.io.usage.tx_errors": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.network.io.usage.tx_errors"
                },
                "container.network.io.usage.tx_packets": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.network.io.usage.tx_packets"
                },
                "container.pids.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.pids.count"
                },
                "container.pids.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.pids.limit"
                },
                "container.uptime": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.uptime"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for docker_stats resource attributes.",
            "properties": {
                "container.command_line": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "container.command_line"
                },
                "container.hostname": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "container.hostname"
                },
                "container.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "container.id"
                },
                "container.image.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "container.image.id"
                },
                "container.image.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "container.image.name"
                },
                "container.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "container.name"
                },
                "container.runtime": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "container.runtime"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dotnetdiagnosticsreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "counters": {
                    "items": {
                        "type": "string"
                    },
                    "title": "counters",
                    "type": "array"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "local_debug_dir": {
                    "title": "local_debug_dir",
                    "type": "string"
                },
                "max_local_debug_files": {
                    "title": "max_local_debug_files",
                    "type": "integer"
                },
                "pid": {
                    "title": "pid",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.Config": {
            "additionalProperties": false,
            "description": "Config is the configuration for the elasticsearch receiver",
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "indices": {
                    "description": "Indices defines the indices to scrape.\nSee https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-stats.html#index-stats-api-path-params\nfor which names are viable.\nIf Indices is empty, no indices will be scraped.",
                    "items": {
                        "type": "string"
                    },
                    "title": "indices",
                    "type": "array"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "nodes": {
                    "description": "Nodes defines the nodes to scrape.\nSee https://www.elastic.co/guide/en/elasticsearch/reference/7.9/cluster.html#cluster-nodes for which selectors may be used here.\nIf Nodes is empty, no nodes will be scraped.",
                    "items": {
                        "type": "string"
                    },
                    "title": "nodes",
                    "type": "array"
                },
                "password": {
                    "description": "Password is the password used when making REST calls to elasticsearch. Must be specified if Username is. Not required.",
                    "title": "password",
                    "type": "string"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "skip_cluster_metrics": {
                    "description": "SkipClusterMetrics indicates whether cluster level metrics from /_cluster/* endpoints should be scraped or not.",
                    "title": "skip_cluster_metrics",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "username": {
                    "description": "Username is the username used when making REST calls to elasticsearch. Must be specified if Password is. Not required.",
                    "title": "username",
                    "type": "string"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for elasticsearch metrics.",
            "properties": {
                "elasticsearch.breaker.memory.estimated": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.breaker.memory.estimated"
                },
                "elasticsearch.breaker.memory.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.breaker.memory.limit"
                },
                "elasticsearch.breaker.tripped": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.breaker.tripped"
                },
                "elasticsearch.cluster.data_nodes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.cluster.data_nodes"
                },
                "elasticsearch.cluster.health": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.cluster.health"
                },
                "elasticsearch.cluster.in_flight_fetch": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.cluster.in_flight_fetch"
                },
                "elasticsearch.cluster.indices.cache.evictions": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.cluster.indices.cache.evictions"
                },
                "elasticsearch.cluster.nodes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.cluster.nodes"
                },
                "elasticsearch.cluster.pending_tasks": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.cluster.pending_tasks"
                },
                "elasticsearch.cluster.published_states.differences": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.cluster.published_states.differences"
                },
                "elasticsearch.cluster.published_states.full": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.cluster.published_states.full"
                },
                "elasticsearch.cluster.shards": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.cluster.shards"
                },
                "elasticsearch.cluster.state_queue": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.cluster.state_queue"
                },
                "elasticsearch.cluster.state_update.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.cluster.state_update.count"
                },
                "elasticsearch.cluster.state_update.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.cluster.state_update.time"
                },
                "elasticsearch.index.cache.evictions": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.cache.evictions"
                },
                "elasticsearch.index.cache.memory.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.cache.memory.usage"
                },
                "elasticsearch.index.cache.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.cache.size"
                },
                "elasticsearch.index.documents": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.documents"
                },
                "elasticsearch.index.operations.completed": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.operations.completed"
                },
                "elasticsearch.index.operations.merge.docs_count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.operations.merge.docs_count"
                },
                "elasticsearch.index.operations.merge.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.operations.merge.size"
                },
                "elasticsearch.index.operations.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.operations.time"
                },
                "elasticsearch.index.segments.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.segments.count"
                },
                "elasticsearch.index.segments.memory": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.segments.memory"
                },
                "elasticsearch.index.segments.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.segments.size"
                },
                "elasticsearch.index.shards.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.shards.size"
                },
                "elasticsearch.index.translog.operations": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.translog.operations"
                },
                "elasticsearch.index.translog.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.index.translog.size"
                },
                "elasticsearch.indexing_pressure.memory.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.indexing_pressure.memory.limit"
                },
                "elasticsearch.indexing_pressure.memory.total.primary_rejections": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.indexing_pressure.memory.total.primary_rejections"
                },
                "elasticsearch.indexing_pressure.memory.total.replica_rejections": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.indexing_pressure.memory.total.replica_rejections"
                },
                "elasticsearch.memory.indexing_pressure": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.memory.indexing_pressure"
                },
                "elasticsearch.node.cache.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.cache.count"
                },
                "elasticsearch.node.cache.evictions": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.cache.evictions"
                },
                "elasticsearch.node.cache.memory.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.cache.memory.usage"
                },
                "elasticsearch.node.cache.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.cache.size"
                },
                "elasticsearch.node.cluster.connections": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.cluster.connections"
                },
                "elasticsearch.node.cluster.io": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.cluster.io"
                },
                "elasticsearch.node.disk.io.read": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.disk.io.read"
                },
                "elasticsearch.node.disk.io.write": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.disk.io.write"
                },
                "elasticsearch.node.documents": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.documents"
                },
                "elasticsearch.node.fs.disk.available": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.fs.disk.available"
                },
                "elasticsearch.node.fs.disk.free": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.fs.disk.free"
                },
                "elasticsearch.node.fs.disk.total": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.fs.disk.total"
                },
                "elasticsearch.node.http.connections": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.http.connections"
                },
                "elasticsearch.node.ingest.documents": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.ingest.documents"
                },
                "elasticsearch.node.ingest.documents.current": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.ingest.documents.current"
                },
                "elasticsearch.node.ingest.operations.failed": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.ingest.operations.failed"
                },
                "elasticsearch.node.open_files": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.open_files"
                },
                "elasticsearch.node.operations.completed": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.operations.completed"
                },
                "elasticsearch.node.operations.current": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.operations.current"
                },
                "elasticsearch.node.operations.get.completed": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.operations.get.completed"
                },
                "elasticsearch.node.operations.get.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.operations.get.time"
                },
                "elasticsearch.node.operations.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.operations.time"
                },
                "elasticsearch.node.pipeline.ingest.documents.current": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.pipeline.ingest.documents.current"
                },
                "elasticsearch.node.pipeline.ingest.documents.preprocessed": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.pipeline.ingest.documents.preprocessed"
                },
                "elasticsearch.node.pipeline.ingest.operations.failed": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.pipeline.ingest.operations.failed"
                },
                "elasticsearch.node.script.cache_evictions": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.script.cache_evictions"
                },
                "elasticsearch.node.script.compilation_limit_triggered": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.script.compilation_limit_triggered"
                },
                "elasticsearch.node.script.compilations": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.script.compilations"
                },
                "elasticsearch.node.segments.memory": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.segments.memory"
                },
                "elasticsearch.node.shards.data_set.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.shards.data_set.size"
                },
                "elasticsearch.node.shards.reserved.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.shards.reserved.size"
                },
                "elasticsearch.node.shards.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.shards.size"
                },
                "elasticsearch.node.thread_pool.tasks.finished": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.thread_pool.tasks.finished"
                },
                "elasticsearch.node.thread_pool.tasks.queued": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.thread_pool.tasks.queued"
                },
                "elasticsearch.node.thread_pool.threads": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.thread_pool.threads"
                },
                "elasticsearch.node.translog.operations": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.translog.operations"
                },
                "elasticsearch.node.translog.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.translog.size"
                },
                "elasticsearch.node.translog.uncommitted.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.node.translog.uncommitted.size"
                },
                "elasticsearch.os.cpu.load_avg.15m": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.os.cpu.load_avg.15m"
                },
                "elasticsearch.os.cpu.load_avg.1m": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.os.cpu.load_avg.1m"
                },
                "elasticsearch.os.cpu.load_avg.5m": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.os.cpu.load_avg.5m"
                },
                "elasticsearch.os.cpu.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.os.cpu.usage"
                },
                "elasticsearch.os.memory": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.os.memory"
                },
                "elasticsearch.process.cpu.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.process.cpu.time"
                },
                "elasticsearch.process.cpu.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.process.cpu.usage"
                },
                "elasticsearch.process.memory.virtual": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "elasticsearch.process.memory.virtual"
                },
                "jvm.classes.loaded": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "jvm.classes.loaded"
                },
                "jvm.gc.collections.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "jvm.gc.collections.count"
                },
                "jvm.gc.collections.elapsed": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "jvm.gc.collections.elapsed"
                },
                "jvm.memory.heap.committed": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "jvm.memory.heap.committed"
                },
                "jvm.memory.heap.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "jvm.memory.heap.max"
                },
                "jvm.memory.heap.used": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "jvm.memory.heap.used"
                },
                "jvm.memory.heap.utilization": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "jvm.memory.heap.utilization"
                },
                "jvm.memory.nonheap.committed": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "jvm.memory.nonheap.committed"
                },
                "jvm.memory.nonheap.used": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "jvm.memory.nonheap.used"
                },
                "jvm.memory.pool.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "jvm.memory.pool.max"
                },
                "jvm.memory.pool.used": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "jvm.memory.pool.used"
                },
                "jvm.threads.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.MetricConfig",
                    "title": "jvm.threads.count"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for elasticsearch resource attributes.",
            "properties": {
                "elasticsearch.cluster.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "elasticsearch.cluster.name"
                },
                "elasticsearch.index.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "elasticsearch.index.name"
                },
                "elasticsearch.node.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "elasticsearch.node.name"
                },
                "elasticsearch.node.version": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "elasticsearch.node.version"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.filelogreceiver.FileLogConfig": {
            "additionalProperties": false,
            "description": "FileLogConfig defines configuration for the filelog receiver",
            "properties": {
                "attributes": {
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "delete_after_read": {
                    "title": "delete_after_read",
                    "type": "boolean"
                },
                "encoding": {
                    "title": "encoding",
                    "type": "string"
                },
                "exclude": {
                    "items": {
                        "type": "string"
                    },
                    "title": "exclude",
                    "type": "array"
                },
                "fingerprint_size": {
                    "title": "fingerprint_size",
                    "type": "integer"
                },
                "force_flush_period": {
                    "title": "force_flush_period",
                    "type": "integer"
                },
                "header": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.fileconsumer.HeaderConfig",
                    "title": "header"
                },
                "id": {
                    "title": "id",
                    "type": "string"
                },
                "include": {
                    "items": {
                        "type": "string"
                    },
                    "title": "include",
                    "type": "array"
                },
                "include_file_name": {
                    "title": "include_file_name",
                    "type": "boolean"
                },
                "include_file_name_resolved": {
                    "title": "include_file_name_resolved",
                    "type": "boolean"
                },
                "include_file_path": {
                    "title": "include_file_path",
                    "type": "boolean"
                },
                "include_file_path_resolved": {
                    "title": "include_file_path_resolved",
                    "type": "boolean"
                },
                "max_batches": {
                    "title": "max_batches",
                    "type": "integer"
                },
                "max_concurrent_files": {
                    "title": "max_concurrent_files",
                    "type": "integer"
                },
                "max_log_size": {
                    "title": "max_log_size",
                    "type": "integer"
                },
                "multiline": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.helper.MultilineConfig",
                    "title": "multiline"
                },
                "operators": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.Config"
                    },
                    "title": "operators",
                    "type": "array"
                },
                "ordering_criteria": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.fileconsumer.OrderingCriteria",
                    "title": "ordering_criteria"
                },
                "output": {
                    "items": {
                        "type": "string"
                    },
                    "title": "output",
                    "type": "array"
                },
                "poll_interval": {
                    "title": "poll_interval",
                    "type": "integer"
                },
                "preserve_leading_whitespaces": {
                    "title": "preserve_leading_whitespaces",
                    "type": "boolean"
                },
                "preserve_trailing_whitespaces": {
                    "title": "preserve_trailing_whitespaces",
                    "type": "boolean"
                },
                "resource": {
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "resource",
                    "type": "object"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.coreinternal.consumerretry.Config",
                    "title": "retry_on_failure"
                },
                "start_at": {
                    "title": "start_at",
                    "type": "string"
                },
                "storage": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID",
                    "title": "storage"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.fluentforwardreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for the fluentforward receiver.",
            "properties": {
                "endpoint": {
                    "description": "The address to listen on for incoming Fluent Forward events.  Should be\nof the form `\u003cip addr\u003e:\u003cport\u003e` (TCP) or `unix://\u003csocket_path\u003e` (Unix\ndomain socket).",
                    "title": "endpoint",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.hostmetricsreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for HostMetrics receiver.",
            "properties": {
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "root_path": {
                    "description": "RootPath is the host's root directory (linux only).",
                    "title": "root_path",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.httpcheckreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines the configuration for the various elements of the receiver agent.",
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "method": {
                    "title": "method",
                    "type": "string"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.httpcheckreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.httpcheckreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.httpcheckreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for httpcheck metrics.",
            "properties": {
                "httpcheck.duration": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.httpcheckreceiver.internal.metadata.MetricConfig",
                    "title": "httpcheck.duration"
                },
                "httpcheck.error": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.httpcheckreceiver.internal.metadata.MetricConfig",
                    "title": "httpcheck.error"
                },
                "httpcheck.status": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.httpcheckreceiver.internal.metadata.MetricConfig",
                    "title": "httpcheck.status"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jaegerreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Jaeger receiver.",
            "properties": {
                "protocols": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jaegerreceiver.Protocols",
                    "title": "protocols"
                },
                "remote_sampling": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jaegerreceiver.RemoteSamplingConfig",
                    "title": "remote_sampling"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jaegerreceiver.ProtocolUDP": {
            "additionalProperties": false,
            "description": "ProtocolUDP is the configuration for a UDP protocol.",
            "properties": {
                "endpoint": {
                    "title": "endpoint",
                    "type": "string"
                },
                "max_packet_size": {
                    "title": "max_packet_size",
                    "type": "integer"
                },
                "queue_size": {
                    "title": "queue_size",
                    "type": "integer"
                },
                "socket_buffer_size": {
                    "title": "socket_buffer_size",
                    "type": "integer"
                },
                "workers": {
                    "title": "workers",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jaegerreceiver.Protocols": {
            "additionalProperties": false,
            "description": "Protocols is the configuration for the supported protocols.",
            "properties": {
                "grpc": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configgrpc.GRPCServerSettings",
                    "title": "grpc"
                },
                "thrift_binary": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jaegerreceiver.ProtocolUDP",
                    "title": "thrift_binary"
                },
                "thrift_compact": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jaegerreceiver.ProtocolUDP",
                    "title": "thrift_compact"
                },
                "thrift_http": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.confighttp.HTTPServerSettings",
                    "title": "thrift_http"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jaegerreceiver.RemoteSamplingConfig": {
            "additionalProperties": false,
            "description": "RemoteSamplingConfig defines config key for remote sampling fetch endpoint",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing RPCs.",
                    "title": "auth"
                },
                "balancer_name": {
                    "description": "Sets the balancer in grpclb_policy to discover the servers. Default is pick_first.\nhttps://github.com/grpc/grpc-go/blob/master/examples/features/load_balancing/README.md",
                    "title": "balancer_name",
                    "type": "string"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target to which the exporter is going to send traces or metrics,\nusing the gRPC protocol. The valid syntax is described at\nhttps://github.com/grpc/grpc/blob/master/doc/naming.md.",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "The headers associated with gRPC requests.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "host_endpoint": {
                    "title": "host_endpoint",
                    "type": "string"
                },
                "keepalive": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configgrpc.KeepaliveClientConfig",
                    "description": "The keepalive parameters for gRPC client. See grpc.WithKeepaliveParams.\n(https://godoc.org/google.golang.org/grpc#WithKeepaliveParams).",
                    "title": "keepalive"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for gRPC client. See grpc.WithReadBufferSize.\n(https://godoc.org/google.golang.org/grpc#WithReadBufferSize).",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "strategy_file": {
                    "title": "strategy_file",
                    "type": "string"
                },
                "strategy_file_reload_interval": {
                    "title": "strategy_file_reload_interval",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "wait_for_ready": {
                    "description": "WaitForReady parameter configures client to wait for ready state before sending data.\n(https://github.com/grpc/grpc/blob/master/doc/wait-for-ready.md)",
                    "title": "wait_for_ready",
                    "type": "boolean"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for gRPC gRPC. See grpc.WithWriteBufferSize.\n(https://godoc.org/google.golang.org/grpc#WithWriteBufferSize).",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jmxreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "additional_jars": {
                    "description": "Array of additional JARs to be added to the the class path when launching the JMX Metric Gatherer JAR",
                    "items": {
                        "type": "string"
                    },
                    "title": "additional_jars",
                    "type": "array"
                },
                "collection_interval": {
                    "description": "The duration in between groovy script invocations and metric exports (10 seconds by default).\nWill be converted to milliseconds.",
                    "title": "collection_interval",
                    "type": "integer"
                },
                "endpoint": {
                    "description": "The Service URL or host:port for the target coerced to one of form: service:jmx:rmi:///jndi/rmi://\u003chost\u003e:\u003cport\u003e/jmxrmi.",
                    "title": "endpoint",
                    "type": "string"
                },
                "jar_path": {
                    "description": "The path for the JMX Metric Gatherer uber JAR (/opt/opentelemetry-java-contrib-jmx-metrics.jar by default).",
                    "title": "jar_path",
                    "type": "string"
                },
                "keystore_password": {
                    "description": "The keystore password for SSL",
                    "title": "keystore_password",
                    "type": "string"
                },
                "keystore_path": {
                    "description": "The keystore path for SSL",
                    "title": "keystore_path",
                    "type": "string"
                },
                "keystore_type": {
                    "description": "The keystore type for SSL",
                    "title": "keystore_type",
                    "type": "string"
                },
                "log_level": {
                    "description": "Log level used by the JMX metric gatherer. Should be one of:\n`\"trace\"`, `\"debug\"`, `\"info\"`, `\"warn\"`, `\"error\"`, `\"off\"`",
                    "title": "log_level",
                    "type": "string"
                },
                "otlp": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jmxreceiver.otlpExporterConfig",
                    "description": "The exporter settings for",
                    "title": "otlp"
                },
                "password": {
                    "description": "The JMX password",
                    "title": "password",
                    "type": "string"
                },
                "realm": {
                    "description": "The SASL/DIGEST-MD5 realm",
                    "title": "realm",
                    "type": "string"
                },
                "remote_profile": {
                    "description": "The JMX remote profile.  Should be one of:\n`\"SASL/PLAIN\"`, `\"SASL/DIGEST-MD5\"`, `\"SASL/CRAM-MD5\"`, `\"TLS SASL/PLAIN\"`, `\"TLS SASL/DIGEST-MD5\"`, or\n`\"TLS SASL/CRAM-MD5\"`, though no enforcement is applied.",
                    "title": "remote_profile",
                    "type": "string"
                },
                "resource_attributes": {
                    "description": "Map of resource attributes used by the Java SDK Autoconfigure to set resource attributes",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "resource_attributes",
                    "type": "object"
                },
                "target_system": {
                    "description": "The target system for the metric gatherer whose built in groovy script to run.",
                    "title": "target_system",
                    "type": "string"
                },
                "truststore_password": {
                    "description": "The truststore password for SSL",
                    "title": "truststore_password",
                    "type": "string"
                },
                "truststore_path": {
                    "description": "The truststore path for SSL",
                    "title": "truststore_path",
                    "type": "string"
                },
                "truststore_type": {
                    "description": "The truststore type for SSL",
                    "title": "truststore_type",
                    "type": "string"
                },
                "username": {
                    "description": "The JMX username",
                    "title": "username",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jmxreceiver.otlpExporterConfig": {
            "additionalProperties": false,
            "properties": {
                "endpoint": {
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "timeout": {
                    "description": "Timeout is the timeout for every attempt to send data to the backend.",
                    "title": "timeout",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.journaldreceiver.JournaldConfig": {
            "additionalProperties": false,
            "properties": {
                "operators": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.Config"
                    },
                    "title": "operators",
                    "type": "array"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.coreinternal.consumerretry.Config",
                    "title": "retry_on_failure"
                },
                "storage": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID",
                    "title": "storage"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.k8sclusterreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for kubernetes cluster receiver.",
            "properties": {
                "allocatable_types_to_report": {
                    "description": "Allocate resource types to report. See all resource types, see\nhere: https://kubernetes.io/docs/concepts/architecture/nodes/#capacity",
                    "items": {
                        "type": "string"
                    },
                    "title": "allocatable_types_to_report",
                    "type": "array"
                },
                "auth_type": {
                    "description": "How to authenticate to the K8s API server.  This can be one of `none`\n(for no auth), `serviceAccount` (to use the standard service account\ntoken provided to the agent pod), or `kubeConfig` to use credentials\nfrom `~/.kube/config`.",
                    "title": "auth_type",
                    "type": "string"
                },
                "collection_interval": {
                    "description": "Collection interval for metrics.",
                    "title": "collection_interval",
                    "type": "integer"
                },
                "distribution": {
                    "description": "Whether OpenShift supprot should be enabled or not.",
                    "title": "distribution",
                    "type": "string"
                },
                "metadata_exporters": {
                    "description": "List of exporters to which metadata from this receiver should be forwarded to.",
                    "items": {
                        "type": "string"
                    },
                    "title": "metadata_exporters",
                    "type": "array"
                },
                "node_conditions_to_report": {
                    "description": "Node condition types to report. See all condition types, see\nhere: https://kubernetes.io/docs/concepts/architecture/nodes/#condition.",
                    "items": {
                        "type": "string"
                    },
                    "title": "node_conditions_to_report",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.k8seventsreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for kubernetes events receiver.",
            "properties": {
                "auth_type": {
                    "description": "How to authenticate to the K8s API server.  This can be one of `none`\n(for no auth), `serviceAccount` (to use the standard service account\ntoken provided to the agent pod), or `kubeConfig` to use credentials\nfrom `~/.kube/config`.",
                    "title": "auth_type",
                    "type": "string"
                },
                "namespaces": {
                    "description": "List of ‘namespaces’ to collect events from.",
                    "items": {
                        "type": "string"
                    },
                    "title": "namespaces",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.k8sobjectsreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "auth_type": {
                    "description": "How to authenticate to the K8s API server.  This can be one of `none`\n(for no auth), `serviceAccount` (to use the standard service account\ntoken provided to the agent pod), or `kubeConfig` to use credentials\nfrom `~/.kube/config`.",
                    "title": "auth_type",
                    "type": "string"
                },
                "objects": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.k8sobjectsreceiver.K8sObjectsConfig"
                    },
                    "title": "objects",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.k8sobjectsreceiver.K8sObjectsConfig": {
            "additionalProperties": false,
            "properties": {
                "field_selector": {
                    "title": "field_selector",
                    "type": "string"
                },
                "group": {
                    "title": "group",
                    "type": "string"
                },
                "interval": {
                    "title": "interval",
                    "type": "integer"
                },
                "label_selector": {
                    "title": "label_selector",
                    "type": "string"
                },
                "mode": {
                    "title": "mode",
                    "type": "string"
                },
                "name": {
                    "title": "name",
                    "type": "string"
                },
                "namespaces": {
                    "items": {
                        "type": "string"
                    },
                    "title": "namespaces",
                    "type": "array"
                },
                "resource_version": {
                    "title": "resource_version",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.Config": {
            "additionalProperties": false,
            "description": "Config represents user settings for kafkametrics receiver",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.Authentication",
                    "description": "Authentication data",
                    "title": "auth"
                },
                "brokers": {
                    "description": "The list of kafka brokers (default localhost:9092)",
                    "items": {
                        "type": "string"
                    },
                    "title": "brokers",
                    "type": "array"
                },
                "client_id": {
                    "description": "ClientID is the id associated with the consumer that reads from topics in kafka.",
                    "title": "client_id",
                    "type": "string"
                },
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "group_match": {
                    "description": "GroupMatch consumer groups to collect on",
                    "title": "group_match",
                    "type": "string"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "protocol_version": {
                    "description": "ProtocolVersion Kafka protocol version",
                    "title": "protocol_version",
                    "type": "string"
                },
                "scrapers": {
                    "description": "Scrapers defines which metric data points to be captured from kafka",
                    "items": {
                        "type": "string"
                    },
                    "title": "scrapers",
                    "type": "array"
                },
                "topic_match": {
                    "description": "TopicMatch topics to collect metrics on",
                    "title": "topic_match",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for kafkametrics metrics.",
            "properties": {
                "kafka.brokers": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricConfig",
                    "title": "kafka.brokers"
                },
                "kafka.consumer_group.lag": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricConfig",
                    "title": "kafka.consumer_group.lag"
                },
                "kafka.consumer_group.lag_sum": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricConfig",
                    "title": "kafka.consumer_group.lag_sum"
                },
                "kafka.consumer_group.members": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricConfig",
                    "title": "kafka.consumer_group.members"
                },
                "kafka.consumer_group.offset": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricConfig",
                    "title": "kafka.consumer_group.offset"
                },
                "kafka.consumer_group.offset_sum": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricConfig",
                    "title": "kafka.consumer_group.offset_sum"
                },
                "kafka.partition.current_offset": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricConfig",
                    "title": "kafka.partition.current_offset"
                },
                "kafka.partition.oldest_offset": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricConfig",
                    "title": "kafka.partition.oldest_offset"
                },
                "kafka.partition.replicas": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricConfig",
                    "title": "kafka.partition.replicas"
                },
                "kafka.partition.replicas_in_sync": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricConfig",
                    "title": "kafka.partition.replicas_in_sync"
                },
                "kafka.topic.partitions": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.internal.metadata.MetricConfig",
                    "title": "kafka.topic.partitions"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkareceiver.AutoCommit": {
            "additionalProperties": false,
            "properties": {
                "enable": {
                    "description": "Whether or not to auto-commit updated offsets back to the broker.\n(default enabled).",
                    "title": "enable",
                    "type": "boolean"
                },
                "interval": {
                    "description": "How frequently to commit updated offsets. Ineffective unless\nauto-commit is enabled (default 1s)",
                    "title": "interval",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkareceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Kafka receiver.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.Authentication",
                    "title": "auth"
                },
                "autocommit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkareceiver.AutoCommit",
                    "description": "Controls the auto-commit functionality",
                    "title": "autocommit"
                },
                "brokers": {
                    "description": "The list of kafka brokers (default localhost:9092)",
                    "items": {
                        "type": "string"
                    },
                    "title": "brokers",
                    "type": "array"
                },
                "client_id": {
                    "description": "The consumer client ID that receiver will use (default \"otel-collector\")",
                    "title": "client_id",
                    "type": "string"
                },
                "encoding": {
                    "description": "Encoding of the messages (default \"otlp_proto\")",
                    "title": "encoding",
                    "type": "string"
                },
                "group_id": {
                    "description": "The consumer group that receiver will be consuming messages from (default \"otel-collector\")",
                    "title": "group_id",
                    "type": "string"
                },
                "initial_offset": {
                    "description": "The initial offset to use if no offset was previously committed.\nMust be `latest` or `earliest` (default \"latest\").",
                    "title": "initial_offset",
                    "type": "string"
                },
                "message_marking": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkareceiver.MessageMarking",
                    "description": "Controls the way the messages are marked as consumed",
                    "title": "message_marking"
                },
                "metadata": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.Metadata",
                    "description": "Metadata is the namespace for metadata management properties used by the\nClient, and shared by the Producer/Consumer.",
                    "title": "metadata"
                },
                "protocol_version": {
                    "description": "Kafka protocol version",
                    "title": "protocol_version",
                    "type": "string"
                },
                "topic": {
                    "description": "The name of the kafka topic to consume from (default \"otlp_spans\")",
                    "title": "topic",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkareceiver.MessageMarking": {
            "additionalProperties": false,
            "properties": {
                "after": {
                    "description": "If true, the messages are marked after the pipeline execution",
                    "title": "after",
                    "type": "boolean"
                },
                "on_error": {
                    "description": "If false, only the successfully processed messages are marked, it has no impact if\nAfter is set to false.\nNote: this can block the entire partition in case a message processing returns\na permanent error.",
                    "title": "on_error",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "auth_type": {
                    "description": "How to authenticate to the K8s API server.  This can be one of `none`\n(for no auth), `serviceAccount` (to use the standard service account\ntoken provided to the agent pod), or `kubeConfig` to use credentials\nfrom `~/.kube/config`.",
                    "title": "auth_type",
                    "type": "string"
                },
                "ca_file": {
                    "description": "Path to the CA cert. For a client this verifies the server certificate.\nFor a server this verifies client certificates. If empty uses system root CA.\n(optional)",
                    "title": "ca_file",
                    "type": "string"
                },
                "ca_pem": {
                    "description": "In memory PEM encoded cert. (optional)",
                    "title": "ca_pem",
                    "type": "string"
                },
                "cert_file": {
                    "description": "Path to the TLS cert to use for TLS required connections. (optional)",
                    "title": "cert_file",
                    "type": "string"
                },
                "cert_pem": {
                    "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
                    "title": "cert_pem",
                    "type": "string"
                },
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nThe address has the form \"host:port\". The host must be a literal IP address, or a host name that can be\nresolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "extra_metadata_labels": {
                    "description": "ExtraMetadataLabels contains list of extra metadata that should be taken from /pods endpoint\nand put as extra labels on metrics resource.\nNo additional metadata is fetched by default, so there are no extra calls to /pods endpoint.\nSupported values include container.id and k8s.volume.type.",
                    "items": {
                        "type": "string"
                    },
                    "title": "extra_metadata_labels",
                    "type": "array"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "insecure_skip_verify": {
                    "description": "InsecureSkipVerify controls whether the client verifies the server's\ncertificate chain and host name.",
                    "title": "insecure_skip_verify",
                    "type": "boolean"
                },
                "k8s_api_config": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.k8sconfig.APIConfig",
                    "description": "Configuration of the Kubernetes API client.",
                    "title": "k8s_api_config"
                },
                "key_file": {
                    "description": "Path to the TLS key to use for TLS required connections. (optional)",
                    "title": "key_file",
                    "type": "string"
                },
                "key_pem": {
                    "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
                    "title": "key_pem",
                    "type": "string"
                },
                "max_version": {
                    "description": "MaxVersion sets the maximum TLS version that is acceptable.\nIf not set, refer to crypto/tls for defaults. (optional)",
                    "title": "max_version",
                    "type": "string"
                },
                "metric_groups": {
                    "description": "MetricGroupsToCollect provides a list of metrics groups to collect metrics from.\n\"container\", \"pod\", \"node\" and \"volume\" are the only valid groups.",
                    "items": {
                        "type": "string"
                    },
                    "title": "metric_groups",
                    "type": "array"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "min_version": {
                    "description": "MinVersion sets the minimum TLS version that is acceptable.\nIf not set, TLS 1.2 will be used. (optional)",
                    "title": "min_version",
                    "type": "string"
                },
                "reload_interval": {
                    "description": "ReloadInterval specifies the duration after which the certificate will be reloaded\nIf not set, it will never be reloaded (optional)",
                    "title": "reload_interval",
                    "type": "integer"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for kubeletstats metrics.",
            "properties": {
                "container.cpu.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.cpu.time"
                },
                "container.cpu.utilization": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.cpu.utilization"
                },
                "container.filesystem.available": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.filesystem.available"
                },
                "container.filesystem.capacity": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.filesystem.capacity"
                },
                "container.filesystem.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.filesystem.usage"
                },
                "container.memory.available": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.available"
                },
                "container.memory.major_page_faults": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.major_page_faults"
                },
                "container.memory.page_faults": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.page_faults"
                },
                "container.memory.rss": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.rss"
                },
                "container.memory.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.usage"
                },
                "container.memory.working_set": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "container.memory.working_set"
                },
                "k8s.node.cpu.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.cpu.time"
                },
                "k8s.node.cpu.utilization": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.cpu.utilization"
                },
                "k8s.node.filesystem.available": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.filesystem.available"
                },
                "k8s.node.filesystem.capacity": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.filesystem.capacity"
                },
                "k8s.node.filesystem.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.filesystem.usage"
                },
                "k8s.node.memory.available": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.memory.available"
                },
                "k8s.node.memory.major_page_faults": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.memory.major_page_faults"
                },
                "k8s.node.memory.page_faults": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.memory.page_faults"
                },
                "k8s.node.memory.rss": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.memory.rss"
                },
                "k8s.node.memory.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.memory.usage"
                },
                "k8s.node.memory.working_set": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.memory.working_set"
                },
                "k8s.node.network.errors": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.network.errors"
                },
                "k8s.node.network.io": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.node.network.io"
                },
                "k8s.pod.cpu.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.cpu.time"
                },
                "k8s.pod.cpu.utilization": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.cpu.utilization"
                },
                "k8s.pod.filesystem.available": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.filesystem.available"
                },
                "k8s.pod.filesystem.capacity": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.filesystem.capacity"
                },
                "k8s.pod.filesystem.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.filesystem.usage"
                },
                "k8s.pod.memory.available": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.memory.available"
                },
                "k8s.pod.memory.major_page_faults": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.memory.major_page_faults"
                },
                "k8s.pod.memory.page_faults": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.memory.page_faults"
                },
                "k8s.pod.memory.rss": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.memory.rss"
                },
                "k8s.pod.memory.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.memory.usage"
                },
                "k8s.pod.memory.working_set": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.memory.working_set"
                },
                "k8s.pod.network.errors": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.network.errors"
                },
                "k8s.pod.network.io": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.pod.network.io"
                },
                "k8s.volume.available": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.volume.available"
                },
                "k8s.volume.capacity": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.volume.capacity"
                },
                "k8s.volume.inodes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.volume.inodes"
                },
                "k8s.volume.inodes.free": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.volume.inodes.free"
                },
                "k8s.volume.inodes.used": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.MetricConfig",
                    "title": "k8s.volume.inodes.used"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for kubeletstats resource attributes.",
            "properties": {
                "aws.volume.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "aws.volume.id"
                },
                "container.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "container.id"
                },
                "fs.type": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "fs.type"
                },
                "gce.pd.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "gce.pd.name"
                },
                "glusterfs.endpoints.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "glusterfs.endpoints.name"
                },
                "glusterfs.path": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "glusterfs.path"
                },
                "k8s.container.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "k8s.container.name"
                },
                "k8s.namespace.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "k8s.namespace.name"
                },
                "k8s.node.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "k8s.node.name"
                },
                "k8s.persistentvolumeclaim.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "k8s.persistentvolumeclaim.name"
                },
                "k8s.pod.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "k8s.pod.name"
                },
                "k8s.pod.uid": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "k8s.pod.uid"
                },
                "k8s.volume.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "k8s.volume.name"
                },
                "k8s.volume.type": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "k8s.volume.type"
                },
                "partition": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "partition"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nFor TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address,\nor a host name that can be resolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "timeout": {
                    "description": "Timeout for the memcache stats request",
                    "title": "timeout",
                    "type": "integer"
                },
                "transport": {
                    "description": "Transport to use. Known protocols are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only),\n\"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\".",
                    "title": "transport",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for memcached metrics.",
            "properties": {
                "memcached.bytes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricConfig",
                    "title": "memcached.bytes"
                },
                "memcached.commands": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricConfig",
                    "title": "memcached.commands"
                },
                "memcached.connections.current": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricConfig",
                    "title": "memcached.connections.current"
                },
                "memcached.connections.total": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricConfig",
                    "title": "memcached.connections.total"
                },
                "memcached.cpu.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricConfig",
                    "title": "memcached.cpu.usage"
                },
                "memcached.current_items": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricConfig",
                    "title": "memcached.current_items"
                },
                "memcached.evictions": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricConfig",
                    "title": "memcached.evictions"
                },
                "memcached.network": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricConfig",
                    "title": "memcached.network"
                },
                "memcached.operation_hit_ratio": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricConfig",
                    "title": "memcached.operation_hit_ratio"
                },
                "memcached.operations": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricConfig",
                    "title": "memcached.operations"
                },
                "memcached.threads": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.internal.metadata.MetricConfig",
                    "title": "memcached.threads"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.AccessLogsConfig": {
            "additionalProperties": false,
            "properties": {
                "auth_result": {
                    "title": "auth_result",
                    "type": "boolean"
                },
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                },
                "max_pages": {
                    "title": "max_pages",
                    "type": "integer"
                },
                "page_size": {
                    "title": "page_size",
                    "type": "integer"
                },
                "poll_interval": {
                    "title": "poll_interval",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.AlertConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                },
                "endpoint": {
                    "title": "endpoint",
                    "type": "string"
                },
                "max_pages": {
                    "title": "max_pages",
                    "type": "integer"
                },
                "mode": {
                    "title": "mode",
                    "type": "string"
                },
                "page_size": {
                    "title": "page_size",
                    "type": "integer"
                },
                "poll_interval": {
                    "title": "poll_interval",
                    "type": "integer"
                },
                "projects": {
                    "description": "these parameters are only relevant in retrieval mode",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.ProjectConfig"
                    },
                    "title": "projects",
                    "type": "array"
                },
                "secret": {
                    "title": "secret",
                    "type": "string"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSServerSetting",
                    "title": "tls"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "alerts": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.AlertConfig",
                    "title": "alerts"
                },
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "events": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.EventsConfig",
                    "title": "events"
                },
                "granularity": {
                    "title": "granularity",
                    "type": "string"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "logs": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.LogConfig",
                    "title": "logs"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "private_key": {
                    "title": "private_key",
                    "type": "string"
                },
                "public_key": {
                    "title": "public_key",
                    "type": "string"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.RetrySettings",
                    "title": "retry_on_failure"
                },
                "storage": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID",
                    "title": "storage"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.EventsConfig": {
            "additionalProperties": false,
            "description": "EventsConfig is the configuration options for events collection",
            "properties": {
                "max_pages": {
                    "title": "max_pages",
                    "type": "integer"
                },
                "organizations": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.OrgConfig"
                    },
                    "title": "organizations",
                    "type": "array"
                },
                "page_size": {
                    "title": "page_size",
                    "type": "integer"
                },
                "poll_interval": {
                    "title": "poll_interval",
                    "type": "integer"
                },
                "projects": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.ProjectConfig"
                    },
                    "title": "projects",
                    "type": "array"
                },
                "types": {
                    "items": {
                        "type": "string"
                    },
                    "title": "types",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.LogConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                },
                "projects": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.LogsProjectConfig"
                    },
                    "title": "projects",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.LogsProjectConfig": {
            "additionalProperties": false,
            "properties": {
                "access_logs": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.AccessLogsConfig",
                    "title": "access_logs"
                },
                "collect_audit_logs": {
                    "title": "collect_audit_logs",
                    "type": "boolean"
                },
                "collect_host_logs": {
                    "title": "collect_host_logs",
                    "type": "boolean"
                },
                "exclude_clusters": {
                    "items": {
                        "type": "string"
                    },
                    "title": "exclude_clusters",
                    "type": "array"
                },
                "include_clusters": {
                    "items": {
                        "type": "string"
                    },
                    "title": "include_clusters",
                    "type": "array"
                },
                "name": {
                    "title": "name",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.OrgConfig": {
            "additionalProperties": false,
            "properties": {
                "id": {
                    "title": "id",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.ProjectConfig": {
            "additionalProperties": false,
            "properties": {
                "exclude_clusters": {
                    "items": {
                        "type": "string"
                    },
                    "title": "exclude_clusters",
                    "type": "array"
                },
                "include_clusters": {
                    "items": {
                        "type": "string"
                    },
                    "title": "include_clusters",
                    "type": "array"
                },
                "name": {
                    "title": "name",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for mongodbatlas metrics.",
            "properties": {
                "mongodbatlas.db.counts": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.db.counts"
                },
                "mongodbatlas.db.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.db.size"
                },
                "mongodbatlas.disk.partition.iops.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.disk.partition.iops.average"
                },
                "mongodbatlas.disk.partition.iops.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.disk.partition.iops.max"
                },
                "mongodbatlas.disk.partition.latency.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.disk.partition.latency.average"
                },
                "mongodbatlas.disk.partition.latency.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.disk.partition.latency.max"
                },
                "mongodbatlas.disk.partition.space.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.disk.partition.space.average"
                },
                "mongodbatlas.disk.partition.space.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.disk.partition.space.max"
                },
                "mongodbatlas.disk.partition.usage.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.disk.partition.usage.average"
                },
                "mongodbatlas.disk.partition.usage.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.disk.partition.usage.max"
                },
                "mongodbatlas.disk.partition.utilization.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.disk.partition.utilization.average"
                },
                "mongodbatlas.disk.partition.utilization.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.disk.partition.utilization.max"
                },
                "mongodbatlas.process.asserts": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.asserts"
                },
                "mongodbatlas.process.background_flush": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.background_flush"
                },
                "mongodbatlas.process.cache.io": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.cache.io"
                },
                "mongodbatlas.process.cache.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.cache.size"
                },
                "mongodbatlas.process.connections": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.connections"
                },
                "mongodbatlas.process.cpu.children.normalized.usage.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.cpu.children.normalized.usage.average"
                },
                "mongodbatlas.process.cpu.children.normalized.usage.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.cpu.children.normalized.usage.max"
                },
                "mongodbatlas.process.cpu.children.usage.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.cpu.children.usage.average"
                },
                "mongodbatlas.process.cpu.children.usage.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.cpu.children.usage.max"
                },
                "mongodbatlas.process.cpu.normalized.usage.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.cpu.normalized.usage.average"
                },
                "mongodbatlas.process.cpu.normalized.usage.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.cpu.normalized.usage.max"
                },
                "mongodbatlas.process.cpu.usage.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.cpu.usage.average"
                },
                "mongodbatlas.process.cpu.usage.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.cpu.usage.max"
                },
                "mongodbatlas.process.cursors": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.cursors"
                },
                "mongodbatlas.process.db.document.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.db.document.rate"
                },
                "mongodbatlas.process.db.operations.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.db.operations.rate"
                },
                "mongodbatlas.process.db.operations.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.db.operations.time"
                },
                "mongodbatlas.process.db.query_executor.scanned": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.db.query_executor.scanned"
                },
                "mongodbatlas.process.db.query_targeting.scanned_per_returned": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.db.query_targeting.scanned_per_returned"
                },
                "mongodbatlas.process.db.storage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.db.storage"
                },
                "mongodbatlas.process.global_lock": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.global_lock"
                },
                "mongodbatlas.process.index.btree_miss_ratio": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.index.btree_miss_ratio"
                },
                "mongodbatlas.process.index.counters": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.index.counters"
                },
                "mongodbatlas.process.journaling.commits": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.journaling.commits"
                },
                "mongodbatlas.process.journaling.data_files": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.journaling.data_files"
                },
                "mongodbatlas.process.journaling.written": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.journaling.written"
                },
                "mongodbatlas.process.memory.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.memory.usage"
                },
                "mongodbatlas.process.network.io": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.network.io"
                },
                "mongodbatlas.process.network.requests": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.network.requests"
                },
                "mongodbatlas.process.oplog.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.oplog.rate"
                },
                "mongodbatlas.process.oplog.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.oplog.time"
                },
                "mongodbatlas.process.page_faults": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.page_faults"
                },
                "mongodbatlas.process.restarts": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.restarts"
                },
                "mongodbatlas.process.tickets": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.process.tickets"
                },
                "mongodbatlas.system.cpu.normalized.usage.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.cpu.normalized.usage.average"
                },
                "mongodbatlas.system.cpu.normalized.usage.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.cpu.normalized.usage.max"
                },
                "mongodbatlas.system.cpu.usage.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.cpu.usage.average"
                },
                "mongodbatlas.system.cpu.usage.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.cpu.usage.max"
                },
                "mongodbatlas.system.fts.cpu.normalized.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.fts.cpu.normalized.usage"
                },
                "mongodbatlas.system.fts.cpu.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.fts.cpu.usage"
                },
                "mongodbatlas.system.fts.disk.used": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.fts.disk.used"
                },
                "mongodbatlas.system.fts.memory.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.fts.memory.usage"
                },
                "mongodbatlas.system.memory.usage.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.memory.usage.average"
                },
                "mongodbatlas.system.memory.usage.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.memory.usage.max"
                },
                "mongodbatlas.system.network.io.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.network.io.average"
                },
                "mongodbatlas.system.network.io.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.network.io.max"
                },
                "mongodbatlas.system.paging.io.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.paging.io.average"
                },
                "mongodbatlas.system.paging.io.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.paging.io.max"
                },
                "mongodbatlas.system.paging.usage.average": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.paging.usage.average"
                },
                "mongodbatlas.system.paging.usage.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.MetricConfig",
                    "title": "mongodbatlas.system.paging.usage.max"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for mongodbatlas resource attributes.",
            "properties": {
                "mongodb_atlas.cluster.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "mongodb_atlas.cluster.name"
                },
                "mongodb_atlas.db.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "mongodb_atlas.db.name"
                },
                "mongodb_atlas.disk.partition": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "mongodb_atlas.disk.partition"
                },
                "mongodb_atlas.host.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "mongodb_atlas.host.name"
                },
                "mongodb_atlas.org_name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "mongodb_atlas.org_name"
                },
                "mongodb_atlas.process.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "mongodb_atlas.process.id"
                },
                "mongodb_atlas.process.port": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "mongodb_atlas.process.port"
                },
                "mongodb_atlas.process.type_name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "mongodb_atlas.process.type_name"
                },
                "mongodb_atlas.project.id": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "mongodb_atlas.project.id"
                },
                "mongodb_atlas.project.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "mongodb_atlas.project.name"
                },
                "mongodb_atlas.user.alias": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "mongodb_atlas.user.alias"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "hosts": {
                    "items": {
                        "$ref": "#/$defs/go.opentelemetry.io.collector.config.confignet.NetAddr"
                    },
                    "title": "hosts",
                    "type": "array"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "password": {
                    "title": "password",
                    "type": "string"
                },
                "replica_set": {
                    "title": "replica_set",
                    "type": "string"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "timeout": {
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "title": "tls"
                },
                "username": {
                    "title": "username",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for mongodb metrics.",
            "properties": {
                "mongodb.cache.operations": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.cache.operations"
                },
                "mongodb.collection.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.collection.count"
                },
                "mongodb.connection.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.connection.count"
                },
                "mongodb.cursor.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.cursor.count"
                },
                "mongodb.cursor.timeout.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.cursor.timeout.count"
                },
                "mongodb.data.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.data.size"
                },
                "mongodb.database.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.database.count"
                },
                "mongodb.document.operation.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.document.operation.count"
                },
                "mongodb.extent.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.extent.count"
                },
                "mongodb.global_lock.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.global_lock.time"
                },
                "mongodb.health": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.health"
                },
                "mongodb.index.access.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.index.access.count"
                },
                "mongodb.index.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.index.count"
                },
                "mongodb.index.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.index.size"
                },
                "mongodb.lock.acquire.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.lock.acquire.count"
                },
                "mongodb.lock.acquire.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.lock.acquire.time"
                },
                "mongodb.lock.acquire.wait_count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.lock.acquire.wait_count"
                },
                "mongodb.lock.deadlock.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.lock.deadlock.count"
                },
                "mongodb.memory.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.memory.usage"
                },
                "mongodb.network.io.receive": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.network.io.receive"
                },
                "mongodb.network.io.transmit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.network.io.transmit"
                },
                "mongodb.network.request.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.network.request.count"
                },
                "mongodb.object.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.object.count"
                },
                "mongodb.operation.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.operation.count"
                },
                "mongodb.operation.latency.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.operation.latency.time"
                },
                "mongodb.operation.repl.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.operation.repl.count"
                },
                "mongodb.operation.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.operation.time"
                },
                "mongodb.session.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.session.count"
                },
                "mongodb.storage.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.storage.size"
                },
                "mongodb.uptime": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.MetricConfig",
                    "title": "mongodb.uptime"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for mongodb resource attributes.",
            "properties": {
                "database": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "database"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "allow_native_passwords": {
                    "title": "allow_native_passwords",
                    "type": "boolean"
                },
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "database": {
                    "title": "database",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nFor TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address,\nor a host name that can be resolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "password": {
                    "title": "password",
                    "type": "string"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "statement_events": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.StatementEventsConfig",
                    "title": "statement_events"
                },
                "transport": {
                    "description": "Transport to use. Known protocols are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only),\n\"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\".",
                    "title": "transport",
                    "type": "string"
                },
                "username": {
                    "title": "username",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.StatementEventsConfig": {
            "additionalProperties": false,
            "properties": {
                "digest_text_limit": {
                    "title": "digest_text_limit",
                    "type": "integer"
                },
                "limit": {
                    "title": "limit",
                    "type": "integer"
                },
                "time_limit": {
                    "title": "time_limit",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for mysql metrics.",
            "properties": {
                "mysql.buffer_pool.data_pages": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.buffer_pool.data_pages"
                },
                "mysql.buffer_pool.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.buffer_pool.limit"
                },
                "mysql.buffer_pool.operations": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.buffer_pool.operations"
                },
                "mysql.buffer_pool.page_flushes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.buffer_pool.page_flushes"
                },
                "mysql.buffer_pool.pages": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.buffer_pool.pages"
                },
                "mysql.buffer_pool.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.buffer_pool.usage"
                },
                "mysql.client.network.io": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.client.network.io"
                },
                "mysql.commands": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.commands"
                },
                "mysql.connection.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.connection.count"
                },
                "mysql.connection.errors": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.connection.errors"
                },
                "mysql.double_writes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.double_writes"
                },
                "mysql.handlers": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.handlers"
                },
                "mysql.index.io.wait.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.index.io.wait.count"
                },
                "mysql.index.io.wait.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.index.io.wait.time"
                },
                "mysql.joins": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.joins"
                },
                "mysql.locked_connects": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.locked_connects"
                },
                "mysql.locks": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.locks"
                },
                "mysql.log_operations": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.log_operations"
                },
                "mysql.mysqlx_connections": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.mysqlx_connections"
                },
                "mysql.mysqlx_worker_threads": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.mysqlx_worker_threads"
                },
                "mysql.opened_resources": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.opened_resources"
                },
                "mysql.operations": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.operations"
                },
                "mysql.page_operations": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.page_operations"
                },
                "mysql.prepared_statements": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.prepared_statements"
                },
                "mysql.query.client.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.query.client.count"
                },
                "mysql.query.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.query.count"
                },
                "mysql.query.slow.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.query.slow.count"
                },
                "mysql.replica.sql_delay": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.replica.sql_delay"
                },
                "mysql.replica.time_behind_source": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.replica.time_behind_source"
                },
                "mysql.row_locks": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.row_locks"
                },
                "mysql.row_operations": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.row_operations"
                },
                "mysql.sorts": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.sorts"
                },
                "mysql.statement_event.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.statement_event.count"
                },
                "mysql.statement_event.wait.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.statement_event.wait.time"
                },
                "mysql.table.io.wait.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.table.io.wait.count"
                },
                "mysql.table.io.wait.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.table.io.wait.time"
                },
                "mysql.table.lock_wait.read.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.table.lock_wait.read.count"
                },
                "mysql.table.lock_wait.read.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.table.lock_wait.read.time"
                },
                "mysql.table.lock_wait.write.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.table.lock_wait.write.count"
                },
                "mysql.table.lock_wait.write.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.table.lock_wait.write.time"
                },
                "mysql.table_open_cache": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.table_open_cache"
                },
                "mysql.threads": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.threads"
                },
                "mysql.tmp_resources": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.tmp_resources"
                },
                "mysql.uptime": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.MetricConfig",
                    "title": "mysql.uptime"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for mysql resource attributes.",
            "properties": {
                "mysql.instance.endpoint": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "mysql.instance.endpoint"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.nginxreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.nginxreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.nginxreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.nginxreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for nginx metrics.",
            "properties": {
                "nginx.connections_accepted": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.nginxreceiver.internal.metadata.MetricConfig",
                    "title": "nginx.connections_accepted"
                },
                "nginx.connections_current": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.nginxreceiver.internal.metadata.MetricConfig",
                    "title": "nginx.connections_current"
                },
                "nginx.connections_handled": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.nginxreceiver.internal.metadata.MetricConfig",
                    "title": "nginx.connections_handled"
                },
                "nginx.requests": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.nginxreceiver.internal.metadata.MetricConfig",
                    "title": "nginx.requests"
                },
                "temp.connections_current": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.nginxreceiver.internal.metadata.MetricConfig",
                    "title": "temp.connections_current"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.opencensusreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for OpenCensus receiver.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth for this receiver",
                    "title": "auth"
                },
                "cors_allowed_origins": {
                    "description": "CorsOrigins are the allowed CORS origins for HTTP/JSON requests to grpc-gateway adapter\nfor the OpenCensus receiver. See github.com/rs/cors\nAn empty list means that CORS is not enabled at all. A wildcard (*) can be\nused to match any origin or one or more characters of an origin.",
                    "items": {
                        "type": "string"
                    },
                    "title": "cors_allowed_origins",
                    "type": "array"
                },
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nFor TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address,\nor a host name that can be resolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "include_metadata": {
                    "description": "Include propagates the incoming connection's metadata to downstream consumers.\nExperimental: *NOTE* this option is subject to change or removal in the future.",
                    "title": "include_metadata",
                    "type": "boolean"
                },
                "keepalive": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configgrpc.KeepaliveServerConfig",
                    "description": "Keepalive anchor for all the settings related to keepalive.",
                    "title": "keepalive"
                },
                "max_concurrent_streams": {
                    "description": "MaxConcurrentStreams sets the limit on the number of concurrent streams to each ServerTransport.\nIt has effect only for streaming RPCs.",
                    "title": "max_concurrent_streams",
                    "type": "integer"
                },
                "max_recv_msg_size_mib": {
                    "description": "MaxRecvMsgSizeMiB sets the maximum size (in MiB) of messages accepted by the server.",
                    "title": "max_recv_msg_size_mib",
                    "type": "integer"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for gRPC server. See grpc.ReadBufferSize.\n(https://godoc.org/google.golang.org/grpc#ReadBufferSize).",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSServerSetting",
                    "description": "Configures the protocol to use TLS.\nThe default value is nil, which will cause the protocol to not use TLS.",
                    "title": "tls"
                },
                "transport": {
                    "description": "Transport to use. Known protocols are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only),\n\"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\".",
                    "title": "transport",
                    "type": "string"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for gRPC server. See grpc.WriteBufferSize.\n(https://godoc.org/google.golang.org/grpc#WriteBufferSize).",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "datasource": {
                    "title": "datasource",
                    "type": "string"
                },
                "endpoint": {
                    "title": "endpoint",
                    "type": "string"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "password": {
                    "title": "password",
                    "type": "string"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "service": {
                    "title": "service",
                    "type": "string"
                },
                "username": {
                    "title": "username",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for oracledb metrics.",
            "properties": {
                "oracledb.consistent_gets": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.consistent_gets"
                },
                "oracledb.cpu_time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.cpu_time"
                },
                "oracledb.db_block_gets": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.db_block_gets"
                },
                "oracledb.dml_locks.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.dml_locks.limit"
                },
                "oracledb.dml_locks.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.dml_locks.usage"
                },
                "oracledb.enqueue_deadlocks": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.enqueue_deadlocks"
                },
                "oracledb.enqueue_locks.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.enqueue_locks.limit"
                },
                "oracledb.enqueue_locks.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.enqueue_locks.usage"
                },
                "oracledb.enqueue_resources.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.enqueue_resources.limit"
                },
                "oracledb.enqueue_resources.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.enqueue_resources.usage"
                },
                "oracledb.exchange_deadlocks": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.exchange_deadlocks"
                },
                "oracledb.executions": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.executions"
                },
                "oracledb.hard_parses": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.hard_parses"
                },
                "oracledb.logical_reads": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.logical_reads"
                },
                "oracledb.parse_calls": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.parse_calls"
                },
                "oracledb.pga_memory": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.pga_memory"
                },
                "oracledb.physical_reads": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.physical_reads"
                },
                "oracledb.processes.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.processes.limit"
                },
                "oracledb.processes.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.processes.usage"
                },
                "oracledb.sessions.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.sessions.limit"
                },
                "oracledb.sessions.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.sessions.usage"
                },
                "oracledb.tablespace_size.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.tablespace_size.limit"
                },
                "oracledb.tablespace_size.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.tablespace_size.usage"
                },
                "oracledb.transactions.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.transactions.limit"
                },
                "oracledb.transactions.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.transactions.usage"
                },
                "oracledb.user_commits": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.user_commits"
                },
                "oracledb.user_rollbacks": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.MetricConfig",
                    "title": "oracledb.user_rollbacks"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for oracledb resource attributes.",
            "properties": {
                "oracledb.instance.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "oracledb.instance.name"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.otlpjsonfilereceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "delete_after_read": {
                    "title": "delete_after_read",
                    "type": "boolean"
                },
                "encoding": {
                    "title": "encoding",
                    "type": "string"
                },
                "exclude": {
                    "items": {
                        "type": "string"
                    },
                    "title": "exclude",
                    "type": "array"
                },
                "fingerprint_size": {
                    "title": "fingerprint_size",
                    "type": "integer"
                },
                "force_flush_period": {
                    "title": "force_flush_period",
                    "type": "integer"
                },
                "header": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.fileconsumer.HeaderConfig",
                    "title": "header"
                },
                "include": {
                    "items": {
                        "type": "string"
                    },
                    "title": "include",
                    "type": "array"
                },
                "include_file_name": {
                    "title": "include_file_name",
                    "type": "boolean"
                },
                "include_file_name_resolved": {
                    "title": "include_file_name_resolved",
                    "type": "boolean"
                },
                "include_file_path": {
                    "title": "include_file_path",
                    "type": "boolean"
                },
                "include_file_path_resolved": {
                    "title": "include_file_path_resolved",
                    "type": "boolean"
                },
                "max_batches": {
                    "title": "max_batches",
                    "type": "integer"
                },
                "max_concurrent_files": {
                    "title": "max_concurrent_files",
                    "type": "integer"
                },
                "max_log_size": {
                    "title": "max_log_size",
                    "type": "integer"
                },
                "multiline": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.helper.MultilineConfig",
                    "title": "multiline"
                },
                "ordering_criteria": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.fileconsumer.OrderingCriteria",
                    "title": "ordering_criteria"
                },
                "poll_interval": {
                    "title": "poll_interval",
                    "type": "integer"
                },
                "preserve_leading_whitespaces": {
                    "title": "preserve_leading_whitespaces",
                    "type": "boolean"
                },
                "preserve_trailing_whitespaces": {
                    "title": "preserve_trailing_whitespaces",
                    "type": "boolean"
                },
                "start_at": {
                    "title": "start_at",
                    "type": "string"
                },
                "storage": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID",
                    "title": "storage"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.podmanreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "api_version": {
                    "title": "api_version",
                    "type": "string"
                },
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "endpoint": {
                    "description": "The URL of the podman server.  Default is \"unix:///run/podman/podman.sock\"",
                    "title": "endpoint",
                    "type": "string"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "ssh_key": {
                    "title": "ssh_key",
                    "type": "string"
                },
                "ssh_passphrase": {
                    "title": "ssh_passphrase",
                    "type": "string"
                },
                "timeout": {
                    "description": "The maximum amount of time to wait for Podman API responses.  Default is 5s",
                    "title": "timeout",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "databases": {
                    "items": {
                        "type": "string"
                    },
                    "title": "databases",
                    "type": "array"
                },
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nFor TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address,\nor a host name that can be resolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "password": {
                    "title": "password",
                    "type": "string"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "title": "tls"
                },
                "transport": {
                    "description": "Transport to use. Known protocols are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only),\n\"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\".",
                    "title": "transport",
                    "type": "string"
                },
                "username": {
                    "title": "username",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for postgresql metrics.",
            "properties": {
                "postgresql.backends": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.backends"
                },
                "postgresql.bgwriter.buffers.allocated": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.bgwriter.buffers.allocated"
                },
                "postgresql.bgwriter.buffers.writes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.bgwriter.buffers.writes"
                },
                "postgresql.bgwriter.checkpoint.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.bgwriter.checkpoint.count"
                },
                "postgresql.bgwriter.duration": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.bgwriter.duration"
                },
                "postgresql.bgwriter.maxwritten": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.bgwriter.maxwritten"
                },
                "postgresql.blocks_read": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.blocks_read"
                },
                "postgresql.commits": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.commits"
                },
                "postgresql.connection.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.connection.max"
                },
                "postgresql.database.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.database.count"
                },
                "postgresql.db_size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.db_size"
                },
                "postgresql.index.scans": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.index.scans"
                },
                "postgresql.index.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.index.size"
                },
                "postgresql.operations": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.operations"
                },
                "postgresql.replication.data_delay": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.replication.data_delay"
                },
                "postgresql.rollbacks": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.rollbacks"
                },
                "postgresql.rows": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.rows"
                },
                "postgresql.table.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.table.count"
                },
                "postgresql.table.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.table.size"
                },
                "postgresql.table.vacuum.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.table.vacuum.count"
                },
                "postgresql.wal.age": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.wal.age"
                },
                "postgresql.wal.lag": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.MetricConfig",
                    "title": "postgresql.wal.lag"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for postgresql resource attributes.",
            "properties": {
                "postgresql.database.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "postgresql.database.name"
                },
                "postgresql.index.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "postgresql.index.name"
                },
                "postgresql.table.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "postgresql.table.name"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.prometheusexecreceiver.Config": {
            "additionalProperties": false,
            "description": "Config definition for prometheus_exec configuration",
            "properties": {
                "env": {
                    "description": "Env is a list of env variables to pass to a specific command",
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.prometheusexecreceiver.subprocessmanager.EnvConfig"
                    },
                    "title": "env",
                    "type": "array"
                },
                "exec": {
                    "description": "Command is the command to be run (binary + flags, separated by commas)",
                    "title": "exec",
                    "type": "string"
                },
                "port": {
                    "description": "Port is the port assigned to the Receiver, and to the {{port}} template variables",
                    "title": "port",
                    "type": "integer"
                },
                "scrape_interval": {
                    "description": "Generic receiver config\nScrapeInterval is the time between each scrape completed by the Receiver",
                    "title": "scrape_interval",
                    "type": "integer"
                },
                "scrape_timeout": {
                    "description": "ScrapeTimeout is the time to wait before throttling a scrape request",
                    "title": "scrape_timeout",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.prometheusexecreceiver.subprocessmanager.EnvConfig": {
            "additionalProperties": false,
            "description": "EnvConfig is the config definition of each key-value pair for environment variables",
            "properties": {
                "name": {
                    "description": "Name is the name of the environment variable",
                    "title": "name",
                    "type": "string"
                },
                "value": {
                    "description": "Value is the value of the variable",
                    "title": "value",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.prometheusreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Prometheus receiver.",
            "properties": {
                "buffer_count": {
                    "title": "buffer_count",
                    "type": "integer"
                },
                "buffer_period": {
                    "title": "buffer_period",
                    "type": "integer"
                },
                "config": {
                    "description": "ConfigPlaceholder is just an entry to make the configuration pass a check\nthat requires that all keys present in the config actually exist on the\nstructure, ie.: it will error if an unknown key is present.",
                    "title": "config"
                },
                "start_time_metric_regex": {
                    "title": "start_time_metric_regex",
                    "type": "string"
                },
                "target_allocator": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.prometheusreceiver.targetAllocator",
                    "title": "target_allocator"
                },
                "use_start_time_metric": {
                    "description": "UseStartTimeMetric enables retrieving the start time of all counter metrics\nfrom the process_start_time_seconds metric. This is only correct if all counters on that endpoint\nstarted after the process start time, and the process is the only actor exporting the metric after\nthe process started. It should not be used in \"exporters\" which export counters that may have\nstarted before the process itself. Use only if you know what you are doing, as this may result\nin incorrect rate calculations.",
                    "title": "use_start_time_metric",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.prometheusreceiver.targetAllocator": {
            "additionalProperties": false,
            "properties": {
                "collector_id": {
                    "title": "collector_id",
                    "type": "string"
                },
                "endpoint": {
                    "title": "endpoint",
                    "type": "string"
                },
                "http_sd_config": {
                    "title": "http_sd_config"
                },
                "interval": {
                    "title": "interval",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.pulsarreceiver.Athenz": {
            "additionalProperties": false,
            "properties": {
                "key_id": {
                    "title": "key_id",
                    "type": "string"
                },
                "principal_header": {
                    "title": "principal_header",
                    "type": "string"
                },
                "private_key": {
                    "title": "private_key",
                    "type": "string"
                },
                "provider_domain": {
                    "title": "provider_domain",
                    "type": "string"
                },
                "tenant_domain": {
                    "title": "tenant_domain",
                    "type": "string"
                },
                "tenant_service": {
                    "title": "tenant_service",
                    "type": "string"
                },
                "zts_url": {
                    "title": "zts_url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.pulsarreceiver.Authentication": {
            "additionalProperties": false,
            "properties": {
                "athenz": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.pulsarreceiver.Athenz",
                    "title": "athenz"
                },
                "oauth2": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.pulsarreceiver.OAuth2",
                    "title": "oauth2"
                },
                "tls": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.pulsarreceiver.TLS",
                    "title": "tls"
                },
                "token": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.pulsarreceiver.Token",
                    "title": "token"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.pulsarreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "auth": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.pulsarreceiver.Authentication",
                    "title": "auth"
                },
                "consumer_name": {
                    "description": "Name specifies the consumer name.",
                    "title": "consumer_name",
                    "type": "string"
                },
                "encoding": {
                    "description": "Encoding of the messages (default \"otlp_proto\")",
                    "title": "encoding",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Configure the service URL for the Pulsar service.",
                    "title": "endpoint",
                    "type": "string"
                },
                "subscription": {
                    "description": "The Subscription that receiver will be consuming messages from (default \"otlp_subscription\")",
                    "title": "subscription",
                    "type": "string"
                },
                "tls_allow_insecure_connection": {
                    "description": "Configure whether the Pulsar client accept untrusted TLS certificate from broker (default: false)",
                    "title": "tls_allow_insecure_connection",
                    "type": "boolean"
                },
                "tls_trust_certs_file_path": {
                    "description": "Set the path to the trusted TLS certificate file",
                    "title": "tls_trust_certs_file_path",
                    "type": "string"
                },
                "topic": {
                    "description": "The topic of pulsar to consume logs,metrics,traces. (default = \"otlp_traces\" for traces,\n\"otlp_metrics\" for metrics, \"otlp_logs\" for logs)",
                    "title": "topic",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.pulsarreceiver.OAuth2": {
            "additionalProperties": false,
            "properties": {
                "audience": {
                    "title": "audience",
                    "type": "string"
                },
                "client_id": {
                    "title": "client_id",
                    "type": "string"
                },
                "issuer_url": {
                    "title": "issuer_url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.pulsarreceiver.TLS": {
            "additionalProperties": false,
            "properties": {
                "cert_file": {
                    "title": "cert_file",
                    "type": "string"
                },
                "key_file": {
                    "title": "key_file",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.pulsarreceiver.Token": {
            "additionalProperties": false,
            "properties": {
                "token": {
                    "title": "token",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines the configuration for the various elements of the receiver agent.",
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "password": {
                    "title": "password",
                    "type": "string"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "username": {
                    "title": "username",
                    "type": "string"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for rabbitmq metrics.",
            "properties": {
                "rabbitmq.consumer.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.MetricConfig",
                    "title": "rabbitmq.consumer.count"
                },
                "rabbitmq.message.acknowledged": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.MetricConfig",
                    "title": "rabbitmq.message.acknowledged"
                },
                "rabbitmq.message.current": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.MetricConfig",
                    "title": "rabbitmq.message.current"
                },
                "rabbitmq.message.delivered": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.MetricConfig",
                    "title": "rabbitmq.message.delivered"
                },
                "rabbitmq.message.dropped": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.MetricConfig",
                    "title": "rabbitmq.message.dropped"
                },
                "rabbitmq.message.published": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.MetricConfig",
                    "title": "rabbitmq.message.published"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for rabbitmq resource attributes.",
            "properties": {
                "rabbitmq.node.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "rabbitmq.node.name"
                },
                "rabbitmq.queue.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "rabbitmq.queue.name"
                },
                "rabbitmq.vhost.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "rabbitmq.vhost.name"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.receivercreator.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for receiver_creator.",
            "properties": {
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.receivercreator.resourceAttributes",
                    "description": "ResourceAttributes is a map of default resource attributes to add to each resource\nobject received by this receiver from dynamically created receivers.",
                    "title": "resource_attributes"
                },
                "watch_observers": {
                    "description": "WatchObservers are the extensions to listen to endpoints from.",
                    "items": {
                        "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID"
                    },
                    "title": "watch_observers",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.receivercreator.resourceAttributes": {
            "patternProperties": {
                ".*": {
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nFor TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address,\nor a host name that can be resolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "password": {
                    "description": "Optional password. Must match the password specified in the\nrequirepass server configuration option.",
                    "title": "password",
                    "type": "string"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "title": "tls"
                },
                "transport": {
                    "description": "Transport to use. Known protocols are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only),\n\"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\".",
                    "title": "transport",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for redis metrics.",
            "properties": {
                "redis.clients.blocked": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.clients.blocked"
                },
                "redis.clients.connected": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.clients.connected"
                },
                "redis.clients.max_input_buffer": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.clients.max_input_buffer"
                },
                "redis.clients.max_output_buffer": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.clients.max_output_buffer"
                },
                "redis.cmd.calls": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.cmd.calls"
                },
                "redis.cmd.usec": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.cmd.usec"
                },
                "redis.commands": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.commands"
                },
                "redis.commands.processed": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.commands.processed"
                },
                "redis.connections.received": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.connections.received"
                },
                "redis.connections.rejected": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.connections.rejected"
                },
                "redis.cpu.time": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.cpu.time"
                },
                "redis.db.avg_ttl": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.db.avg_ttl"
                },
                "redis.db.expires": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.db.expires"
                },
                "redis.db.keys": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.db.keys"
                },
                "redis.keys.evicted": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.keys.evicted"
                },
                "redis.keys.expired": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.keys.expired"
                },
                "redis.keyspace.hits": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.keyspace.hits"
                },
                "redis.keyspace.misses": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.keyspace.misses"
                },
                "redis.latest_fork": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.latest_fork"
                },
                "redis.maxmemory": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.maxmemory"
                },
                "redis.memory.fragmentation_ratio": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.memory.fragmentation_ratio"
                },
                "redis.memory.lua": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.memory.lua"
                },
                "redis.memory.peak": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.memory.peak"
                },
                "redis.memory.rss": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.memory.rss"
                },
                "redis.memory.used": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.memory.used"
                },
                "redis.net.input": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.net.input"
                },
                "redis.net.output": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.net.output"
                },
                "redis.rdb.changes_since_last_save": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.rdb.changes_since_last_save"
                },
                "redis.replication.backlog_first_byte_offset": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.replication.backlog_first_byte_offset"
                },
                "redis.replication.offset": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.replication.offset"
                },
                "redis.role": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.role"
                },
                "redis.slaves.connected": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.slaves.connected"
                },
                "redis.uptime": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.MetricConfig",
                    "title": "redis.uptime"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for redis resource attributes.",
            "properties": {
                "redis.version": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "redis.version"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.simpleprometheusreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for simple prometheus receiver.",
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "collection_interval": {
                    "description": "CollectionInterval is the interval at which metrics should be collected",
                    "title": "collection_interval",
                    "type": "integer"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "labels": {
                    "description": "Labels static labels",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "labels",
                    "type": "object"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "metrics_path": {
                    "description": "MetricsPath the path to the metrics endpoint.",
                    "title": "metrics_path",
                    "type": "string"
                },
                "params": {
                    "$ref": "#/$defs/net.url.Values",
                    "description": "Params the parameters to the metrics endpoint.",
                    "title": "params"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "tls_config": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.simpleprometheusreceiver.tlsConfig",
                    "title": "tls_config"
                },
                "tls_enabled": {
                    "title": "tls_enabled",
                    "type": "boolean"
                },
                "use_service_account": {
                    "description": "Whether or not to use pod service account to authenticate.",
                    "title": "use_service_account",
                    "type": "boolean"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.simpleprometheusreceiver.tlsConfig": {
            "additionalProperties": false,
            "properties": {
                "ca_file": {
                    "title": "ca_file",
                    "type": "string"
                },
                "cert_file": {
                    "title": "cert_file",
                    "type": "string"
                },
                "insecure_skip_verify": {
                    "title": "insecure_skip_verify",
                    "type": "boolean"
                },
                "key_file": {
                    "title": "key_file",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlqueryreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "datasource": {
                    "title": "datasource",
                    "type": "string"
                },
                "driver": {
                    "title": "driver",
                    "type": "string"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "queries": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlqueryreceiver.Query"
                    },
                    "title": "queries",
                    "type": "array"
                },
                "storage": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID",
                    "title": "storage"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlqueryreceiver.LogsCfg": {
            "additionalProperties": false,
            "properties": {
                "body_column": {
                    "title": "body_column",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlqueryreceiver.MetricCfg": {
            "additionalProperties": false,
            "properties": {
                "aggregation": {
                    "title": "aggregation",
                    "type": "string"
                },
                "attribute_columns": {
                    "items": {
                        "type": "string"
                    },
                    "title": "attribute_columns",
                    "type": "array"
                },
                "data_type": {
                    "title": "data_type",
                    "type": "string"
                },
                "description": {
                    "title": "description",
                    "type": "string"
                },
                "metric_name": {
                    "title": "metric_name",
                    "type": "string"
                },
                "monotonic": {
                    "title": "monotonic",
                    "type": "boolean"
                },
                "start_ts_column": {
                    "title": "start_ts_column",
                    "type": "string"
                },
                "static_attributes": {
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "static_attributes",
                    "type": "object"
                },
                "ts_column": {
                    "title": "ts_column",
                    "type": "string"
                },
                "unit": {
                    "title": "unit",
                    "type": "string"
                },
                "value_column": {
                    "title": "value_column",
                    "type": "string"
                },
                "value_type": {
                    "title": "value_type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlqueryreceiver.Query": {
            "additionalProperties": false,
            "properties": {
                "logs": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlqueryreceiver.LogsCfg"
                    },
                    "title": "logs",
                    "type": "array"
                },
                "metrics": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlqueryreceiver.MetricCfg"
                    },
                    "title": "metrics",
                    "type": "array"
                },
                "sql": {
                    "title": "sql",
                    "type": "string"
                },
                "tracking_column": {
                    "title": "tracking_column",
                    "type": "string"
                },
                "tracking_start_value": {
                    "title": "tracking_start_value",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for a sqlserver receiver.",
            "properties": {
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "computer_name": {
                    "title": "computer_name",
                    "type": "string"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "instance_name": {
                    "title": "instance_name",
                    "type": "string"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for sqlserver metrics.",
            "properties": {
                "sqlserver.batch.request.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.batch.request.rate"
                },
                "sqlserver.batch.sql_compilation.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.batch.sql_compilation.rate"
                },
                "sqlserver.batch.sql_recompilation.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.batch.sql_recompilation.rate"
                },
                "sqlserver.lock.wait.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.lock.wait.rate"
                },
                "sqlserver.lock.wait_time.avg": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.lock.wait_time.avg"
                },
                "sqlserver.page.buffer_cache.hit_ratio": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.page.buffer_cache.hit_ratio"
                },
                "sqlserver.page.checkpoint.flush.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.page.checkpoint.flush.rate"
                },
                "sqlserver.page.lazy_write.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.page.lazy_write.rate"
                },
                "sqlserver.page.life_expectancy": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.page.life_expectancy"
                },
                "sqlserver.page.operation.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.page.operation.rate"
                },
                "sqlserver.page.split.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.page.split.rate"
                },
                "sqlserver.transaction.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.transaction.rate"
                },
                "sqlserver.transaction.write.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.transaction.write.rate"
                },
                "sqlserver.transaction_log.flush.data.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.transaction_log.flush.data.rate"
                },
                "sqlserver.transaction_log.flush.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.transaction_log.flush.rate"
                },
                "sqlserver.transaction_log.flush.wait.rate": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.transaction_log.flush.wait.rate"
                },
                "sqlserver.transaction_log.growth.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.transaction_log.growth.count"
                },
                "sqlserver.transaction_log.shrink.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.transaction_log.shrink.count"
                },
                "sqlserver.transaction_log.usage": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.transaction_log.usage"
                },
                "sqlserver.user.connection.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.MetricConfig",
                    "title": "sqlserver.user.connection.count"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for sqlserver resource attributes.",
            "properties": {
                "sqlserver.computer.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "sqlserver.computer.name"
                },
                "sqlserver.database.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "sqlserver.database.name"
                },
                "sqlserver.instance.name": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "sqlserver.instance.name"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.statsdreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for StatsD receiver.",
            "properties": {
                "aggregation_interval": {
                    "title": "aggregation_interval",
                    "type": "integer"
                },
                "enable_metric_type": {
                    "title": "enable_metric_type",
                    "type": "boolean"
                },
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nFor TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address,\nor a host name that can be resolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "is_monotonic_counter": {
                    "title": "is_monotonic_counter",
                    "type": "boolean"
                },
                "timer_histogram_mapping": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.statsdreceiver.protocol.TimerHistogramMapping"
                    },
                    "title": "timer_histogram_mapping",
                    "type": "array"
                },
                "transport": {
                    "description": "Transport to use. Known protocols are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only),\n\"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\".",
                    "title": "transport",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.statsdreceiver.protocol.HistogramConfig": {
            "additionalProperties": false,
            "properties": {
                "max_size": {
                    "title": "max_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.statsdreceiver.protocol.TimerHistogramMapping": {
            "additionalProperties": false,
            "properties": {
                "histogram": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.statsdreceiver.protocol.HistogramConfig",
                    "title": "histogram"
                },
                "observer_type": {
                    "title": "observer_type",
                    "type": "string"
                },
                "statsd_type": {
                    "title": "statsd_type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.syslogreceiver.SysLogConfig": {
            "additionalProperties": false,
            "description": "SysLogConfig defines configuration for the syslog receiver",
            "properties": {
                "attributes": {
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "enable_octet_counting": {
                    "title": "enable_octet_counting",
                    "type": "boolean"
                },
                "id": {
                    "title": "id",
                    "type": "string"
                },
                "location": {
                    "title": "location",
                    "type": "string"
                },
                "non_transparent_framing_trailer": {
                    "title": "non_transparent_framing_trailer",
                    "type": "string"
                },
                "operators": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.Config"
                    },
                    "title": "operators",
                    "type": "array"
                },
                "output": {
                    "items": {
                        "type": "string"
                    },
                    "title": "output",
                    "type": "array"
                },
                "protocol": {
                    "title": "protocol",
                    "type": "string"
                },
                "resource": {
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "resource",
                    "type": "object"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.coreinternal.consumerretry.Config",
                    "title": "retry_on_failure"
                },
                "storage": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID",
                    "title": "storage"
                },
                "tcp": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.input.tcp.BaseConfig",
                    "title": "tcp"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                },
                "udp": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.input.udp.BaseConfig",
                    "title": "udp"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.tcplogreceiver.TCPLogConfig": {
            "additionalProperties": false,
            "description": "TCPLogConfig defines configuration for the tcp receiver",
            "properties": {
                "MultiLineBuilder": {
                    "title": "MultiLineBuilder"
                },
                "add_attributes": {
                    "title": "add_attributes",
                    "type": "boolean"
                },
                "attributes": {
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "encoding": {
                    "title": "encoding",
                    "type": "string"
                },
                "id": {
                    "title": "id",
                    "type": "string"
                },
                "listen_address": {
                    "title": "listen_address",
                    "type": "string"
                },
                "max_log_size": {
                    "title": "max_log_size",
                    "type": "integer"
                },
                "multiline": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.helper.MultilineConfig",
                    "title": "multiline"
                },
                "operators": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.Config"
                    },
                    "title": "operators",
                    "type": "array"
                },
                "output": {
                    "items": {
                        "type": "string"
                    },
                    "title": "output",
                    "type": "array"
                },
                "preserve_leading_whitespaces": {
                    "title": "preserve_leading_whitespaces",
                    "type": "boolean"
                },
                "preserve_trailing_whitespaces": {
                    "title": "preserve_trailing_whitespaces",
                    "type": "boolean"
                },
                "resource": {
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "resource",
                    "type": "object"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.coreinternal.consumerretry.Config",
                    "title": "retry_on_failure"
                },
                "storage": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID",
                    "title": "storage"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSServerSetting",
                    "title": "tls"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.udplogreceiver.UDPLogConfig": {
            "additionalProperties": false,
            "description": "UDPLogConfig defines configuration for the udp receiver",
            "properties": {
                "add_attributes": {
                    "title": "add_attributes",
                    "type": "boolean"
                },
                "attributes": {
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "encoding": {
                    "title": "encoding",
                    "type": "string"
                },
                "id": {
                    "title": "id",
                    "type": "string"
                },
                "listen_address": {
                    "title": "listen_address",
                    "type": "string"
                },
                "multiline": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.helper.MultilineConfig",
                    "title": "multiline"
                },
                "operators": {
                    "items": {
                        "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.pkg.stanza.operator.Config"
                    },
                    "title": "operators",
                    "type": "array"
                },
                "output": {
                    "items": {
                        "type": "string"
                    },
                    "title": "output",
                    "type": "array"
                },
                "preserve_leading_whitespaces": {
                    "title": "preserve_leading_whitespaces",
                    "type": "boolean"
                },
                "preserve_trailing_whitespaces": {
                    "title": "preserve_trailing_whitespaces",
                    "type": "boolean"
                },
                "resource": {
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "resource",
                    "type": "object"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.internal.coreinternal.consumerretry.Config",
                    "title": "retry_on_failure"
                },
                "storage": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID",
                    "title": "storage"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zipkinreceiver.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for Zipkin receiver.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth for this receiver",
                    "title": "auth"
                },
                "cors": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.confighttp.CORSSettings",
                    "description": "CORS configures the server for HTTP cross-origin resource sharing (CORS).",
                    "title": "cors"
                },
                "endpoint": {
                    "description": "Endpoint configures the listening address for the server.",
                    "title": "endpoint",
                    "type": "string"
                },
                "include_metadata": {
                    "description": "IncludeMetadata propagates the client metadata from the incoming requests to the downstream consumers\nExperimental: *NOTE* this option is subject to change or removal in the future.",
                    "title": "include_metadata",
                    "type": "boolean"
                },
                "max_request_body_size": {
                    "description": "MaxRequestBodySize sets the maximum request body size in bytes",
                    "title": "max_request_body_size",
                    "type": "integer"
                },
                "parse_string_tags": {
                    "description": "If enabled the zipkin receiver will attempt to parse string tags/binary annotations into int/bool/float.\nDisabled by default",
                    "title": "parse_string_tags",
                    "type": "boolean"
                },
                "response_headers": {
                    "description": "Additional headers attached to each HTTP response sent to the client.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "response_headers",
                    "type": "object"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSServerSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.Config": {
            "additionalProperties": false,
            "properties": {
                "collection_interval": {
                    "title": "collection_interval",
                    "type": "integer"
                },
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nThe address has the form \"host:port\". The host must be a literal IP address, or a host name that can be\nresolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "initial_delay": {
                    "title": "initial_delay",
                    "type": "integer"
                },
                "metrics": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricsConfig",
                    "title": "metrics"
                },
                "resource_attributes": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.ResourceAttributesConfig",
                    "title": "resource_attributes"
                },
                "timeout": {
                    "description": "Timeout within which requests should be completed.",
                    "title": "timeout",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig": {
            "additionalProperties": false,
            "description": "MetricConfig provides common config for a particular metric.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricsConfig": {
            "additionalProperties": false,
            "description": "MetricsConfig provides config for zookeeper metrics.",
            "properties": {
                "zookeeper.connection.active": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.connection.active"
                },
                "zookeeper.data_tree.ephemeral_node.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.data_tree.ephemeral_node.count"
                },
                "zookeeper.data_tree.size": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.data_tree.size"
                },
                "zookeeper.file_descriptor.limit": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.file_descriptor.limit"
                },
                "zookeeper.file_descriptor.open": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.file_descriptor.open"
                },
                "zookeeper.follower.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.follower.count"
                },
                "zookeeper.fsync.exceeded_threshold.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.fsync.exceeded_threshold.count"
                },
                "zookeeper.latency.avg": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.latency.avg"
                },
                "zookeeper.latency.max": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.latency.max"
                },
                "zookeeper.latency.min": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.latency.min"
                },
                "zookeeper.packet.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.packet.count"
                },
                "zookeeper.request.active": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.request.active"
                },
                "zookeeper.ruok": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.ruok"
                },
                "zookeeper.sync.pending": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.sync.pending"
                },
                "zookeeper.watch.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.watch.count"
                },
                "zookeeper.znode.count": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.MetricConfig",
                    "title": "zookeeper.znode.count"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.ResourceAttributeConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributeConfig provides common config for a particular resource attribute.",
            "properties": {
                "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.ResourceAttributesConfig": {
            "additionalProperties": false,
            "description": "ResourceAttributesConfig provides config for zookeeper resource attributes.",
            "properties": {
                "server.state": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "server.state"
                },
                "zk.version": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.internal.metadata.ResourceAttributeConfig",
                    "title": "zk.version"
                }
            },
            "type": "object"
        },
        "github.com.prometheus.client_golang.prometheus.Labels": {
            "patternProperties": {
                ".*": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.component.ID": {
            "additionalProperties": false,
            "description": "ID represents the identity for a component.",
            "properties": {},
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.configauth.Authentication": {
            "additionalProperties": false,
            "description": "Authentication defines the auth settings for the receiver.",
            "properties": {
                "authenticator": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID",
                    "description": "AuthenticatorID specifies the name of the extension to use in order to authenticate the incoming data point.",
                    "title": "authenticator"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.configgrpc.GRPCClientSettings": {
            "additionalProperties": false,
            "description": "GRPCClientSettings defines common settings for a gRPC client configuration.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing RPCs.",
                    "title": "auth"
                },
                "balancer_name": {
                    "description": "Sets the balancer in grpclb_policy to discover the servers. Default is pick_first.\nhttps://github.com/grpc/grpc-go/blob/master/examples/features/load_balancing/README.md",
                    "title": "balancer_name",
                    "type": "string"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target to which the exporter is going to send traces or metrics,\nusing the gRPC protocol. The valid syntax is described at\nhttps://github.com/grpc/grpc/blob/master/doc/naming.md.",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "The headers associated with gRPC requests.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "keepalive": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configgrpc.KeepaliveClientConfig",
                    "description": "The keepalive parameters for gRPC client. See grpc.WithKeepaliveParams.\n(https://godoc.org/google.golang.org/grpc#WithKeepaliveParams).",
                    "title": "keepalive"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for gRPC client. See grpc.WithReadBufferSize.\n(https://godoc.org/google.golang.org/grpc#WithReadBufferSize).",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "wait_for_ready": {
                    "description": "WaitForReady parameter configures client to wait for ready state before sending data.\n(https://github.com/grpc/grpc/blob/master/doc/wait-for-ready.md)",
                    "title": "wait_for_ready",
                    "type": "boolean"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for gRPC gRPC. See grpc.WithWriteBufferSize.\n(https://godoc.org/google.golang.org/grpc#WithWriteBufferSize).",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.configgrpc.GRPCServerSettings": {
            "additionalProperties": false,
            "description": "GRPCServerSettings defines common settings for a gRPC server configuration.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth for this receiver",
                    "title": "auth"
                },
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nFor TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address,\nor a host name that can be resolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "include_metadata": {
                    "description": "Include propagates the incoming connection's metadata to downstream consumers.\nExperimental: *NOTE* this option is subject to change or removal in the future.",
                    "title": "include_metadata",
                    "type": "boolean"
                },
                "keepalive": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configgrpc.KeepaliveServerConfig",
                    "description": "Keepalive anchor for all the settings related to keepalive.",
                    "title": "keepalive"
                },
                "max_concurrent_streams": {
                    "description": "MaxConcurrentStreams sets the limit on the number of concurrent streams to each ServerTransport.\nIt has effect only for streaming RPCs.",
                    "title": "max_concurrent_streams",
                    "type": "integer"
                },
                "max_recv_msg_size_mib": {
                    "description": "MaxRecvMsgSizeMiB sets the maximum size (in MiB) of messages accepted by the server.",
                    "title": "max_recv_msg_size_mib",
                    "type": "integer"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for gRPC server. See grpc.ReadBufferSize.\n(https://godoc.org/google.golang.org/grpc#ReadBufferSize).",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSServerSetting",
                    "description": "Configures the protocol to use TLS.\nThe default value is nil, which will cause the protocol to not use TLS.",
                    "title": "tls"
                },
                "transport": {
                    "description": "Transport to use. Known protocols are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only),\n\"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\".",
                    "title": "transport",
                    "type": "string"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for gRPC server. See grpc.WriteBufferSize.\n(https://godoc.org/google.golang.org/grpc#WriteBufferSize).",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.configgrpc.KeepaliveClientConfig": {
            "additionalProperties": false,
            "description": "KeepaliveClientConfig exposes the keepalive.ClientParameters to be used by the exporter.",
            "properties": {
                "permit_without_stream": {
                    "title": "permit_without_stream",
                    "type": "boolean"
                },
                "time": {
                    "title": "time",
                    "type": "integer"
                },
                "timeout": {
                    "title": "timeout",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.configgrpc.KeepaliveEnforcementPolicy": {
            "additionalProperties": false,
            "description": "KeepaliveEnforcementPolicy allow configuration of the keepalive.EnforcementPolicy.",
            "properties": {
                "min_time": {
                    "title": "min_time",
                    "type": "integer"
                },
                "permit_without_stream": {
                    "title": "permit_without_stream",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.configgrpc.KeepaliveServerConfig": {
            "additionalProperties": false,
            "description": "KeepaliveServerConfig is the configuration for keepalive.",
            "properties": {
                "enforcement_policy": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configgrpc.KeepaliveEnforcementPolicy",
                    "title": "enforcement_policy"
                },
                "server_parameters": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configgrpc.KeepaliveServerParameters",
                    "title": "server_parameters"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.configgrpc.KeepaliveServerParameters": {
            "additionalProperties": false,
            "description": "KeepaliveServerParameters allow configuration of the keepalive.ServerParameters.",
            "properties": {
                "max_connection_age": {
                    "title": "max_connection_age",
                    "type": "integer"
                },
                "max_connection_age_grace": {
                    "title": "max_connection_age_grace",
                    "type": "integer"
                },
                "max_connection_idle": {
                    "title": "max_connection_idle",
                    "type": "integer"
                },
                "time": {
                    "title": "time",
                    "type": "integer"
                },
                "timeout": {
                    "title": "timeout",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.confighttp.CORSSettings": {
            "additionalProperties": false,
            "description": "CORSSettings configures a receiver for HTTP cross-origin resource sharing (CORS).",
            "properties": {
                "allowed_headers": {
                    "description": "AllowedHeaders sets what headers will be allowed in CORS requests.\nThe Accept, Accept-Language, Content-Type, and Content-Language\nheaders are implicitly allowed. If no headers are listed,\nX-Requested-With will also be accepted by default. Include \"*\" to\nallow any request header.",
                    "items": {
                        "type": "string"
                    },
                    "title": "allowed_headers",
                    "type": "array"
                },
                "allowed_origins": {
                    "description": "AllowedOrigins sets the allowed values of the Origin header for\nHTTP/JSON requests to an OTLP receiver. An origin may contain a\nwildcard (*) to replace 0 or more characters (e.g.,\n\"http://*.domain.com\", or \"*\" to allow any origin).",
                    "items": {
                        "type": "string"
                    },
                    "title": "allowed_origins",
                    "type": "array"
                },
                "max_age": {
                    "description": "MaxAge sets the value of the Access-Control-Max-Age response header.\nSet it to the number of seconds that browsers should cache a CORS\npreflight response for.",
                    "title": "max_age",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.confighttp.HTTPClientSettings": {
            "additionalProperties": false,
            "description": "HTTPClientSettings defines settings for creating an HTTP client.",
            "properties": {
                "CustomRoundTripper": {
                    "description": "Custom Round Tripper to allow for individual components to intercept HTTP requests",
                    "title": "CustomRoundTripper"
                },
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing HTTP calls.",
                    "title": "auth"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "Additional headers attached to each HTTP request sent by the client.\nExisting header values are overwritten if collision happens.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "idle_conn_timeout": {
                    "description": "IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "idle_conn_timeout",
                    "type": "integer"
                },
                "max_conns_per_host": {
                    "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,\nactive, and idle states.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_conns_per_host",
                    "type": "integer"
                },
                "max_idle_conns": {
                    "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns",
                    "type": "integer"
                },
                "max_idle_conns_per_host": {
                    "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.\nThere's an already set value, and we want to override it only if an explicit value provided",
                    "title": "max_idle_conns_per_host",
                    "type": "integer"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "timeout": {
                    "description": "Timeout parameter configures `http.Client.Timeout`.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.confighttp.HTTPServerSettings": {
            "additionalProperties": false,
            "description": "HTTPServerSettings defines settings for creating an HTTP server.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth for this receiver",
                    "title": "auth"
                },
                "cors": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.confighttp.CORSSettings",
                    "description": "CORS configures the server for HTTP cross-origin resource sharing (CORS).",
                    "title": "cors"
                },
                "endpoint": {
                    "description": "Endpoint configures the listening address for the server.",
                    "title": "endpoint",
                    "type": "string"
                },
                "include_metadata": {
                    "description": "IncludeMetadata propagates the client metadata from the incoming requests to the downstream consumers\nExperimental: *NOTE* this option is subject to change or removal in the future.",
                    "title": "include_metadata",
                    "type": "boolean"
                },
                "max_request_body_size": {
                    "description": "MaxRequestBodySize sets the maximum request body size in bytes",
                    "title": "max_request_body_size",
                    "type": "integer"
                },
                "response_headers": {
                    "description": "Additional headers attached to each HTTP response sent to the client.\nHeader values are opaque since they may be sensitive.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "response_headers",
                    "type": "object"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSServerSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.confignet.NetAddr": {
            "additionalProperties": false,
            "description": "NetAddr represents a network endpoint address.",
            "properties": {
                "endpoint": {
                    "description": "Endpoint configures the address for this network connection.\nFor TCP and UDP networks, the address has the form \"host:port\". The host must be a literal IP address,\nor a host name that can be resolved to IP addresses. The port must be a literal port number or a service name.\nIf the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or\n\"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
                    "title": "endpoint",
                    "type": "string"
                },
                "transport": {
                    "description": "Transport to use. Known protocols are \"tcp\", \"tcp4\" (IPv4-only), \"tcp6\" (IPv6-only), \"udp\", \"udp4\" (IPv4-only),\n\"udp6\" (IPv6-only), \"ip\", \"ip4\" (IPv4-only), \"ip6\" (IPv6-only), \"unix\", \"unixgram\" and \"unixpacket\".",
                    "title": "transport",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.configtls.TLSClientSetting": {
            "additionalProperties": false,
            "description": "TLSClientSetting contains TLS configurations that are specific to client connections in addition to the common configurations.",
            "properties": {
                "ca_file": {
                    "description": "Path to the CA cert. For a client this verifies the server certificate.\nFor a server this verifies client certificates. If empty uses system root CA.\n(optional)",
                    "title": "ca_file",
                    "type": "string"
                },
                "ca_pem": {
                    "description": "In memory PEM encoded cert. (optional)",
                    "title": "ca_pem",
                    "type": "string"
                },
                "cert_file": {
                    "description": "Path to the TLS cert to use for TLS required connections. (optional)",
                    "title": "cert_file",
                    "type": "string"
                },
                "cert_pem": {
                    "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
                    "title": "cert_pem",
                    "type": "string"
                },
                "insecure": {
                    "description": "In gRPC when set to true, this is used to disable the client transport security.\nSee https://godoc.org/google.golang.org/grpc#WithInsecure.\nIn HTTP, this disables verifying the server's certificate chain and host name\n(InsecureSkipVerify in the tls Config). Please refer to\nhttps://godoc.org/crypto/tls#Config for more information.\n(optional, default false)",
                    "title": "insecure",
                    "type": "boolean"
                },
                "insecure_skip_verify": {
                    "description": "InsecureSkipVerify will enable TLS but not verify the certificate.",
                    "title": "insecure_skip_verify",
                    "type": "boolean"
                },
                "key_file": {
                    "description": "Path to the TLS key to use for TLS required connections. (optional)",
                    "title": "key_file",
                    "type": "string"
                },
                "key_pem": {
                    "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
                    "title": "key_pem",
                    "type": "string"
                },
                "max_version": {
                    "description": "MaxVersion sets the maximum TLS version that is acceptable.\nIf not set, refer to crypto/tls for defaults. (optional)",
                    "title": "max_version",
                    "type": "string"
                },
                "min_version": {
                    "description": "MinVersion sets the minimum TLS version that is acceptable.\nIf not set, TLS 1.2 will be used. (optional)",
                    "title": "min_version",
                    "type": "string"
                },
                "reload_interval": {
                    "description": "ReloadInterval specifies the duration after which the certificate will be reloaded\nIf not set, it will never be reloaded (optional)",
                    "title": "reload_interval",
                    "type": "integer"
                },
                "server_name_override": {
                    "description": "ServerName requested by client for virtual hosting.\nThis sets the ServerName in the TLSConfig. Please refer to\nhttps://godoc.org/crypto/tls#Config for more information. (optional)",
                    "title": "server_name_override",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.config.configtls.TLSServerSetting": {
            "additionalProperties": false,
            "description": "TLSServerSetting contains TLS configurations that are specific to server connections in addition to the common configurations.",
            "properties": {
                "ca_file": {
                    "description": "Path to the CA cert. For a client this verifies the server certificate.\nFor a server this verifies client certificates. If empty uses system root CA.\n(optional)",
                    "title": "ca_file",
                    "type": "string"
                },
                "ca_pem": {
                    "description": "In memory PEM encoded cert. (optional)",
                    "title": "ca_pem",
                    "type": "string"
                },
                "cert_file": {
                    "description": "Path to the TLS cert to use for TLS required connections. (optional)",
                    "title": "cert_file",
                    "type": "string"
                },
                "cert_pem": {
                    "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
                    "title": "cert_pem",
                    "type": "string"
                },
                "client_ca_file": {
                    "description": "Path to the TLS cert to use by the server to verify a client certificate. (optional)\nThis sets the ClientCAs and ClientAuth to RequireAndVerifyClientCert in the TLSConfig. Please refer to\nhttps://godoc.org/crypto/tls#Config for more information. (optional)",
                    "title": "client_ca_file",
                    "type": "string"
                },
                "client_ca_file_reload": {
                    "description": "Reload the ClientCAs file when it is modified\n(optional, default false)",
                    "title": "client_ca_file_reload",
                    "type": "boolean"
                },
                "key_file": {
                    "description": "Path to the TLS key to use for TLS required connections. (optional)",
                    "title": "key_file",
                    "type": "string"
                },
                "key_pem": {
                    "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
                    "title": "key_pem",
                    "type": "string"
                },
                "max_version": {
                    "description": "MaxVersion sets the maximum TLS version that is acceptable.\nIf not set, refer to crypto/tls for defaults. (optional)",
                    "title": "max_version",
                    "type": "string"
                },
                "min_version": {
                    "description": "MinVersion sets the minimum TLS version that is acceptable.\nIf not set, TLS 1.2 will be used. (optional)",
                    "title": "min_version",
                    "type": "string"
                },
                "reload_interval": {
                    "description": "ReloadInterval specifies the duration after which the certificate will be reloaded\nIf not set, it will never be reloaded (optional)",
                    "title": "reload_interval",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.exporter.exporterhelper.QueueSettings": {
            "additionalProperties": false,
            "description": "QueueSettings defines configuration for queueing batches before sending to the consumerSender.",
            "properties": {
                "enabled": {
                    "description": "Enabled indicates whether to not enqueue batches before sending to the consumerSender.",
                    "title": "enabled",
                    "type": "boolean"
                },
                "num_consumers": {
                    "description": "NumConsumers is the number of consumers from the queue.",
                    "title": "num_consumers",
                    "type": "integer"
                },
                "queue_size": {
                    "description": "QueueSize is the maximum number of batches allowed in queue at a given time.",
                    "title": "queue_size",
                    "type": "integer"
                },
                "storage": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID",
                    "description": "StorageID if not empty, enables the persistent storage and uses the component specified\nas a storage extension for the persistent queue",
                    "title": "storage"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.exporter.exporterhelper.RetrySettings": {
            "additionalProperties": false,
            "description": "RetrySettings defines configuration for retrying batches in case of export failure.",
            "properties": {
                "enabled": {
                    "description": "Enabled indicates whether to not retry sending batches in case of export failure.",
                    "title": "enabled",
                    "type": "boolean"
                },
                "initial_interval": {
                    "description": "InitialInterval the time to wait after the first failure before retrying.",
                    "title": "initial_interval",
                    "type": "integer"
                },
                "max_elapsed_time": {
                    "description": "MaxElapsedTime is the maximum amount of time (including retries) spent trying to send a request/batch.\nOnce this value is reached, the data is discarded.",
                    "title": "max_elapsed_time",
                    "type": "integer"
                },
                "max_interval": {
                    "description": "MaxInterval is the upper bound on backoff interval. Once this value is reached the delay between\nconsecutive retries will always be `MaxInterval`.",
                    "title": "max_interval",
                    "type": "integer"
                },
                "multiplier": {
                    "description": "Multiplier is the value multiplied by the backoff interval bounds",
                    "title": "multiplier",
                    "type": "number"
                },
                "randomization_factor": {
                    "description": "RandomizationFactor is a random factor used to calculate next backoffs\nRandomized interval = RetryInterval * (1 ± RandomizationFactor)",
                    "title": "randomization_factor",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.exporter.otlpexporter.Config": {
            "additionalProperties": false,
            "description": "Config defines configuration for OTLP exporter.",
            "properties": {
                "auth": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configauth.Authentication",
                    "description": "Auth configuration for outgoing RPCs.",
                    "title": "auth"
                },
                "balancer_name": {
                    "description": "Sets the balancer in grpclb_policy to discover the servers. Default is pick_first.\nhttps://github.com/grpc/grpc-go/blob/master/examples/features/load_balancing/README.md",
                    "title": "balancer_name",
                    "type": "string"
                },
                "compression": {
                    "description": "The compression key for supported compression types within collector.",
                    "title": "compression",
                    "type": "string"
                },
                "endpoint": {
                    "description": "The target to which the exporter is going to send traces or metrics,\nusing the gRPC protocol. The valid syntax is described at\nhttps://github.com/grpc/grpc/blob/master/doc/naming.md.",
                    "title": "endpoint",
                    "type": "string"
                },
                "headers": {
                    "description": "The headers associated with gRPC requests.",
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "headers",
                    "type": "object"
                },
                "keepalive": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configgrpc.KeepaliveClientConfig",
                    "description": "The keepalive parameters for gRPC client. See grpc.WithKeepaliveParams.\n(https://godoc.org/google.golang.org/grpc#WithKeepaliveParams).",
                    "title": "keepalive"
                },
                "read_buffer_size": {
                    "description": "ReadBufferSize for gRPC client. See grpc.WithReadBufferSize.\n(https://godoc.org/google.golang.org/grpc#WithReadBufferSize).",
                    "title": "read_buffer_size",
                    "type": "integer"
                },
                "retry_on_failure": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.RetrySettings",
                    "title": "retry_on_failure"
                },
                "sending_queue": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.exporter.exporterhelper.QueueSettings",
                    "title": "sending_queue"
                },
                "timeout": {
                    "description": "Timeout is the timeout for every attempt to send data to the backend.",
                    "title": "timeout",
                    "type": "integer"
                },
                "tls": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.config.configtls.TLSClientSetting",
                    "description": "TLSSetting struct exposes TLS client configuration.",
                    "title": "tls"
                },
                "wait_for_ready": {
                    "description": "WaitForReady parameter configures client to wait for ready state before sending data.\n(https://github.com/grpc/grpc/blob/master/doc/wait-for-ready.md)",
                    "title": "wait_for_ready",
                    "type": "boolean"
                },
                "write_buffer_size": {
                    "description": "WriteBufferSize for gRPC gRPC. See grpc.WithWriteBufferSize.\n(https://godoc.org/google.golang.org/grpc#WithWriteBufferSize).",
                    "title": "write_buffer_size",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.service.Config": {
            "additionalProperties": false,
            "properties": {
                "extensions": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.service.extensions.Config",
                    "title": "extensions"
                },
                "pipelines": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.service.pipelines.Config",
                    "title": "pipelines"
                },
                "telemetry": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.service.telemetry.Config",
                    "title": "telemetry"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.service.extensions.Config": {
            "items": {
                "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID"
            },
            "type": "array"
        },
        "go.opentelemetry.io.collector.service.pipelines.Config": {
            "patternProperties": {
                ".*": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.service.pipelines.PipelineConfig"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.service.pipelines.PipelineConfig": {
            "additionalProperties": false,
            "properties": {
                "exporters": {
                    "items": {
                        "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID"
                    },
                    "title": "exporters",
                    "type": "array"
                },
                "processors": {
                    "items": {
                        "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID"
                    },
                    "title": "processors",
                    "type": "array"
                },
                "receivers": {
                    "items": {
                        "$ref": "#/$defs/go.opentelemetry.io.collector.component.ID"
                    },
                    "title": "receivers",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.service.telemetry.Config": {
            "additionalProperties": false,
            "properties": {
                "logs": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.service.telemetry.LogsConfig",
                    "title": "logs"
                },
                "metrics": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.service.telemetry.MetricsConfig",
                    "title": "metrics"
                },
                "resource": {
                    "patternProperties": {
                        ".*": {
                            "type": "string"
                        }
                    },
                    "title": "resource",
                    "type": "object"
                },
                "traces": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.service.telemetry.TracesConfig",
                    "title": "traces"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.service.telemetry.LogsConfig": {
            "additionalProperties": false,
            "properties": {
                "development": {
                    "title": "development",
                    "type": "boolean"
                },
                "disable_caller": {
                    "title": "disable_caller",
                    "type": "boolean"
                },
                "disable_stacktrace": {
                    "title": "disable_stacktrace",
                    "type": "boolean"
                },
                "encoding": {
                    "title": "encoding",
                    "type": "string"
                },
                "error_output_paths": {
                    "items": {
                        "type": "string"
                    },
                    "title": "error_output_paths",
                    "type": "array"
                },
                "initial_fields": {
                    "patternProperties": {
                        ".*": true
                    },
                    "title": "initial_fields",
                    "type": "object"
                },
                "level": {
                    "title": "level",
                    "type": "integer"
                },
                "output_paths": {
                    "items": {
                        "type": "string"
                    },
                    "title": "output_paths",
                    "type": "array"
                },
                "sampling": {
                    "$ref": "#/$defs/go.opentelemetry.io.collector.service.telemetry.LogsSamplingConfig",
                    "title": "sampling"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.service.telemetry.LogsSamplingConfig": {
            "additionalProperties": false,
            "properties": {
                "initial": {
                    "title": "initial",
                    "type": "integer"
                },
                "thereafter": {
                    "title": "thereafter",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.service.telemetry.MetricReader": {
            "additionalProperties": false,
            "properties": {
                "args": {
                    "title": "args"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.service.telemetry.MetricsConfig": {
            "additionalProperties": false,
            "properties": {
                "address": {
                    "title": "address",
                    "type": "string"
                },
                "level": {
                    "title": "level",
                    "type": "integer"
                },
                "metric_readers": {
                    "items": {
                        "$ref": "#/$defs/go.opentelemetry.io.collector.service.telemetry.MetricReader"
                    },
                    "title": "metric_readers",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "go.opentelemetry.io.collector.service.telemetry.TracesConfig": {
            "additionalProperties": false,
            "properties": {
                "propagators": {
                    "items": {
                        "type": "string"
                    },
                    "title": "propagators",
                    "type": "array"
                }
            },
            "type": "object"
        },
        "net.url.Values": {
            "patternProperties": {
                ".*": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        }
    },
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "properties": {
        "exporters": {
            "minProperties": 1,
            "patternProperties": {
                "^carbon(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.carbonexporter.Config"
                },
                "^file(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.fileexporter.Config"
                },
                "^jaeger(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.jaegerexporter.Config"
                },
                "^jaegerthrift(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.jaegerthrifthttpexporter.Config"
                },
                "^kafka(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.kafkaexporter.Config"
                },
                "^loadbalancing(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.loadbalancingexporter.Config"
                },
                "^opencensus(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.opencensusexporter.Config"
                },
                "^parquet(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.parquetexporter.Config"
                },
                "^prometheus(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.prometheusexporter.Config"
                },
                "^prometheusremotewrite(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.prometheusremotewriteexporter.Config"
                },
                "^pulsar(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.pulsarexporter.Config"
                },
                "^zipkin(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.exporter.zipkinexporter.Config"
                }
            },
            "type": "object"
        },
        "extensions": {
            "minProperties": 1,
            "patternProperties": {
                "^basicauth(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.basicauthextension.Config"
                },
                "^bearertokenauth(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.bearertokenauthextension.Config"
                },
                "^dockerobserver(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.dockerobserver.Config"
                },
                "^ecsobserver(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.ecsobserver.Config"
                },
                "^ecstaskobserver(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.ecstaskobserver.Config"
                },
                "^healthcheck(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.healthcheckextension.Config"
                },
                "^hostobserver(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.hostobserver.Config"
                },
                "^httpforwarder(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.httpforwarder.Config"
                },
                "^jaegerremotesampling(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.jaegerremotesampling.Config"
                },
                "^k8sobserver(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.observer.k8sobserver.Config"
                },
                "^oauth2clientauth(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.oauth2clientauthextension.Config"
                },
                "^oidcauth(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.oidcauthextension.Config"
                },
                "^pprof(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.extension.pprofextension.Config"
                }
            },
            "type": "object"
        },
        "processors": {
            "minProperties": 1,
            "patternProperties": {
                "^attributes(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.attributesprocessor.Config"
                },
                "^cumulativetodelta(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.cumulativetodeltaprocessor.Config"
                },
                "^deltatorate(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.deltatorateprocessor.Config"
                },
                "^filter(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.filterprocessor.Config"
                },
                "^groupbyattrs(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.groupbyattrsprocessor.Config"
                },
                "^groupbytrace(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.groupbytraceprocessor.Config"
                },
                "^k8sattributes(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.k8sattributesprocessor.Config"
                },
                "^logstransform(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.logstransformprocessor.Config"
                },
                "^metricsgeneration(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.metricsgenerationprocessor.Config"
                },
                "^metricstransform(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.metricstransformprocessor.Config"
                },
                "^probabilisticsampler(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.probabilisticsamplerprocessor.Config"
                },
                "^redaction(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.redactionprocessor.Config"
                },
                "^resource(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourceprocessor.Config"
                },
                "^resourcedetection(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.resourcedetectionprocessor.Config"
                },
                "^routing(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.routingprocessor.Config"
                },
                "^schema(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.schemaprocessor.Config"
                },
                "^servicegraph(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.servicegraphprocessor.Config"
                },
                "^span(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.spanprocessor.Config"
                },
                "^spanmetrics(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.spanmetricsprocessor.Config"
                },
                "^tailsampling(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.tailsamplingprocessor.Config"
                },
                "^transform(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.processor.transformprocessor.Config"
                }
            },
            "type": "object"
        },
        "receivers": {
            "minProperties": 1,
            "patternProperties": {
                "^apache(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.apachereceiver.Config"
                },
                "^awscloudwatch(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscloudwatchreceiver.Config"
                },
                "^awscontainerinsight(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awscontainerinsightreceiver.Config"
                },
                "^awsecscontainermetrics(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awsecscontainermetricsreceiver.Config"
                },
                "^awsxray(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.awsxrayreceiver.Config"
                },
                "^carbon(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.carbonreceiver.Config"
                },
                "^collectd(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.collectdreceiver.Config"
                },
                "^couchdb(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.couchdbreceiver.Config"
                },
                "^dockerstats(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dockerstatsreceiver.Config"
                },
                "^dotnetdiagnostics(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.dotnetdiagnosticsreceiver.Config"
                },
                "^elasticsearch(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.elasticsearchreceiver.Config"
                },
                "^filelog(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.filelogreceiver.FileLogConfig"
                },
                "^fluentforward(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.fluentforwardreceiver.Config"
                },
                "^hostmetrics(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.hostmetricsreceiver.Config"
                },
                "^httpcheck(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.httpcheckreceiver.Config"
                },
                "^jaeger(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jaegerreceiver.Config"
                },
                "^jmx(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.jmxreceiver.Config"
                },
                "^journald(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.journaldreceiver.JournaldConfig"
                },
                "^k8scluster(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.k8sclusterreceiver.Config"
                },
                "^k8sevents(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.k8seventsreceiver.Config"
                },
                "^k8sobjects(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.k8sobjectsreceiver.Config"
                },
                "^kafka(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkareceiver.Config"
                },
                "^kafkametrics(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kafkametricsreceiver.Config"
                },
                "^kubeletstats(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.kubeletstatsreceiver.Config"
                },
                "^memcached(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.memcachedreceiver.Config"
                },
                "^mongodb(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbreceiver.Config"
                },
                "^mongodbatlas(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mongodbatlasreceiver.Config"
                },
                "^mysql(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.mysqlreceiver.Config"
                },
                "^nginx(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.nginxreceiver.Config"
                },
                "^opencensus(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.opencensusreceiver.Config"
                },
                "^oracledb(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.oracledbreceiver.Config"
                },
                "^otlpjsonfile(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.otlpjsonfilereceiver.Config"
                },
                "^podman(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.podmanreceiver.Config"
                },
                "^postgresql(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.postgresqlreceiver.Config"
                },
                "^prometheus(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.prometheusreceiver.Config"
                },
                "^prometheusexec(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.prometheusexecreceiver.Config"
                },
                "^pulsar(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.pulsarreceiver.Config"
                },
                "^rabbitmq(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.rabbitmqreceiver.Config"
                },
                "^receivercreator(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.receivercreator.Config"
                },
                "^redis(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.redisreceiver.Config"
                },
                "^simpleprometheus(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.simpleprometheusreceiver.Config"
                },
                "^sqlquery(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlqueryreceiver.Config"
                },
                "^sqlserver(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.sqlserverreceiver.Config"
                },
                "^statsd(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.statsdreceiver.Config"
                },
                "^syslog(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.syslogreceiver.SysLogConfig"
                },
                "^tcplog(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.tcplogreceiver.TCPLogConfig"
                },
                "^udplog(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.udplogreceiver.UDPLogConfig"
                },
                "^zipkin(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zipkinreceiver.Config"
                },
                "^zookeeper(\\/.+)?$": {
                    "$ref": "#/$defs/github.com.open-telemetry.opentelemetry-collector-contrib.receiver.zookeeperreceiver.Config"
                }
            },
            "type": "object"
        },
        "service": {
            "$ref": "#/$defs/go.opentelemetry.io.collector.service.Config"
        }
    },
    "required": [
        "receivers",
        "exporters",
        "service"
    ],
    "title": "OpenTelemetry Collector Config Schema",
    "type": "object"
}